#+TITLE: My Emacs Config
#+STARTUP: overview indent
#+TYP_TODO: TRY(y) TEST(t) IMPLEMENT(i) TODO(o) | DONE(d)
#+PROPERTY: header-args :tangle malb.el

* Header

#+BEGIN_SRC emacs-lisp
;;; init.el --- personal emacs config file -*- lexical-binding: t ; eval: (read-only-mode 1)-*-
#+END_SRC

* Assumptions & Init

We assume that the following variables are defined:

- ~malb/documents-dir~ - documents
- ~malb/inbox-org~ - this is where I store tasks
- ~malb/work-org~ - this is where I store tasks
- ~malb/private-org~ - this is where I store tasks
- ~malb/literature-dirs~ - PDFs of papers
- ~malb/literature-notes-dir~ - notes on papers
- ~malb/mu4e-name-replacements~ - e-mail name replacements
- ~malb/org-files-dir~ - org files go here
- ~malb/org-files~ - org files
- ~malb/org-mode-ics~ - icalendar file
- ~malb/paradox-github-token~ - github login
- ~malb/projectile-ignored-projects~ - ignored projects
- ~malb/projects-dir~ - a super-repository of which all of my projects are subprojects
- ~malb/sage-executable~ - full path of Sage executable
- ~malb/sync-dir~ - documents that are synchronised
- ~malb/deft-directory~ - where deft files live

We collect our own customisations in the =malb= group.

#+BEGIN_SRC emacs-lisp
(defgroup malb nil
  "malb's personal config"
  :group 'convenience)
#+END_SRC

* Memory

We have RAM, lots of it.

#+BEGIN_SRC emacs-lisp
(setq global-mark-ring-max 256
      mark-ring-max 256
      kill-ring-max 256)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 32 1024 1024)
      gc-cons-percentage 0.1
      garbage-collection-messages nil)
#+END_SRC

*Note:* Don’t set ~gc-cons-threshold~ to something much bigger as it will cause to hang occasionally for a long-ish time.

* TLS

Enable TLS cert checking ([[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][source]])

#+BEGIN_SRC emacs-lisp
(let ((trustfile (replace-regexp-in-string
                  "\\\\" "/" (replace-regexp-in-string
                              "\n" "" (shell-command-to-string "python -m certifi")))))
  (setq tls-program (list
                     (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                             (if (eq window-system 'w32) ".exe" "") trustfile))
        gnutls-verify-error t
        gnutls-trustfiles (list trustfile)
        tls-checktrust t))

;; (let ((bad-hosts
;;        (loop for bad
;;              in `("https://wrong.host.badssl.com/"
;;                   "https://self-signed.badssl.com/")
;;              if (condition-case e
;;                     (url-retrieve
;;                      bad (lambda (retrieved) t))
;;                   (error nil))
;;              collect bad)))
;;   (if bad-hosts
;;       (error (format "tls misconfigured; retrieved %s ok"
;;                      bad-hosts))
;;     (url-retrieve "https://badssl.com"
;;                   (lambda (retrieved) t))))
#+END_SRC

* Utilities

Check if any regexp matches string, because OR is hard …

#+BEGIN_SRC emacs-lisp
(defun malb/regexp-match-p (regexps string)
  (and string
       (catch 'matched
         (let ((inhibit-changing-match-data t))
           (dolist (regexp regexps)
             (when (string-match regexp string)
               (throw 'matched t)))))))
#+END_SRC

* Package Management

Configure package repositories.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/"))
      package-archive-priorities '(("gnu" . 10)
                                   ("melpa" . 20)
                                   ("melpa-stable" . 5)
                                   ("org" . 20))
      package-menu-hide-low-priority nil)
#+END_SRC

Get the package manager going.

#+BEGIN_SRC emacs-lisp
(if (< emacs-major-version 27)
    (package-initialize))
#+END_SRC

Use [[https://github.com/jwiegley/use-package/][use-package]] to keep our configuration readable.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
  (package-install 'use-package-ensure-system-package))

(require 'use-package)
(require 'use-package-ensure-system-package)

(setq use-package-compute-statistics t
      use-package-verbose t
      use-package-always-ensure t)
#+END_SRC

[[https://github.com/Bruce-Connor/paradox/][Paradox]] is a better package list

- Visit the package's homepage with =v=
- View a list of recent commits with =l=
- Shortcuts for package filtering:
  - =f r= filters by regexp (occur)
  - =f u= display only packages with upgrades
  - =f k= filters by keyword
  - =f c= clear filter
- Hit =h= to see all keys

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :commands (paradox-upgrade-packages paradox-list-packages)
  :config (setq paradox-execute-asynchronously t
                paradox-github-token malb/paradox-github-token
                paradox-automatically-star t))
#+END_SRC

[[https://github.com/quelpa/quelpa][Quelpa]] to install packages directly from source.

#+BEGIN_SRC emacs-lisp
(use-package quelpa)
(use-package quelpa-use-package)
#+END_SRC

* Clean Mode Line

Use [[https://github.com/raxod502/blackout][blackout]] to remove mentions of minor modes from the mode-line as we’re using a quite few of them and don’t want to waste the real estate. Most diminishing is done by the ~:blackout~ parameter to =use-package=.

#+BEGIN_SRC emacs-lisp
(use-package blackout)
#+END_SRC

* Paths

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config (progn (exec-path-from-shell-initialize)
                 (exec-path-from-shell-copy-env "GOPATH")))
#+END_SRC

* Keyboard Shortcuts

We use ~Super~ (in our case: ~CapsLock~) as a menu of sorts:

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'f2-global-map)
(bind-key "<f2>" #'f2-global-map)

(defun malb/set-menu-key (char func)
  (bind-key (concat "s-" char) func)
  (bind-key char func f2-global-map))
#+END_SRC

** Key Chords

Key chords allow to execute actions by pressing one or two keys really fast. Sometimes we might want to use those. However, mostly, we don’t as the slight delay they introduce (to check if a key chord should be executed or the text inserted) is annoying.

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :config (progn
            (setq key-chord-one-key-delay 0.2
                  key-chord-two-keys-delay 0.1)
            (key-chord-mode 1)))
#+END_SRC

*Note:* =key-chord= can slow down typing but it works e.g. in =vterm= buffers which is quite handy.

* Window Management
** Splitting

When splitting windows open the previous buffer in it.

#+BEGIN_SRC  emacs-lisp
(defun malb/vsplit-last-buffer ()
  "Split the window vertically and display the previous buffer."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun malb/hsplit-last-buffer ()
  "Split the window horizontally and display the previous buffer."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'malb/vsplit-last-buffer)
(bind-key "C-x 3" 'malb/hsplit-last-buffer)
#+END_SRC

Don’t split horizontally.

#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 70
      split-height-threshold nil)

(defun malb/split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    ;; DIFF: prefer horizontal split
    (or (and (window-splittable-p window t)
             ;; DIFF: restrict to two windows or two windows + side-window
             (or  (= (length (window-list)) 1)
                  (and (= (length (window-list)) 2)
                       (seq-filter (lambda (x) (< (window-width x) 40)) (window-list))))
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it vertically disregarding
             ;; the value of `split-height-threshold'.
             (let ((split-height-threshold 0))
               (when (window-splittable-p window)
                 (with-selected-window window
                   (split-window-below))))))))

(setq split-window-preferred-function #'malb/split-window-sensibly)
#+END_SRC

Resize windows to accommodate new ones.

#+BEGIN_SRC emacs-lisp
(setq window-combination-resize t)
#+END_SRC

** Restoring Configurations

[[http://www.emacswiki.org/emacs/WinnerMode][Winner mode]] is a global minor mode. When activated, it allows to “undo” (and “redo”) changes in the window configuration.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

[[https://github.com/louiskottmann/zygospore.el][zygospore]] lets you revert =C-x 1= =(delete-other-window)= by pressing =C-x 1= again.

#+BEGIN_SRC emacs-lisp
(use-package zygospore
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)))
#+END_SRC

** Multiple Window Configurations (Eyebrowse)

[[https://github.com/wasamasa/eyebrowse][eyebrowse]] is a simple-minded way of managing window configuration.

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :diminish eyebrowse-mode

  :init (setq eyebrowse-keymap-prefix (kbd "C-c E"))
  :config (progn
            (setq eyebrowse-wrap-around t)
            (eyebrowse-mode t)

            (defun malb/eyebrowse-new-window-config ()
              "make new eyebrowse config, re-using indices 1 - (1)0"
              (interactive)
              (let ((done nil))
                (dotimes (i 10)
                  ;; start at 1 run till 0
                  (let ((j (mod (+ i 1) 10)))
                    (when (and (not done)
                               (not (eyebrowse--window-config-present-p j)))
                      (eyebrowse-switch-to-window-config j)
                      (call-interactively 'eyebrowse-rename-window-config j)
                      (setq done t))))))))
#+END_SRC

** Switching

*** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] for switching windows.

[[http://oremacs.com/download/ace-window.gif]] ([[http://oremacs.com/download/ace-window.gif][source]])

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :commands ace-window
  :bind (("M-o" . ace-window)
         ("C-x o" . ace-window)
         ("C-`"  . malb/ace-window))
  :config (progn
            (setq aw-keys   '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8)
                  aw-dispatch-always nil
                  aw-dispatch-when-more-than 2
                  aw-dispatch-alist
                  '((?x aw-delete-window     "Ace - Delete Window")
                    (?c aw-swap-window       "Ace - Swap Window")
                    (?n aw-flip-window)
                    (?v aw-split-window-vert "Ace - Split Vert Window")
                    (?h aw-split-window-horz "Ace - Split Horz Window")
                    (?g delete-other-windows "Ace - Maximize Window")
                    (?b balance-windows)
                    (?u winner-undo)
                    (?r winner-redo)))
            (add-to-list 'aw-ignored-buffers "*Ilist*")
            (add-to-list 'aw-ignored-buffers "*toc*")
            (add-to-list 'aw-ignored-buffers 'dired-sidebar-mode)
            (defun malb/ace-window (arg)
              (interactive "P")
              (let ((aw-dispatch-when-more-than 3)
                    (aw-scope 'frame))
                (ace-window arg)))))
#+END_SRC

*** Back and Forth

Quickly jump back and forth between buffers ([[http://www.emacswiki.org/emacs/SwitchingBuffers#toc4][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/switch-to-previous-buffer ()
  "Switch to previously open buffer.

Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC

*** Window Numbering

Select windows using [[https://github.com/deb0ch/emacs-winum][window numbers]].

#+BEGIN_SRC emacs-lisp
(use-package winum
  :init (setq winum-keymap
              (let ((map (make-sparse-keymap)))
                (bind-key "M-0" #'winum-select-window-0-or-10 map)
                (bind-key "M-1" #'winum-select-window-1 map)
                (bind-key "M-2" #'winum-select-window-2 map)
                (bind-key "M-3" #'winum-select-window-3 map)
                (bind-key "M-4" #'winum-select-window-4 map)
                (bind-key "M-5" #'winum-select-window-5 map)
                (bind-key "M-6" #'winum-select-window-6 map)
                (bind-key "M-7" #'winum-select-window-7 map)
                (bind-key "M-8" #'winum-select-window-8 map)
                (bind-key "M-9" #'winum-select-window-9 map)
                (bind-key "C-x w" #'winum-select-window-by-number map)
                map))
  :config (progn
            (defun malb/winum-assign ()
              (cond
               ((string-match-p (regexp-quote (buffer-name)) "\\*shell\\[.*\\]\\*") 10)
               ((string-match-p (regexp-quote (buffer-name)) "\\*eshell\\[.*\\]\\*") 10)
               ((string-match-p (regexp-quote (buffer-name)) "\\*Sage\\*") 10)
               ((equal major-mode 'imenu-list-major-mode) 8)
               ((equal major-mode 'dired-sidebar-mode) 8)
               ((equal major-mode 'reftex-toc-mode) 8)
               (t nil)))

            (add-to-list 'winum-assign-functions #'malb/winum-assign)

            (setq winum-scope                       'frame-local
                  winum-reverse-frame-list          nil
                  winum-auto-assign-0-to-minibuffer t
                  winum-auto-setup-mode-line        nil
                  winum-ignored-buffers             '(" *which-key*"))

            (winum-mode)))
#+END_SRC

** Special Windows

Some buffers should behave like pop ups, i.e. display at the bottom with 0.3 height.

#+BEGIN_SRC emacs-lisp
(defvar malb/popup-windows '("\\`\\*compilation\\*\\'"
                             "\\`\\*helm flycheck\\*\\'"
                             "\\`\\*Flycheck errors\\*\\'"
                             "\\`\\*helm projectile\\*\\'"
                             "\\`\\*Helm all the things\\*\\'"
                             "\\`\\*Helm Find Files\\*\\'"
                             "\\`\\*Help\\*\\'"
                             "\\`\\*ielm\\*\\'"
                             "\\`\\*Synonyms List\\*\\'"
                             "\\`\\*anaconda-doc\\*\\'"
                             "\\`\\*Google Translate\\*\\'"
                             "\\` \\*LanguageTool Errors\\* \\'"
                             "\\`\\*Edit footnote .*\\*\\'"
                             "\\`\\*TeX errors*\\*\\'"
                             "\\`\\*mu4e-update*\\*\\'"
                             "\\`\\*prodigy-.*\\*\\'"
                             "\\`\\*Org Export Dispatcher\\*\\'"
                             "\\`\\*Helm Swoop\\*\\'"
                             "\\`\\*Backtrace\\*\\'"
                             "\\`\\*Messages\\*\\'"
                             "\\`\\*Calendar\\*\\'"
                             "\\`\\*mscdb\\*\\'"
                             "\\`\\*lexic\\*\\'"
                             "\\`\\*jupyter-repl\\[.*\\]\\*"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
; (setq display-buffer-alist nil)
(dolist (name malb/popup-windows)
  (add-to-list 'display-buffer-alist
               `(,name
                 (malb/frame-dispatch
                  display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (reusable-frames . visible)
                 (side            . bottom)
                 (window-parameters
                  (no-other-window . t)
                  (no-delete-other-window . t))
                 (window-height   . 0.3))) t)
#+END_SRC

** Closing/Promoting Pop-up-style Windows

In case we just want to kill the bottom window, set a shortcut do to this.

#+BEGIN_SRC emacs-lisp
(defun malb/quit-bottom-disposable-windows ()
  "Quit disposable windows of the current frame."
  (interactive)
  (dolist (window (window-at-side-list))
    (if (<= (window-height window) (/ (frame-height) 3))
        (delete-window window))))

(defun malb/promote-disposable-window-or-to-frame ()
  "Promote disposable window to real window."
  (interactive)
  (if (not (eq major-mode 'vterm-mode))
      (dolist (window (window-at-side-list))
        (let ((buffer (window-buffer window))
              (display-buffer-alist nil))
          (delete-window window)
          (display-buffer buffer)))
    (progn
      (let* ((window (get-buffer-window))
             (buffer (window-buffer window)))
        (delete-window window)
        (switch-to-buffer-other-frame buffer)))))

(key-chord-define-global "qq" #'malb/quit-bottom-disposable-windows)
(key-chord-define-global "qw" #'malb/promote-disposable-window-or-to-frame)
#+END_SRC

** Compilation Window

If there was no error the window closes automatically.

#+BEGIN_SRC emacs-lisp
(defun malb/compilation-exit-autoclose (status code msg)
  ;; If M-x compile exists with a 0
  (when (and (eq status 'exit) (zerop code))
    ;; and delete the *compilation* window
    (let ((compilation-window (get-buffer-window (get-buffer "*compilation*"))))

      (when (and (not (window-at-side-p compilation-window 'top))
                 (window-at-side-p compilation-window 'left)
                 (window-at-side-p compilation-window 'right))
        (delete-window compilation-window))))
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))

(setq compilation-exit-message-function #'malb/compilation-exit-autoclose)
#+END_SRC

If you change the variable ~compilation-scroll-output~ to a ~non-nil~ value, the compilation buffer scrolls automatically to follow the output. If the value is ~first-error~, scrolling stops when the first error appears, leaving point at that error. For any other non-nil value, scrolling continues until there is no more output.

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output 'first-error)
#+END_SRC

** Dispatch Buffers to Frames

Separate mu4e windows from others ([[https://stackoverflow.com/questions/18346785/how-to-intercept-a-file-before-it-opens-and-decide-which-frame/18371427#18371427][source]])

Mu4e buffers start with =*mu4e-=:

#+BEGIN_SRC emacs-lisp
(defvar malb/mu4e-buffer-regexps '("\\`\\*mu4e-.*\\*")
  "Buffer names of mu4e buffers.")
#+END_SRC


#+begin_src emacs-lisp
(defvar malb/special-frame-names '("\\*Minibuf-1\\*.*" ;; helm
                                   "\\*mu4e\\*"
                                   "yequake-scratch"
                                   "F1" ;; daemon
                                   )
  "Special frame names")

(defun malb/frame-is-special-p (frame)
  (seq-some (lambda (name)
              (if (eq (string-match-p name (frame-parameter frame 'name)) 0) t nil))
            malb/special-frame-names))

(defun malb/frame-is-not-special-p (frame)
  (not (malb/frame-is-special-p frame)))

(defun malb/only-frame-p (frame)
  "Return t when the current frame is the only not special frame"
  (and (malb/frame-is-not-special-p frame)
       (< (length (seq-filter 'malb/frame-is-not-special-p (frame-list))) 2)))
#+end_src

But we allow helm buffers in the mu4e frame, e.g. to pick attachments.

#+BEGIN_SRC emacs-lisp
(defvar malb/mu4e-buffer-allowed-regexps (append malb/popup-windows '("\\`\\*helm.*\\*\\'"))
  "Buffer names allowed in mu4e frame.")
#+END_SRC

Get frame by name or return passed frame.

#+BEGIN_SRC emacs-lisp
(defun malb/get-frame (frame)
  "Return a frame, if any, named FRAME (a frame or a string).
If none, return nil.
If FRAME is a frame, it is returned."
  (let ((malb/get-frame-name
         (lambda (&optional frame)
           (unless frame (setq frame (selected-frame)))
           (if (framep frame)
               (cdr (assq 'name (frame-parameters frame)))
             (error "Argument not a frame: `%s'" frame)))))
    (cond ((framep frame) frame)
          ((stringp frame)
           (catch 'get-a-frame-found
             (dolist (fr (frame-list))
               (when (string= frame (funcall malb/get-frame-name fr))
                 (throw 'get-a-frame-found fr)))
             nil))
          (t
           (error "Arg neither a string nor a frame: `%s'" frame)))))
#+END_SRC

Find a frame which isn’t the =mu4e= frame or create a fresh one.

#+BEGIN_SRC emacs-lisp
(defun malb/switch-to-mu4e ()
  (let ((other-frame (catch 'other-frame
                       (dolist (frame (frame-list))
                         (if (string-match "mu4e" (frame-parameter frame 'name))
                             (throw 'other-frame frame)
                           nil)))))
    (if other-frame
        (select-frame-set-input-focus other-frame)
      (malb/mail))))
#+END_SRC

Find a frame not named =mu4e= if there is any, make one otherwise.

#+BEGIN_SRC emacs-lisp
(defun malb/switch-away-from-mu4e ()
  (let ((other-frame (catch 'other-frame
                       (dolist (frame (frame-list))
                         (if (malb/frame-is-not-special-p frame)
                             (throw 'other-frame frame)
                           nil)))))
    (if other-frame
        (select-frame-set-input-focus other-frame)
      (select-frame-set-input-focus  (make-frame)))))
#+END_SRC

Main dispatch function:

#+BEGIN_SRC emacs-lisp
(defun malb/frame-dispatch (buffer alist)
  "Assigning buffers to frames."
  ;; (message (format "dispatching %s" (buffer-name buffer)))
  (cond
   ;; this is a mu4e buffer
   ((or
     (malb/regexp-match-p malb/mu4e-buffer-regexps (buffer-name buffer))
     (memq (buffer-local-value 'major-mode buffer) '(mu4e-view-mode mu4e-headers-mode)))
    (if (malb/get-frame "*mu4e*") (select-frame-set-input-focus (malb/get-frame "*mu4e*"))
      (make-frame (list '(name . "*mu4e*"))))
    (unless (get-buffer-window buffer)
      (set-window-buffer (get-largest-window) buffer))
    (select-window (get-buffer-window buffer))
    t ;; we are done
    )

   ;; this is not a mu4e buffer but we’re in the mu4e frame
   ((and (string-match "mu4e" (frame-parameter nil 'name))
         (not (malb/regexp-match-p malb/mu4e-buffer-regexps (buffer-name buffer)))
         (not (malb/regexp-match-p malb/mu4e-buffer-allowed-regexps (buffer-name buffer))))
    (malb/switch-away-from-mu4e)
    nil ;; pass control back to display-buffer-alist
    )
   ;; just hand back control to diplay-buffer-alist
   (t nil))
  nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist '(".*" (malb/frame-dispatch)) t)
#+END_SRC

Run =old-function= with an empty =display-buffer-alist=

#+BEGIN_SRC emacs-lisp
(defun malb/clean-display-buffer-alist-advice (old-function &rest arguments)
  "Call old-function with an empty display-buffers-alist"
  (let ((display-buffer-alist nil))
    (apply old-function arguments)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/make-frame-advice (old-function &rest arguments)
  (with-selected-frame (make-frame)
    (apply old-function arguments)
    (dedicated-mode)))
#+END_SRC

** Dedicated Mode

([[https://github.com/jwiegley/dot-emacs/blob/master/site-lisp/dedicated.el][source]])

#+BEGIN_SRC emacs-lisp
(defvar dedicated-mode nil
  "Mode variable for dedicated minor mode.")

(make-variable-buffer-local 'dedicated-mode)

(defun dedicated-mode (&optional arg)
  "Dedicated minor mode."
  (interactive "P")
  (setq dedicated-mode (not dedicated-mode))
  (set-window-dedicated-p (selected-window) dedicated-mode)
  (if (not (assq 'dedicated-mode minor-mode-alist))
      (setq minor-mode-alist
	    (cons '(dedicated-mode " D")
		  minor-mode-alist))))
#+END_SRC

** Window Management Hydra

#+BEGIN_SRC emacs-lisp
(defhydra malb/hydra-window ()
  "
^Misc^        ^Split^         ^Buffer^         ^Resize^         ^Eyebrowse^^     ^Center^   ^Jumping^   ^Other^
^----^--------^-----^---------^------^---------^------^---------^---------^^-----^------^---^-------^---^--------------^
_←_ ←         _v_ertical      _H_elm-omni      _q_ X←           _[_ \\/ new      _C_enter   _j_ump      _W_ store cfg
_↓_ ↓         _h_orizontal    _p_revious buf   _w_ X↓           _;_ \\/ ←        _,_ C←     _l_ine      _J_ load cfg
_↑_ ↑         _z_ undo        _n_ext buf       _e_ X↑           _'_ \\/ →        _._ C→     ^^          _I_ imenu
_→_ →         _Z_ reset       _t_oggle buf     _r_ X→           _]_ \\/ close
^^            _d_lt this      _a_ce 1          ^ ^              _!_ \\/ rename
_SPC_ cancel  _D_lt other     _s_wap
^^            _o_nly this
"
  ("<left>" windmove-left  :color blue)
  ("<down>" windmove-down  :color blue)
  ("<up>" windmove-up  :color blue)
  ("<right>" windmove-right  :color blue)
  ("j" avy-goto-char-timer :color blue)
  ("l" avy-goto-line :color blue)
  ("q" shrink-window-horizontally)
  ("w" shrink-window)
  ("e" enlarge-window)
  ("r" enlarge-window-horizontally)
  ("H" malb/helm-omni :color blue)
  ("1" previous-buffer)
  ("2" next-buffer)
  ("p" previous-buffer)
  ("n" next-buffer)
  ("t" malb/switch-to-previous-buffer :color blue)
  ("a" (lambda () (interactive) (ace-window 1)) :color blue)
  ("v" malb/vsplit-last-buffer)
  ("h" malb/hsplit-last-buffer)
  ("s" (lambda () (interactive) (ace-window 4)) :color blue)
  ("d" delete-window)
  ("D" (lambda () (interactive) (ace-window 16)) :color blue)
  ("o" delete-other-windows :color blue)
  ("z" (progn (winner-undo) (setq this-command 'winner-undo)))
  ("Z" winner-redo)
  ("I" imenu-list-smart-toggle :color blue)
  ("[" malb/eyebrowse-new-window-config :color blue)
  (";" (lambda () (interactive) (eyebrowse-prev-window-config nil)) :color red)
  ("'" (lambda () (interactive) (eyebrowse-next-window-config nil)) :color red)
  ("]" eyebrowse-close-window-config :color blue)
  ("!" eyebrowse-rename-window-config :color blue)
  ("C" visual-fill-column-mode)
  ("," (lambda () (interactive) (set-fill-column (+ fill-column 2)) (visual-fill-column-adjust)) :color red)
  ("." (lambda () (interactive) (set-fill-column (- fill-column 2)) (visual-fill-column-adjust)) :color red)
  ("W" window-configuration-to-register)
  ("J" jump-to-register  :color blue)
  ("1" eyebrowse-switch-to-window-config-1 :color blue)
  ("2" eyebrowse-switch-to-window-config-2 :color blue)
  ("3" eyebrowse-switch-to-window-config-3 :color blue)
  ("4" eyebrowse-switch-to-window-config-4 :color blue)
  ("5" eyebrowse-switch-to-window-config-5 :color blue)
  ("6" eyebrowse-switch-to-window-config-6 :color blue)
  ("7" eyebrowse-switch-to-window-config-7 :color blue)
  ("8" eyebrowse-switch-to-window-config-8 :color blue)
  ("9" eyebrowse-switch-to-window-config-9 :color blue)
  ("SPC" nil)
  ("`" other-window :color blue)
  ("C-`" other-window :color blue))

(key-chord-define-global "\\x" #'malb/hydra-window/body)
#+END_SRC

** Next/Previous Buffer

([[https://www.reddit.com/r/emacs/comments/b058f8/weekly_tipstricketc_thread/][source]])

#+begin_src emacs-lisp
(use-package skip-buffers-mode
  :ensure nil
  :blackout skip-buffers-mode
  :config (skip-buffers-mode))
#+end_src

* Jumping Around

[[https://raw.githubusercontent.com/wiki/nloyola/avy/images/avy-goto-char.png]] ([[https://github.com/abo-abo/avy][source]])

See [[http://emacsrocks.com/e10.html][Emacs Rocks #10]] which is on ~ace-jump-mode~ which inspired [[https://github.com/abo-abo/avy][avy]].

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (("C-c C-<SPC>" . avy-goto-char-timer)
         ("C-c j j" . avy-goto-char-timer)
         ("M-g g" . avy-goto-line))
  :config (progn
            (setq avy-background t)))
#+END_SRC

** Links

#+BEGIN_QUOTE
Currently, to jump to a link in an =Info-mode= or =help-mode= or =woman-mode= or =org-mode= or =eww-mode= or =compilation-mode= buffer, you can tab through the links to select the one you want. This is an O(N) operation, where the N is the amount of links. This package turns this into an O(1) operation, or at least O(log(N)) if you manage to squeeze thousands of links in one screen. It does so by assigning a letter to each link using avy. ([[https://github.com/abo-abo/ace-link][source]])
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :config (ace-link-setup-default))
#+END_SRC

** Edit Points

Use [[http://www.emacswiki.org/emacs/GotoChg][goto-chg]] to jump through edit points ([[http://pragmaticemacs.com/emacs/move-through-edit-points/][source]])

#+BEGIN_SRC emacs-lisp
(use-package goto-chg
  :bind (("C-c j ," . goto-last-change)
         ("C-c j ." . goto-last-change-reverse)))
#+END_SRC

*Tip* =C-u 0 C-c j ,= description of the change at a particular stop on your tour

** Visual Bookmarks

([[http://pragmaticemacs.com/emacs/use-visible-bookmarks-to-quickly-jump-around-a-file/][source]])

#+BEGIN_SRC emacs-lisp
(use-package bm
  :bind (("C-c j b ." . bm-next)
         ("C-c j b ," . bm-previous)
         ("C-c j b SPC" . bm-toggle)))
#+END_SRC

* Snippets

** YaSnippet

#+BEGIN_QUOTE
[[https://github.com/capitaomorte/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. ([[https://github.com/capitaomorte/yasnippet][source]])
#+END_QUOTE

Also, see [[http://emacsrocks.com/e06.html][Emacs Rocks #06]] which is on ~yasnippet~.

You can call ~yas-decribe-tables~ to see currently defined snippets, I usually just use [[Helm YaSnippet]].

We disable yasnippet if there are no snippets. ([[https://github.com/joaotavora/yasnippet/issues/669][source]])

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :blackout yas-minor-mode
  :config (progn
            (yas-global-mode)
            (setq yas-verbosity 1)

            (defun malb/disable-yas-if-no-snippets ()
              (when (and yas-minor-mode (null (yas--get-snippet-tables)))
                (yas-minor-mode -1)))

            (add-hook 'yas-minor-mode-hook #'malb/disable-yas-if-no-snippets)

            (defun malb/yas-dir-f-oh ()
              (save-excursion
                (re-search-forward "^# name: \\(.*?\\)$")
                (let  ((fn (match-string 1))
                       (dir (downcase (org-entry-get nil "ITEM"))))
                  (concat user-emacs-directory "snippets/" dir  "/" fn))))))
#+END_SRC

The official yasnippet snippet collection

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)
#+END_SRC

*** Auto YASnippet

#+BEGIN_QUOTE
[[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]] is a hybrid of keyboard macros and yasnippet. You create the snippet on the go, usually to be used just in the one place. It's fast, because you're not leaving the current buffer, and all you do is enter the code you'd enter anyway, just placing ~ where you'd like yasnippet fields and mirrors to be.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
  :bind (("C-c y c" . aya-create)
         ("C-c y e" . aya-expand)))
#+END_SRC

*** Auto Insert

We populate empty files with yasnippet ([[https://github.com/hlissner/.emacs.d/blob/master/core/core-autoinsert.el][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/auto-insert-snippet (key &optional mode)
  "Auto insert a snippet of yasnippet into new file."
  (interactive)
  (let ((is-yasnippet-on (not (cond ((functionp yas-dont-activate-functions)
                                     (funcall yas-dont-activate-functions))
                                    ((consp yas-dont-activate-functions)
                                     (some #'funcall yas-dont-activate-functions))
                                    (yas-dont-activate-functions))))
        (snippet (let ((template (cdar (mapcan #'(lambda (table) (yas--fetch table key))
                                               (yas--get-snippet-tables mode)))))
                   (if template (yas--template-content template) nil))))
    (when (and is-yasnippet-on snippet)
      (yas-expand-snippet snippet))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package autoinsert
  :after yasnippet
  :config (progn
            (setq auto-insert-query nil ; Don't prompt before insertion
                  auto-insert-alist '()) ; Tabula rasa
            (auto-insert-mode 1)))
#+END_SRC

*** Helm YaSnippet

[[https://github.com/emacs-jp/helm-c-yasnippet][helm-c-yasnippet]] for selecting snippets with helm. However, long-form snippets are mostly handled by [[https://github.com/Kungsgeten/yankpad][yankpad]].

#+BEGIN_SRC emacs-lisp
(use-package helm-c-yasnippet
  :after (helm yasnippet)
  :commands (helm-yas-complete)
  :bind (:map yas-minor-mode-map
              ("C-c h y" .  helm-yas-complete))
  :config (progn
            (setq helm-yas-space-match-any-greedy t)))
#+END_SRC

** Yankpad

#+BEGIN_QUOTE
Let’s say that you have text snippets that you want to paste, but that yasnippet or skeleton is a bit too much when you do not need a shortcut/abbrev for your snippet. You like org-mode, so why not write your snippets there? Introducing the yankpad: — ([[https://github.com/Kungsgeten/yankpad/blob/master/README.org][source]])
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package yankpad
  :after (helm yasnippet projectile)
  :init (setq yankpad-file (expand-file-name "yankpad.org" malb/org-files-dir))
  :config (progn
            (bind-key "C-c h Y" #'yankpad-insert yas-minor-mode-map)

            ;; yankpad can slow down helm by insisting on parsing the yankpad file each time, so
            ;; we disable it for helm
            (setq malb/disable-yankpad-major-modes
                  '(helm-major-mode
                    minibuffer-inactive-mode
                    dired-mode
                    dired-sidebar-mode
                    gnus-article-mode
                    mu4e-view-mode))

            (defun malb/disable-yankpad-maybe (old-function &rest args)
              (if (member major-mode malb/disable-yankpad-major-modes)
                  nil
                (apply old-function args)))

            (advice-add 'yankpad-local-category-to-major-mode :around #'malb/disable-yankpad-maybe)))
#+END_SRC

* Auto Completion (Company)

Use [[https://github.com/company-mode/company-mode][company-mode]] for auto-completion.

[[https://company-mode.github.io/images/company-elisp.png]] ([[https://company-mode.github.io/images/company-elisp.png][source]])

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (("M-/" . company-complete))
  :defer nil
  :config (progn
            (setq company-tooltip-limit 20 ; bigger popup window
                  company-idle-delay 0.6   ; delay for popup
                  company-echo-delay 0     ; remove blinking
                  company-show-numbers t   ; show numbers for easy selection
                  company-selection-wrap-around t
                  company-require-match nil
                  company-dabbrev-ignore-case nil
                  company-dabbrev-ignore-invisible t
                  company-dabbrev-other-buffers t
                  company-dabbrev-downcase nil
                  company-dabbrev-code-everywhere t
                  company-tooltip-align-annotations t
                  company-minimum-prefix-length 1
                  company-global-modes '(not) ; company is "always on", except for a few … exceptions
                  company-lighter-base "")

            (global-company-mode 1)

            (bind-key "C-n"   #'company-select-next company-active-map)
            (bind-key "C-p"   #'company-select-previous company-active-map)
            (bind-key "<tab>" #'company-complete company-active-map)
            (bind-key "M-?"   #'company-show-doc-buffer company-active-map)
            (bind-key "M-."   #'company-show-location company-active-map)))
#+END_SRC

#+BEGIN_QUOTE
Company completion backend for [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].

It provides features that are not available by using company-capf + lsp-mode:

- Support trigger characters. For example typing . will trigger completion for TypeScript.
- Use completion item's label as completion labels and replace it with its insertText if available.
- Fetch completion candidates asynchronously (Thanks @sebastiencs).
- Apply text edits specified by completion candidates after completion.
- Do not cache the completion candidates if they are incomplete.
- Expand snippets on completion (requires yasnippet).
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :after (company lsp-mode)
  :config (push 'company-lsp company-backends))
#+END_SRC

Use [[https://github.com/expez/company-quickhelp][company-quickhelp]] to display quick help.

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :config (company-quickhelp-mode 1))
#+END_SRC

** Python

For Python use [[https://github.com/proofit404/company-anaconda][company-anaconda]].

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :config (add-to-list 'company-backends #'company-anaconda))
#+END_SRC

** LaTeX

For \LaTeX use [[https://github.com/alexeyr/company-auctex][company-auctex]]. We also allow unicode symbols via [[https://github.com/vspinu/company-math][company-math]], hence we manage what to add when carefully below.

#+BEGIN_SRC emacs-lisp
(use-package company-math
  :config (progn
            ;; mu4e might disable it for address completion
            (defun malb/enforce-case-sensitive (orig-function &rest arguments)
              (let ((completion-ignore-case nil))
                (apply orig-function arguments)))
            (advice-add #'company-math-symbols-latex :around #'malb/enforce-case-sensitive)
            (advice-add #'company-math-symbols-unicode :around #'malb/enforce-case-sensitive)))

(use-package company-auctex
  :config (progn
            (add-to-list 'company-backends 'company-math-symbols-unicode)
            (add-to-list 'company-backends
                         '(company-math-symbols-latex
                           company-auctex-macros
                           company-auctex-environments))))
#+END_SRC

[[https://github.com/TheBB/company-reftex][company-refex]] is used for \LaTeX labels.

#+BEGIN_SRC emacs-lisp
(use-package company-reftex
   :config (add-to-list 'company-backends #'company-reftex-labels))
#+END_SRC

BibTeX is handled by Helm BibTeX below.

** Shell

Use [[https://github.com/Ambrevar/emacs-fish-completion][fish-completion]] for =pcomplete= which is then used by =company-capf=

#+BEGIN_SRC emacs-lisp
(use-package fish-completion
  :config (progn
            (global-fish-completion-mode)))
#+END_SRC

** Company and YaSnippet Integration

Add YasSippet support for all company backends. ([[https://github.com/syl20bnr/spacemacs/pull/179][source]])

*Note:* Do this at the very end.

#+BEGIN_SRC emacs-lisp
(defvar malb/company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun malb/company-mode/backend-with-yas (backend)
  (if (or (not malb/company-mode/enable-yas)
          (and (listp backend)
               (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(defun malb/activate-yasnippet-completion ()
  (setq company-backends
        (mapcar #'malb/company-mode/backend-with-yas company-backends)))

(add-hook 'emacs-startup-hook #'malb/activate-yasnippet-completion)
#+END_SRC

* Tab DWIM

1. =yas-expand= is run first and does what it has to, then it calls =malb/indent-fold-or-complete=.

2. This function then hopefully does what I want:

   1. if a region is active, just indent
   2. if we’re looking at a space after a non-whitespace character, we try some company-expansion
   3. If =hs-minor-mode= or =outline-minor-mode= is active, try those next
   4. otherwise call whatever would have been called otherwise.

([[http://emacs.stackexchange.com/q/21182/8930][source]], [[http://emacs.stackexchange.com/q/7908/8930][source]])

#+BEGIN_SRC emacs-lisp
(use-package outline-magic)

(defun malb/indent-fold-or-complete (&optional arg)
  (interactive "P")
  (cond
   ;; if a region is active, indent
   ((use-region-p)
    (indent-region (region-beginning)
                   (region-end)))
   ;; if the next char is space or eol, but prev char not whitespace
   ((and (not (active-minibuffer-window))
         (or (looking-at " ")
             (looking-at "$"))
         (looking-back "[^[:space:]]" nil)
         (not (looking-back "^" nil)))

    (cond (company-mode (company-complete-common))
          (auto-complete-mode (auto-complete))))

   ;; no whitespace anywhere
   ((and (not (active-minibuffer-window))
         (looking-at "[^[:space:]]")
         (looking-back "[^[:space:]]" nil)
         (not (looking-back "^" nil)))
    (cond
     ((bound-and-true-p cdlatex-mode)
      (cdlatex-tab))
     ((bound-and-true-p hs-minor-mode)
      (save-excursion (end-of-line) (hs-toggle-hiding)))
     ((bound-and-true-p outline-minor-mode)
      (save-excursion (outline-cycle)))))

   ;; by default just call whatever was bound
   (t
    (let ((fn (or (lookup-key (current-local-map) (kbd "TAB"))
                  'indent-for-tab-command)))
      (if (not (called-interactively-p 'any))
          (fn arg)
        (setq this-command fn)
        (call-interactively fn))))))

(bind-key "<tab>" #'malb/indent-fold-or-complete)
#+END_SRC

Sometimes, you just want to fold.

#+BEGIN_SRC emacs-lisp
(defun malb/toggle-fold ()
  (interactive)
  (cond ((eq major-mode 'org-mode)
         (org-force-cycle-archived))
        ((bound-and-true-p hs-minor-mode)
         (save-excursion
           (end-of-line)
           (hs-toggle-hiding)))

        ((bound-and-true-p outline-minor-mode)
         (save-excursion
           (outline-cycle)))))

(bind-key "C-<tab>" #'malb/toggle-fold)
#+END_SRC

* Helm

[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs.

[[https://tuhdo.github.io/static/helm_projectile.gif]] ([[https://tuhdo.github.io/helm-intro.html][source]])

See [[https://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]] for a nice introduction.

** General, Buffers, Files

Don’t use the vanilla =helm-buffers= command for =C-x C-b= but combine many sources to create =malb/helm-omni.= ([[http://stackoverflow.com/a/19284509][source]])

*Tip:* Use =@foo= to search for content =foo= in buffers when in =helm-omni=. Use =*lisp= to search for buffers in ~lisp-mode~. Use =*!list= to search for buffers not in ~lisp-mode~.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-omni (&rest arg)
  ;; just in case someone decides to pass an argument, helm-omni won't fail.
  (interactive)
  (unless helm-source-buffers-list
    (setq helm-source-buffers-list
          (helm-make-source "Buffers" 'helm-source-buffers)))
  (helm-other-buffer
   (append

    (if (projectile-project-p)
        '(helm-source-projectile-buffers-list
          helm-source-files-in-current-dir
          helm-source-projectile-recentf-list)
      '(helm-source-buffers-list
        helm-source-files-in-current-dir
        helm-source-recentf)) ;; list of all open buffers

    `(((name . "Virtual Workspace")
       (candidates . ,(--map (eyebrowse-format-slot it)
                             (eyebrowse--get 'window-configs)))
       (action . (lambda (candidate)
                   (eyebrowse-switch-to-window-config
                    (string-to-number (car (split-string candidate ":"))))))))

    '(helm-source-bookmarks)

    (when (projectile-project-p)
      '(helm-source-buffers-list
        helm-source-recentf))

    '(helm-source-buffer-not-found) ;; ask to create a buffer otherwise
    )

   "*Helm all the things*"))
#+END_SRC

Use helm for switching buffers, opening files, calling interactive functions.

The default ~C-x c~ is quite close to =C-x C-c=, which quits Emacs. Changed to =C-c h=. We must set =C-c h= globally, because we cannot change =helm-command-prefix-key= once =helm-config= is loaded. ([[https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el][source]])

We also use ~(helm-all-mark-rings)~ to jump around marks (set with =C-SPC C-SPC= et al.).

#+BEGIN_SRC emacs-lisp
(use-package helm
  :blackout helm-mode
  :bind (("M-x"       . helm-M-x)
         ("C-x C-b"   . malb/helm-omni)
         ("C-x b"     . malb/helm-omni)
         ("C-x C-f"   . helm-find-files)
         ("C-c <SPC>" . helm-all-mark-rings)
         ("C-c h"     . helm-command-prefix)

         :map helm-map
         ("<tab>" . helm-execute-persistent-action) ;; rebind tab to do persistent action
         ("C-i"   . helm-execute-persistent-action) ;; make TAB works in terminal
         ("C-z"   . helm-select-action)             ;; list actions using C-z
         ("C-<right>" . helm-next-source)
         ("C-<left>" . helm-previous-source))

  :custom
  (helm-ff-keep-cached-candidates nil) ;; https://issues.guix.gnu.org/43406
  (helm-completion-style 'emacs)
  ;; (helm-external-programs-associations '(("pdf" . "okular")
  ;;                                        ("docx" . "libreoffice")))

  :config (progn
            (require 'helm-config)
            (require 'helm-for-files)
            (require 'helm-bookmark)
            (unbind-key "C-x c")

            (setq helm-adaptive-mode t
                  helm-bookmark-show-location t
                  helm-buffer-max-length 48
                  helm-display-header-line t
                  helm-ff-skip-boring-files t
                  helm-find-files-ignore-thing-at-point t
                  helm-input-idle-delay 0.01
                  helm-bookmark-show-location t
                  helm-window-prefer-horizontal-split t
                  helm-quick-update t
                  helm-split-window-inside-p t
                  helm-truncate-lines nil
                  helm-ff-auto-update-initial-value nil
                  helm-grep-default-command "ag --vimgrep -z %p %f"
                  helm-grep-default-recurse-command "ag --vimgrep -z %p %f"
                  helm-use-frame-when-more-than-two-windows nil

                  helm-display-function #'helm-default-display-buffer
                  helm-display-buffer-reuse-frame t
                  helm-display-buffer-width 180
                  helm-display-buffer-height 60
                  helm-use-undecorated-frame-option nil

                  helm-file-cache-fuzzy-match           t
                  helm-locate-fuzzy-match               nil
                  helm-imenu-fuzzy-match                t
                  helm-recentf-fuzzy-match              nil)

            (when (executable-find "curl")
              (setq helm-net-prefer-curl t))

            (helm-mode t)

            ;; manipulating these lists must happen after helm-mode was called
            (add-to-list 'helm-boring-buffer-regexp-list "\\*CEDET Global\\*")

            (delete "\\.bbl$" helm-boring-file-regexp-list)
            (add-to-list 'helm-boring-file-regexp-list "\\.nav" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.out" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.snm" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.synctex.gz" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.fdb_latexmk" t)
            (add-to-list 'helm-boring-file-regexp-list "\\.fls" t)
            (add-to-list 'helm-boring-file-regexp-list "-blx\\.bib" t)
            (add-to-list 'helm-boring-file-regexp-list "texput\\.log" t)

            ;; see https://github.com/emacs-helm/helm/commit/1de1701c73b15a86e99ab1c5c53bd0e8659d8ede
            (assq-delete-all 'find-file helm-completing-read-handlers-alist)))
#+END_SRC

Actions for attaching files to e-mails and for sending them with [[https://transfer.sh/][transfer.sh]].

#+BEGIN_SRC emacs-lisp
(use-package helm-utils
  :ensure nil
  :after transfer-sh
  :config (progn
            (defun malb/helm-mml-attach-files (_candidate)
              "Attach all selected files"
              (let* ((files (helm-marked-candidates)))
                (mapcar 'mml-attach-file files)))

            (defun malb/helmified-mml-attach-files ()
              (interactive)
              (with-helm-alive-p
                (helm-exit-and-execute-action 'malb/helm-mml-attach-files)))

            (defun malb/helm-transfer-sh-files (_candidate)
              "Transfer.sh all selected files"
              (let* ((files (helm-marked-candidates)))
                (mapcar (lambda (file)
                          (transfer-sh-upload-file-async file (file-name-nondirectory file)))
                        files)))

            (defun malb/helmified-transfer-sh-files ()
              (interactive)
              (with-helm-alive-p
                (helm-exit-and-execute-action 'malb/helm-transfer-sh-files)))))
#+END_SRC

** Helm Ring

=helm-ring= makes the kill ring actually useful, let’s use it.

#+BEGIN_SRC emacs-lisp
(use-package helm-ring
  :ensure nil
  :bind (("M-y" . helm-show-kill-ring)))
#+END_SRC

** Helm Swoop

[[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]] for buffer searching.

[[https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif]] ([[https://github.com/ShingoFukuyama/helm-swoop][source]])

*Tip*: You can edit =helm-swoop= buffers by pressing =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :bind (("C-c o" . helm-multi-swoop-org)
         ("C-s"   . malb/swoop-or-search))
  :config (progn

            (setq malb/helm-swoop-ignore-major-mode
                  '(dired-mode
                    paradox-menu-mode
                    doc-view-mode
                    pdf-view-mode
                    mu4e-headers-mode
                    org-mode
                    Man-mode
                    markdown-mode
                    latex-mode
                    sage-shell-mode
                    inferior-python-mode
                    ein:notebook-multilang-mode
                    imenu-list-major-mode
                    messages-buffer-mode))

            ;; I’m going back and forth what I prefer
            (setq helm-swoop-pre-input-function  #'malb/helm-swoop-pre-fill
                  helm-swoop-split-with-multiple-windows t
                  helm-swoop-speed-or-color t)

            (defun malb/helm-swoop-pre-fill ()
              ;; (thing-at-point 'symbol)
              )

            (defun malb/swoop-or-search ()
              (interactive)
              (if (or (> (buffer-size) 1048576) ;; helm-swoop can be slow on big buffers
                      (memq major-mode malb/helm-swoop-ignore-major-mode))
                  (call-interactively #'isearch-forward)
                (helm-swoop)))

            ;; https://emacs.stackexchange.com/questions/28790/helm-swoop-how-to-make-it-behave-more-like-isearch
            (defun malb/helm-swoop-C-s ()
              (interactive)
              (if (boundp 'helm-swoop-pattern)
                  (if (equal helm-swoop-pattern "")
                      (previous-history-element 1)
                    (helm-next-line))
                (helm-next-line)))

            (bind-key "M-i" #'helm-swoop-from-isearch isearch-mode-map)
            (bind-key "M-i" #'helm-multi-swoop-all-from-helm-swoop helm-swoop-map)
            (bind-key "C-r"   #'helm-previous-line helm-swoop-map)
            (bind-key "C-s"   #'malb/helm-swoop-C-s helm-swoop-map)
            (bind-key "C-r"   #'helm-previous-line helm-multi-swoop-map)
            (bind-key "C-s"   #'malb/helm-swoop-C-s helm-multi-swoop-map)))
#+END_SRC

** Helm Ag

[[http://beyondgrep.com][Ack]] is “a tool like grep, optimized for programmers“. [[https://github.com/ggreer/the_silver_searcher][Ag]] is like =ack=, but faster. [[https://github.com/syohex/emacs-helm-ag][Helm-ag]] is a helm interface to =ag=. We use =helm-ag= mainly via =helm-projectile-ag=, which allows us to =grep= through all project files quickly.

[[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif]] ([[https://raw.githubusercontent.com/syohex/emacs-helm-ag/master/image/helm-do-ag.gif][source]])

*Note:* You can switch to edit mode with =C-c C-e=.

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :commands (helm-ag helm-do-ag malb/helm-ag-projects malb/helm-ag-literature malb/helm-ag)
  :ensure-system-package ((ag . silversearcher-ag:)
                          (rg . ripgrep))
  :config (progn
            (setq helm-ag-base-command "ag --nocolor --nogroup"
                  helm-ag-command-option nil
                  helm-ag-insert-at-point 'symbol
                  helm-ag-fuzzy-match t
                  helm-ag-use-temp-buffer t
                  helm-ag-use-grep-ignore-list t
                  helm-ag-use-agignore t)

            (defun malb/helm-ag (dir)
              "run helm-ag in DIR."
              (let* ((helm-ag-base-command "rg -S --no-heading")
                     (ignored (mapconcat (lambda (i)
                                           (if (string-prefix-p "ag" helm-ag-base-command)
                                               (concat "--ignore " i)
                                             (concat "-g !" i)))
                                         (append grep-find-ignored-files grep-find-ignored-directories)
                                         " "))
                     (helm-ag-base-command (concat helm-ag-base-command " " ignored)))
                (helm-do-ag (file-name-as-directory dir))))

            (defun malb/helm-ag-projects ()
              "run helm-ag in projects directory."
              (interactive)
              (malb/helm-ag malb/projects-dir))

            (defun malb/helm-ag-literature ()
              "run helm-ag in projects directory"
              (interactive)
              (malb/helm-ag (file-name-as-directory (car malb/literature-dirs))))))
#+END_SRC

** Helm Descbinds

#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :bind ("C-h b" . helm-descbinds)
  :init (fset 'describe-bindings 'helm-descbinds))
#+END_SRC

** Helm Locate

#+BEGIN_SRC emacs-lisp
(use-package helm-locate
  :ensure nil
  :after (helm helm-utils)
  :commands helm-locate
  :bind (:map helm-generic-files-map
              ("C-c C-a" . malb/helmified-mml-attach-files)
              ("C-c C-t" . malb/helmified-transfer-sh-files))
  :config (progn
            (setq helm-locate-command
                  (let ((databases (concat
                                    "/var/lib/mlocate/mlocate.db")))
                    (concat "locate -d " databases  " %s -e -A --regex %s")))

            (add-to-list 'helm-commands-using-frame 'helm-locate)

            (helm-add-action-to-source "Attach to E-mail" #'malb/helm-mml-attach-files helm-source-locate)
            (helm-add-action-to-source "Transfer.sh"      #'malb/helm-transfer-sh-files helm-source-locate)))
#+END_SRC

** Helm Org

[[https://github.com/alphapapa/org-ql][org-ql]]

#+begin_src emacs-lisp
(use-package helm-org
  :config (progn
            (setq helm-org-headings-fontify t)

            (defun malb/helm-in-buffer ()
              "The right kind™ of buffer menu."
              (interactive)
              (cond ((eq major-mode 'org-mode)
                     (call-interactively #'helm-org-in-buffer-headings))
                    ((bound-and-true-p lsp-mode)
                     (call-interactively #'helm-lsp-workspace-symbol))
                    (t
                     (call-interactively #'helm-semantic-or-imenu))))

            (add-to-list 'helm-commands-using-frame 'helm-org-in-buffer-headings)
            (add-to-list 'helm-commands-using-frame 'helm-semantic-or-imenu)
            (add-to-list 'helm-commands-using-frame 'helm-org-agenda-files-headings)))
#+end_src

#+begin_src emacs-lisp
(use-package helm-org-ql
  :config (progn
            (defun malb/helm-org-ql-agenda-files (arg)
              (interactive "p")
              (let ((current-prefix-arg nil))
                (cond
                 ((equal arg 4) (call-interactively #'helm-org-ql-agenda-files nil))
                 (t (helm-org-agenda-files-headings)))))


            (add-to-list 'helm-commands-using-frame 'helm-org-ql)
            (add-to-list 'helm-commands-using-frame 'helm-org-ql-agenda-files)))
#+end_src

** Helm & Google

[[./local/helm-googler.el][helm-googler]] for doing [[https://github.com/jarun/googler][googler]] based Google searches.

#+BEGIN_SRC emacs-lisp
(use-package helm-googler
  :ensure nil
  :after helm
  :bind ("C-c h g" . helm-googler))
#+END_SRC

** Helm XRef

[[https://github.com/brotzeit/helm-xref][Helm interface for xref results]]

#+BEGIN_SRC emacs-lisp
(use-package helm-xref)
#+END_SRC

** Helm KDE Desktop Search with Baloo

[[https://community.kde.org/Baloo][Baloo]] is KDE’s desktop search. Below, we implement a tiny helm interface for it.

#+BEGIN_SRC emacs-lisp
(use-package helm-baloo
  :ensure nil
  :ensure-system-package ((baloosearch . baloo-kf5))
  :config (progn
            (add-to-list 'helm-commands-using-frame 'helm-baloo-no-directory)
            (add-to-list 'helm-commands-using-frame 'helm-baloo-in-directory)))
#+END_SRC

** Tips

| *Key Binding* | *Action*                                 |
|---------------+------------------------------------------|
| ~C-c <tab>~   | =helm-copy-to-buffer=                    |
| ~C-u C-c C-k~ | =helm-kill-selection-and-quit=           |
| ~C-w~         | yank thing-at-point/word into minibuffer |

* History
** Recent Files

Don’t include boring or remote stuff in list of recently visited files.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :after helm
  :config  (progn
             (setq recentf-max-saved-items 64
                   recentf-exclude (list "COMMIT_EDITMSG"
                                         "~$"
                                         "/tmp/"
                                         "/ssh:"
                                         "/sudo:"
                                         "/scp:"))
             (cl-loop for ext in helm-boring-file-regexp-list
                   do (add-to-list 'recentf-exclude ext t))))
#+END_SRC

** Saveplace

#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC

** Commands

Make command history persistent ([[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][source]])

#+BEGIN_SRC emacs-lisp
(setq history-length 128
      history-delete-duplicates t
      savehist-save-minibuffer-history t
      savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
(savehist-mode t)
#+END_SRC


** Bookmarks

#+BEGIN_SRC emacs-lisp
(setq bookmark-save-flag 1)
#+END_SRC

* IMenu

Make sure to auto automatically rescan for imenu change.

#+BEGIN_SRC emacs-lisp
(set-default 'imenu-auto-rescan t)
#+END_SRC

[[https://github.com/vspinu/imenu-anywhere][IMenu items for all buffers]] with the same major mode as the current one.

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :config (progn
            (defun malb/imenu-anywhere (arg)
              "Call `helm-imenu-anywhere'

- With no prefix, call with default configuration,
- with one prefix argument, call `helm-imenu-anywhere' on all programming mode buffers regardless of project,
- with two prefix arguments, call `helm-imenu-anywhere' on all buffers."
              (interactive "p")
              (cond
               ((equal arg 4)
                (let ((imenu-anywhere-buffer-filter-functions
                       `((lambda (current other)
                           (let ((parent (buffer-local-value 'major-mode other)))
                             (while (and (not (memq parent '(prog-mode c-mode c++-mode)))
                                         (setq parent (get parent 'derived-mode-parent))))
                             parent)))))
                  (call-interactively #'helm-imenu-anywhere)))

               ((equal arg 16)
                (let ((imenu-anywhere-buffer-filter-functions '((lambda (current other) t))))
                  (call-interactively #'helm-imenu-anywhere)))

               (t (call-interactively #'helm-imenu-anywhere))))
            (add-to-list 'helm-commands-using-frame 'helm-imenu-anywhere)))
#+END_SRC

[[https://github.com/bmag/imenu-list][imenu-list]] can be useful, =C-x t i=

#+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :init (progn
          ;; https://github.com/dsedivec/dot-emacs-d/blob/ddc3fec6a2a884ce4adf730a2eb255dab97834b7/recipes/imenu-list-in-side-buffer.el
          (defun malb/imenu-list-install-display-buffer ()
            "Put imenu-list buffer on a dedicated side window with a preserved size."
            (let* ((side (cl-ecase imenu-list-position
                           (above 'top)
                           (below 'bottom)
                           ((left right) imenu-list-position)))
                   (preserve-dimen (if (memq side '(left right))
                                       'window-width
                                     'window-height)))
              (setf (alist-get (concat "^" (regexp-quote imenu-list-buffer-name) "$")
                               display-buffer-alist nil nil #'equal)
                    `(display-buffer-in-side-window
                      (window-parameters  . ((no-other-window . t)
                                             (no-delete-other-window . t)))
                      (side . ,side)
                      ;; It is not totally clear to me if `imenu-list-size' is
                      ;; supposed to be the window's body height/width or the
                      ;; window's total height/width.  The way we're using it
                      ;; here it is definitely the total, not the body.
                      ;;
                      ;; If it's supposed to be the body height/width then I
                      ;; think it might be best to pass a function as the value
                      ;; for the `window-height'/`window-width' here, and then
                      ;; have the function compute it once the imenu-list window
                      ;; has come into existence.  (See documentation for those
                      ;; alist entries in the docstring for `display-buffer'.)
                      (,preserve-dimen . ,imenu-list-size)
                      (preserve-size . ,(if (eq preserve-dimen 'window-width)
                                            '(t . nil)
                                          '(nil . t)))
                      (dedicated . t))))))
  :custom (imenu-list-idle-update-delay 0.5)
  :config (progn
            (setq imenu-list-position 'left
                  imenu-list-size 0.15
                  imenu-list-auto-resize nil
                  imenu-list-focus-after-activation nil
                  imenu-list-after-jump-hook nil)
            (malb/imenu-list-install-display-buffer)))
#+END_SRC

* Parenthesis

See [[https://ebzzry.github.io/emacs-pairs.html][here]] for an introduction to [[https://github.com/Fuco1/smartparens][smartparens]].

Some of the config below is stolen from hlissner’s [[https://github.com/hlissner/.emacs.d/blob/master/core/core-editor.el][emacs.d]].

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :blackout smartparens-mode
  :config (progn
            (require 'smartparens-config)
            (require 'smartparens-latex)
            (require 'smartparens-html)
            (require 'smartparens-python)

            (smartparens-global-mode t)
            (setq sp-autodelete-wrap t)
            (setq sp-cancel-autoskip-on-backward-movement nil)

            (setq-default sp-autoskip-closing-pair t)

            (bind-key "C-M-f" #'sp-forward-sexp smartparens-mode-map)
            (bind-key "C-M-b" #'sp-backward-sexp smartparens-mode-map)

            (bind-key "C-M-n" #'sp-next-sexp smartparens-mode-map)
            (bind-key "C-M-p" #'sp-previous-sexp smartparens-mode-map)

            (bind-key "C-M-d" 'sp-down-sexp smartparens-mode-map)
            (bind-key "C-M-u" 'sp-backward-up-sexp smartparens-mode-map)

            (bind-key "C-M-a" 'sp-beginning-of-sexp smartparens-mode-map)
            (bind-key "C-M-e" 'sp-end-of-sexp smartparens-mode-map)

            (bind-key "C-M-k" #'sp-kill-sexp smartparens-mode-map)
            (bind-key "C-M-w" #'sp-copy-sexp smartparens-mode-map)

            (bind-key "C-M-t" #'sp-transpose-sexp smartparens-mode-map)

            (bind-key "C-M-s" #'sp-split-sexp smartparens-mode-map)
            (bind-key "C-M-j" #'sp-join-sexp smartparens-mode-map)

            (bind-key "C-<right>" #'sp-forward-slurp-sexp smartparens-mode-map)
            (bind-key "C-<left>" #'sp-forward-barf-sexp smartparens-mode-map)

            (bind-key "M-S-<backspace>" 'sp-backward-unwrap-sexp smartparens-mode-map)
            (bind-key "C-M-<backspace>" 'sp-splice-sexp-killing-backward smartparens-mode-map)
            (bind-key "C-S-<backspace>" 'sp-splice-sexp-killing-around smartparens-mode-map)

            (defun malb/sp-point-is-template-p (id action context)
              (and (sp-in-code-p id action context)
                   (sp-point-after-word-p id action context)))

            (defun malb/sp-point-after-include-p (id action context)
              (and (sp-in-code-p id action context)
                   (save-excursion
                     (goto-char (line-beginning-position))
                     (looking-at-p "[ 	]*#include[^<]+"))))

            (sp-with-modes '(c-mode c++-mode)
              (sp-local-pair "<" ">"    :when '(malb/sp-point-is-template-p malb/sp-point-after-include-p))
              (sp-local-pair "/*" "*/"  :post-handlers '(("||\n[i]" "RET") ("| " "SPC")))
              (sp-local-pair "/**" "*/" :post-handlers '(("||\n[i]" "RET") ("||\n[i]" "SPC")))
              (sp-local-pair "/*!" "*/" :post-handlers '(("||\n[i]" "RET") ("[d-1]< | " "SPC"))))

            (sp-pair "\"" nil)
            (sp-pair "{"  nil :post-handlers '(("||\n[i]" "RET") ("| " " ")) :wrap "C-{")
            (sp-pair "("  nil :post-handlers '(("||\n[i]" "RET") ("| " " ")) :wrap "C-(")
            (sp-pair "["  nil :post-handlers '(("| " " ")))
            (sp-local-pair '(sh-mode markdown-mode python-mode cython-mode) "`" nil)

            ;; https://github.com/Fuco1/smartparens/issues/652#issuecomment-250518705
            (defun malb/latex-replace-dollar (_id action _context)
              (when (eq action 'wrap)
                (sp-get sp-last-wrapped-region
                  (let ((at-beg (= (point) :beg-in)))
                    (save-excursion
                      (goto-char :beg)
                      (delete-char :op-l)
                      (insert "\\("))
                    (save-excursion
                      (goto-char :end-in)
                      (delete-char :cl-l)
                      (insert "\\)"))
                    (setq sp-last-wrapped-region
                          (sp--get-last-wraped-region
                           :beg :end "\\(" "\\)"))
                    (goto-char (if at-beg (1+ :beg-in) :end))))))

            (sp-with-modes
                '(tex-mode plain-tex-mode latex-mode org-mode)
              (sp-local-pair "\\(" "\\)"
                             :unless '(sp-point-before-word-p
                                       sp-point-before-same-p
                                       sp-latex-point-after-backslash)
                             :trigger-wrap "\$"
                             :trigger "\$"
                             )
              (sp-local-pair  "$" "$"
                              :unless '(sp-point-before-word-p
                                        sp-point-before-same-p
                                        sp-latex-point-after-backslash)
                              :post-handlers '(:add malb/latex-replace-dollar))

              (sp-local-pair "\\[" "\\]"
                             :unless '(sp-point-before-word-p
                                       sp-point-before-same-p
                                       sp-latex-point-after-backslash))

              ;; (sp-local-pair "$" nil :actions :rem)
              (sp-local-pair "=" "=" :actions :rem))

            ;; https://github.com/millejoh/emacs-ipython-notebook/issues/172
            (add-to-list 'sp-ignore-modes-list 'ein:notebook-multilang-mode)
            (add-to-list 'sp-ignore-modes-list 'markdown-mode)
            (add-to-list 'sp-ignore-modes-list 'org-mode)
            (add-to-list 'sp-ignore-modes-list 'slack-message-buffer-mode)
            (add-to-list 'sp-ignore-modes-list 'sage-shell-mode)
            (add-to-list 'sp-ignore-modes-list 'jupyter-repl-mode)))
#+END_SRC

Automatically insert [[https://github.com/emacs-berlin/syntactic-close][closing delimiter]]

#+BEGIN_SRC emacs-lisp
(use-package syntactic-close
  :bind ("C-)" . syntactic-close))
#+END_SRC

Use the built-in ~show-paren-mode~ to highlight matching parentheses.

#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0.2)
(show-paren-mode 1)
#+END_SRC

* Editing
** Dragging Lines Around

([[https://github.com/rejeep/drag-stuff.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :blackout drag-stuff-mode
  :config (progn
            (defhydra malb/hydra-drag-stuff (:color red)
              "drag stuff"
              ("<up>" drag-stuff-up "↑")
              ("<down>" drag-stuff-down "↓")
              ("SPC" nil)
              ("q" nil))
            (bind-key "C-c d" #'malb/hydra-drag-stuff/body)))
#+END_SRC

** Reverting Buffers

Automatically revert buffers.

#+BEGIN_SRC emacs-lisp
(setq global-auto-revert-non-file-buffers t
      global-auto-revert-ignore-modes '(pdf-view-mode)
      auto-revert-verbose nil)

(global-auto-revert-mode 1)
#+END_SRC

** Save Buffer when Loosing Focus

[[https://github.com/Vifon/focus-autosave-mode.el][Automatically loosing focus]] can be dangerous, so only enable on per project basis, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((markdown-mode . ((eval . (focus-autosave-local-mode 1)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package focus-autosave-mode
  :blackout (focus-autosave-local-mode . " "))
#+END_SRC

** Regexp

Use [[https://github.com/benma/visual-regexp.el][visual-regexp]] for visual regular expressions and use [[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] for modern regexps. This makes Emacs regexp actually usable for me.

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :bind (("C-c m" . vr/mc-mark)
         ("M-%" . vr/query-replace)
         ("C-%" . query-replace)
         ("C-S-s" . vr/isearch-forward)
         ("C-S-r" . vr/isearch-backward)))

(use-package pcre2el)

(use-package visual-regexp-steroids
  :config (setq vr/engine 'pcre2el))
#+END_SRC

Sometimes visual-regexp bombs out, so we have a function to reset it:

#+BEGIN_SRC emacs-lisp
(defun malb/reset-visual-regexp ()
  (interactive)
  (unload-feature 'visual-regexp t)
  (unload-feature 'visual-regexp-steroids t)
  (require 'visual-regexp)
  (require 'visual-regexp-steroids))
#+END_SRC

** Undo

#+BEGIN_SRC emacs-lisp
(use-package undo-fu
  :bind (("C-_" . undo-fu-only-undo)
         ("M-_" . undo-fu-only-redo)))
#+END_SRC


** Multiple Cursors

[[https://github.com/magnars/multiple-cursors.el][Multiple cursors]] are awesome.

[[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif]] ([[http://i0.wp.com/pragmaticemacs.com/wp-content/uploads/2015/06/wpid-emacs-mc2.gif?zoom=2&w=620][source]])

Also see [[http://emacsrocks.com/e13.html][Emacs Rocks #13]], which is on ~multiple-cursors~.

([[http://endlessparentheses.com/multiple-cursors-keybinds.html?source=rss][keybinding source]])

Commands are bound to =C-x m …=

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config (progn
            (defun malb/mc-typo-mode ()
              (add-to-list 'mc/unsupported-minor-modes 'typo-mode))
            (add-hook 'multiple-cursors-mode-hook #'malb/mc-typo-mode)

            (defhydra malb/hydra-multiple-cursors (:hint nil)
              "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
              ("l" mc/edit-lines :exit t)
              ("a" mc/mark-all-like-this :exit t)
              ("n" mc/mark-next-like-this)
              ("N" mc/skip-to-next-like-this)
              ("M-n" mc/unmark-next-like-this)
              ("p" mc/mark-previous-like-this)
              ("P" mc/skip-to-previous-like-this)
              ("M-p" mc/unmark-previous-like-this)
              ("s" mc/mark-all-in-region-regexp :exit t)
              ("0" mc/insert-numbers :exit t)
              ("A" mc/insert-letters :exit t)
              ("<mouse-1>" mc/add-cursor-on-click)
              ;; Help with click recognition in this hydra
              ("<down-mouse-1>" ignore)
              ("<drag-mouse-1>" ignore)
              ("q" nil))

            (bind-key "C-x m" #'malb/hydra-multiple-cursors/body)))
#+END_SRC

** Recursively Narrow

#+BEGIN_SRC emacs-lisp
(use-package recursive-narrow
  :config (progn
            (defun malb/recursive-narrow-dwim-org ()
              (if (derived-mode-p 'org-mode)
                  (cond ((or (org-at-block-p) (org-in-src-block-p)) (org-narrow-to-block))
                        (t (org-narrow-to-subtree))))
              )
            (add-hook 'recursive-narrow-dwim-functions 'malb/recursive-narrow-dwim-org))
  :bind (("C-x n w" . recursive-widen)
         ("C-x n n" . recursive-narrow-or-widen-dwim)))
#+END_SRC

** Expand Region

See [[http://emacsrocks.com/e09.html][Emacs Rocks #9]] for an intro to [[https://github.com/magnars/expand-region.el][expand-region]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :after (org)
  :bind ("C-\\" . er/expand-region)
  :init (setq expand-region-fast-keys-enabled nil))
#+END_SRC

Alternatively, consider

1. ~M-@~ marks a word
2. ~M-h~ marks a paragraph
3. ~C-M-@~ marks a balanced expression or s-expression
4. ~C-M-h~ marks a defun (top-level-definition)
5. ~C-x h~ marks the whole buffer

** Embrace

[[https://raw.githubusercontent.com/cute-jumper/embrace.el/master/screencasts/embrace.gif]]

https://github.com/cute-jumper/embrace.el

#+BEGIN_SRC emacs-lisp
(use-package embrace
  :config (progn

            (defun malb/embrace-latex-mode-hook ()
              (embrace-add-pair ?\( "\\(" "\\)")
              (embrace-add-pair ?\[ "\\[" "\\]")
              (embrace-add-pair ?\) "(" ")")
              (embrace-add-pair ?\] "[" "]")
              (embrace-add-pair ?$  "$" "$")
              (embrace-add-pair ?£  "$$" "$$"))

            (bind-key "M-\\" #'embrace-commander)
            (add-hook 'org-mode-hook #'embrace-org-mode-hook)
            (add-hook 'LaTeX-mode-hook #'malb/embrace-latex-mode-hook)
            (add-hook 'org-mode-hook #'malb/embrace-latex-mode-hook)))
#+END_SRC

** Wrap Region

[[https://github.com/rejeep/wrap-region.el][Wrap Region]] is a minor mode for Emacs that wraps a region with punctuations. For "tagged" markup modes, such as HTML and XML, it wraps with tags.

([[http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/][source]])

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :blackout wrap-region-mode
  :config (wrap-region-add-wrappers
           '(("*" "*" nil org-mode)
             ("~" "~" nil org-mode)
             ("/" "/" nil org-mode)
             ("=" "=" nil org-mode)
             ("_" "_" nil org-mode)
             ("$" "$" nil org-mode)
             ("#+begin_quote\n" "#+end_quote\n" "q" org-mode)
             ("#+begin_src \n" "\n#+end_src" "s" org-mode)
             ("#+begin_src \n" "\n#+end_src" "s" org-mode)
             ("#+begin_center \n" "\n#+end_center" "c" org-mode)
             ))
  (add-hook 'org-mode-hook 'wrap-region-mode))
#+END_SRC

** Folding

#+BEGIN_SRC emacs-lisp
(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))
#+END_SRC

** Beginning of …

A better ~C-a~. ([[http://www.wilfred.me.uk/.emacs.d/init.html][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/beginning-of-line-dwim ()
  "Toggles between moving point to the first non-whitespace character, and
  the start of the line."
  (interactive)
  (let ((start-position (point)))
    ;; Move to the first non-whitespace character.
    (back-to-indentation)

    ;; If we haven't moved position, go to start of the line.
    (when (= (point) start-position)
      (move-beginning-of-line nil))))

(bind-key "C-a" #'malb/beginning-of-line-dwim)
(bind-key "<home>"  #'malb/beginning-of-line-dwim lisp-mode-map)
#+END_SRC

Redefine =M-<= and =M->=. The real beginning and end of buffers (i.e., =point-min= and =point-max=) are still accessible by pressing the same key again. ([[https://github.com/DamienCassou/beginend][source]])

#+BEGIN_SRC emacs-lisp
(use-package beginend
  :blackout beginend-global-mode
  :config (progn
            (beginend-global-mode)
            (dolist (mode beginend-modes)
              (blackout (cdr mode)))))
#+END_SRC

** Pulse Kills and Yanks

#+begin_quote
[[https://github.com/minad/goggles][Goggles]] highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported.
#+end_quote

#+begin_src emacs-lisp
(use-package goggles
  :demand t
  :config
  (goggles-mode)
  (setq-default goggles-pulse t))
#+end_src

* Help
** Helpful

#+BEGIN_QUOTE
Helpful is an alternative to the built-in Emacs help that provides much more contextual information. — [[https://github.com/Wilfred/helpful][helpful]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :config (progn
            (bind-key "C-h f" #'helpful-callable)
            (bind-key "C-h v" #'helpful-variable)
            (bind-key "C-h k" #'helpful-key)
            (bind-key "C-h ," #'helpful-at-point)))
#+END_SRC

** Refine

#+BEGIN_QUOTE
Refine provides a convenient UI for editing variables. Refine is not for editing files, but for changing elisp variables, particularly lists. — [[https://github.com/Wilfred/refine][refine]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package refine)
#+END_SRC

* Projects (Projectile)

#+BEGIN_QUOTE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. […]

This library provides easy project management and navigation. The concept of a project is pretty basic – just a folder containing special file. Currently git, mercurial, darcs and bazaar repos are considered projects by default. So are lein, maven, sbt, scons, rebar and bundler projects. If you want to mark a folder manually as a project just create an empty =.projectile= file in it. Some of Projectile's features:

- jump to a file in project
- jump to files at point in project
- jump to a directory in project
- jump to a file in a directory
- jump to a project buffer
- jump to a test in project
- toggle between files with same names but different extensions (e.g. =.h= <-> =.c/.cpp=, =Gemfile= <-> =Gemfile.lock=)
- toggle between code and its test (e.g. =main.service.js= <-> =main.service.spec.js=)
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- =multi-occur= in project buffers
- grep in project
- regenerate project =etags= or =gtags= (requires =ggtags=).
- visit project in =dired=
- run make in a project with a single key chord
#+END_QUOTE

[[https://raw.githubusercontent.com/bbatsov/projectile/master/screenshots/projectile.png]] ([[https://github.com/bbatsov/projectile/blob/master/screenshots/projectile.png][source]])

*Commands:*

- =C-c p D=   ~projectile-dired~
- =C-c p F=   ~helm-projectile-find-file-in-known-projects~
- =C-c p P=   ~projectile-test-project~
- =C-c p S=   ~projectile-save-project-buffers~
- =C-c p b=   ~helm-projectile-switch-to-buffer~
- =C-c p f=   ~helm-projectile-find-file~
- =C-c p g=   ~helm-projectile-find-file-dwim~
- =C-c p h=   ~helm-projectile~
- =C-c p p=   ~helm-projectile-switch-project~
- =C-c p r=   ~projectile-replace~
- =C-c p s s= ~helm-projectile-ag~
- =C-c p x=   ~projectile-run-term~ etc.

*When switching projects:*

- ~C-d~ open Dired in project's directory
- ~M-g~ open project root in vc-dir or magit
- ~M-e~ switch to Eshell: Open a project in Eshell.
- ~C-s~ grep in projects (add prefix C-u to recursive grep)
- ~C-c~ Compile project: Run a compile command at the project root.
- ~M-D~ Remove project(s): Delete marked projects from the list of known projects.
- ~C-c @~ insert the current file that highlight bar is on as an org link.

*Note*: =next-error= has nothing to do with projectile, but =<f5>= and =<f6>= kind of go together. ~previous-error~ is bound to =M-g p=.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind (("<f5>" . projectile-compile-project)
         ("<f6>" . next-error)
         :map projectile-command-map
         ("I" . #'malb/projectile-ipython))
  :init  (setq projectile-keymap-prefix (kbd "C-c p"))
  :config (progn
            (use-package magit :ensure t)
            (require 'helm-projectile)
            (helm-projectile-on)

            (setq projectile-indexing-method 'hybrid)
            (defun malb/projectile-ignore-projects (project-root)
              (progn
                (or (file-remote-p project-root)
                    ;; don't litter project list with cryptobib subprojects
                    (and  (string-match (rx-to-string `(: "cryptobib/" eos) t)
                                        project-root) t)
                    (and  (string-match (rx-to-string `(: bos "/tmp/" ) t)
                                        project-root) t))))

            (setq projectile-make-test-cmd "make check"
                  projectile-ignored-projects malb/projectile-ignored-projects
                  projectile-ignored-project-function #'malb/projectile-ignore-projects
                  projectile-globally-unignored-files '(".dir-locals.el")
                  projectile-mode-line '(:eval (format "{%s}" (projectile-project-name))))

            (projectile-mode)))
#+END_SRC

[[https://tuhdo.github.io/helm-projectile.html][Helm]] integration

*Commands:*

- =C-c p h= for =helm-projectile= which combines buffer, file and project switching
- =C-c p F= for =helm-projectile-find-file-in-known-projects=

We add a “Create file“ action ([[https://www.reddit.com/r/emacs/comments/3m8i5r/helmprojectile_quickly_findcreate_new_file_in/][source]]) and replace =grep= by =ag=.

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :config (progn
            (defvar malb/helm-source-file-not-found
              (helm-build-dummy-source
                  "Create file"
                :action 'find-file))

            (add-to-list 'helm-projectile-sources-list malb/helm-source-file-not-found t)

            (setq projectile-switch-project-action 'helm-projectile)

            ;; (helm-delete-action-from-source "Grep in projects `C-s'" helm-source-projectile-projects)
            ;; (helm-delete-action-from-source "Grep in projects `C-s'" helm-source-projectile-dirty-projects)
            ;; (helm-add-action-to-source "Grep in projects `C-s'" 'helm-do-ag helm-source-projectile-projects 4)
            ;; (helm-add-action-to-source "Grep in projects `C-s'" 'helm-do-ag helm-source-projectile-dirty-projects 4)
            ))
#+END_SRC

* Git
** Magit

[[http://magit.vc][Magit]] is a very nice Git interface.

[[https://magit.vc/screenshots/status.png]] ([[http://magit.vc][source]])


#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status
             magit-diff
             magit-commit
             magit-log
             magit-push
             magit-stage-file
             magit-unstage-file)
  :bind (("S-<f7>" . magit-status)
         ("<f7>" . magit-dispatch))
  :config (progn

            ;; source: https://www.reddit.com/r/emacs/comments/ayjgpu/magit_orgmode_unfold_containing_headlines_when/
            (defun malb/expand-org-mode-entry ()
              "When opening an org-mode file, show the current entry and all headings that it is contained in."
              ;; invoke org-reveal with a single prefix arg, as that expands ;; the entry containing
              ;; (point), all sibling entries and all ;; parent entries and their siblings.
              (when (derived-mode-p 'org-mode)
                (org-reveal '(4))))

            (add-hook 'magit-diff-visit-file-hook #'malb/expand-org-mode-entry)

            (setq magit-push-always-verify nil
                  magit-last-seen-setup-instructions "2.1.0"
                  magit-define-global-key-bindings t)

            (setq-default magit-diff-refine-hunk t)))
#+END_SRC

*Notes*

- try =git config status.showUntrackedFiles all= ([[https://emacs.stackexchange.com/questions/13729/choose-files-to-stage-of-a-new-directory-with-magit][source]])

*** Magit SVN

We enable [[https://github.com/magit/magit-svn][magit-svn]] whenever necessary.

#+BEGIN_SRC emacs-lisp
(use-package magit-svn
  :after magit
  :config (progn
            (defun malb/magit-svn ()
              (if (file-exists-p (magit-git-dir "svn"))
                  (magit-svn-mode)))
            (add-hook 'magit-mode-hook #'malb/magit-svn)))
#+END_SRC

*** GitHub


#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit
  :config (setq ghub-use-workaround-for-emacs-bug 'force))
#+END_SRC

*** Org Links for Magit Buffers

[[https://github.com/magit/orgit][orgit]]

#+BEGIN_SRC emacs-lisp
(use-package orgit)
#+END_SRC

[[https://github.com/magit/orgit-forge/][orgit-forge]]

#+BEGIN_SRC emacs-lisp
(use-package orgit-forge)
#+END_SRC

** Git Timemachine

I don’t often use [[https://github.com/pidu/git-timemachine#start-of-content][git-timemachine]] but when I do …

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC

** Git Link

[[https://github.com/sshaw/git-link][git-link]]:

#+BEGIN_QUOTE
functions that create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories. =git-link= returns the URL for the current buffer's file location at the current line number or active region. =git-link-commit= returns the URL for a commit. URLs are added to the kill ring.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package git-link)
#+END_SRC

** Git Autocommit

[[https://github.com/ryuslash/git-auto-commit-mode][git-auto-commit-mode]] for committing … automatically.

#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode)
#+END_SRC

** [#B] Gitignore

Generate gitignore files

#+BEGIN_SRC emacs-lisp
(use-package helm-gitignore
  :defer t)
#+END_SRC

* Org-mode all the things!

See [[http://orgmode.org/guide/Introduction.html][here]] for an introduction to [[http://orgmode.org/][org-mode]].

*Note:* Ideally, we’d want to put all org-mode stuff into one big =:config= blog, but that makes it harder to read/explain.

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda))
  :mode ("\\.org$" . org-mode)
  :blackout (orgstruct-mode orgtbl-mode)
  :config (progn
            (unbind-key "C-c [" org-mode-map)
            (bind-key "M-/"   #'company-complete-common org-mode-map)))
#+END_SRC

** Files

#+BEGIN_SRC emacs-lisp
(setq org-directory malb/org-files-dir
      org-agenda-files malb/org-files
      org-default-notes-file malb/inbox-org)
#+END_SRC

** Options

#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies nil   ; enforce todo dependencies
      org-habit-graph-column 117
      org-use-speed-commands t
      org-catch-invisible-edits 'show-and-error
      org-adapt-indentation nil         ; Non-nil means adapt indentation to outline node level.
      org-tags-column -120
      org-startup-folded 'fold
      org-log-into-drawer t
      org-log-done t
      org-return-follows-link nil       ; don’t follow links by pressing ENTER
      org-clock-persist 'history
      org-special-ctrl-a/e t               ; begin/end of line to skip starts …
      org-special-ctrl-k t                 ; special keys for killing a headline
      org-edit-src-content-indentation 0   ; don't indent source code
      org-src-preserve-indentation t       ; preserve indentation in code
      org-src-window-setup 'current-window ; when hitting C-c '
      org-reverse-note-order t
      org-footnote-auto-adjust t          ; renumber footnotes automagically
      org-confirm-elisp-link-function nil ;
      org-hidden-keywords nil
      org-list-demote-modify-bullet  '(("+" . "-") ("-" . "+") ("*" . "+"))
      org-list-allow-alphabetical t
      org-outline-path-complete-in-steps nil
      org-M-RET-may-split-line '((default . t) (headline . nil))
      org-blank-before-new-entry (quote ((heading . auto)
                                         (plain-list-item . nil)))
      org-yank-adjusted-subtrees nil
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-show-context-detail '((agenda . lineage) ;; instead of "local"
                                (bookmark-jump . lineage)
                                (isearch . lineage)
                                (default . ancestors))
      org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-agenda-mode-hook (lambda () (toggle-truncate-lines 1)))
(add-hook 'org-agenda-mode-hook (lambda ()
                                  (setq-local imenu-generic-expression
                                              '((nil "^\\([a-zA-Z]+ +[0-9]+ [a-zA-Z]+ 20[0-9][0-9]\\)$" 1)))))

(bind-key "<home>" #'org-beginning-of-line org-mode-map)
(bind-key "<end>" #'org-end-of-line org-mode-map)
(bind-key "C-c C-." #'org-time-stamp org-mode-map) ; ede binds C-c . too
(bind-key "C-c C-," #'org-time-stamp-inactive org-mode-map) ; fylcheck binds C-c !
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
(setq org-agenda-tags-column -127
      org-agenda-include-diary nil
      org-agenda-dim-blocked-tasks t
      org-agenda-default-appointment-duration 60
      org-agenda-skip-additional-timestamps-same-entry nil
      org-agenda-skip-timestamp-if-deadline-is-shown t
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-agenda-ignore-properties '(effort appt category)
      org-agenda-window-setup 'current-window  ; Current window gets agenda
      org-agenda-sticky t                      ; Use sticky agenda's so they persist
      org-agenda-compact-blocks t              ; Compact the block agenda view
      org-agenda-span 14                       ; span 14 days of agenda
      org-agenda-start-on-weekday 1            ; start on Monday
      )

(add-hook 'org-agenda-finalize-hook 'hl-line-mode)
#+END_SRC

** Look

#+BEGIN_SRC emacs-lisp
(setq org-hide-mphasis-markers nil      ; don’t hide markers for like *foo*
      ;; org-ellipsis " ••• "
      org-ellipsis " ▼ "
      org-highlight-latex-and-related nil
      org-src-fontify-natively t        ; fontify code blocks
      org-startup-with-inline-images t  ; show images when opening a file.
      org-startup-with-latex-preview nil
      org-preview-latex-default-process 'imagemagick
      org-pretty-entities nil
      org-image-actual-width '(800))
#+END_SRC

** ToDo Keywords & Scheduling

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)"
                  "WAIT(w@)"
                  "PING(p)"
                  "DELEGATED(e@/!)"
                  "|"
                  "DONE(d)"
                  "CANCELLED(c@/!)") ;;generic

        (sequence "EXPLORE(x)"
                  "DRAFT"
                  "COAUTHOR(@/!)"
                  "EDIT(!)"
                  "SUBMITTED(@/!)"
                  "REBUT"
                  "FINAL"
                  "|"
                  "PUBLISHED(!)"
                  "ONHOLD(h@/!)"
                  "STALLED(s)") ;; papers

        (sequence "REVIEW(v)"
                  "INFO(i@/!)"
                  "|"
                  "DONE(!)") ;; reviews

        (type "BLOG(b)"
              "READ(r)"
              "REPLY(R)"
              "CALL"
              "MAIL"
              "LOAD"
              "PAY(P)"
              "BOOK(B)"
              "|" "DONE")))

(org-clock-persistence-insinuate)
#+END_SRC

delete SCHEDULED if new state is a WAITing state

#+BEGIN_SRC emacs-lisp
(defun malb/org-after-todo-state-change ()
  (when (or
         (string-equal org-state "WAIT")
         (string-equal org-state "COAUTHOR")
         (string-equal org-state "DELEGATED")
         (string-equal org-state "SUBMITTED"))
    (progn
      (org-remove-timestamp-with-keyword org-scheduled-string)
      (when (not (org-get-deadline-time (point)))
        (org-deadline nil (org-read-date nil t "+7d"))))))

(add-hook 'org-after-todo-state-change-hook 'malb/org-after-todo-state-change)
#+END_SRC

** Tags

#+BEGIN_SRC emacs-lisp
(setq org-tag-persistent-alist '((:startgroup . nil)
                                 ("@office" . ?o)
                                 ("@train" . ?t)
                                 ("@home" . ?h)
                                 (:endgroup . nil)
                                 ("quick" . ?q)
                                 ("noexport" . ?n)
                                 ("ignore" . ?i)))
#+END_SRC

** Tables

Bind =org-table-*= command when the point is in an org table ([[http://emacs.stackexchange.com/a/22457/115][source]]).

#+BEGIN_SRC emacs-lisp
(bind-keys
 :map org-mode-map
 :filter (org-at-table-p)
 ("C-c ?" . org-table-field-info)
 ("C-c SPC" . org-table-blank-field)
 ("C-c +" . org-table-sum)
 ("C-c =" . org-table-eval-formula)
 ("C-c `" . org-table-edit-field)
 ("C-#" . org-table-rotate-recalc-marks)
 ("C-c }" . org-table-toggle-coordinate-overlays)
 ("C-c {" . org-table-toggle-formula-debugger))
#+END_SRC

** Speed Commands

([[https://raw.githubusercontent.com/jkitchin/scimax/][source]])

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree)) ;; Mark a subtree
(add-to-list 'org-speed-commands-user (cons "S" 'widen)) ;; Widen
(add-to-list 'org-speed-commands-user (cons "k" (lambda () ;; kill a subtree
                                                  (org-mark-subtree)
                                                  (kill-region
                                                   (region-beginning)
                                                   (region-end)))))
(add-to-list 'org-speed-commands-user (cons "J" 'avy-org-goto-heading-timer))
#+END_SRC

#+BEGIN_QUOTE
If you prefer using previous patterns, e.g. <s, you can activate them again by requiring Org Tempo library: ~(require 'org-tempo)~
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org-tempo
  :ensure org)
#+END_SRC

** Refiling

Targets include this file and any file contributing to the agenda - up to 9 levels deep

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))))
#+END_SRC

Stop using paths for refile targets - we file directly with helm

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
#+END_SRC

Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes '(confirm))
#+END_SRC

** Spell Checking

#+BEGIN_SRC emacs-lisp
;; source http://endlessparentheses.com/ispell-and-org-mode.html
(defun malb/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_QUOTE" . "#\\+END_QUOTE")))

(add-hook 'org-mode-hook #'malb/org-ispell)
(add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC

** Diminish Minor Modes

#+BEGIN_SRC emacs-lisp
(use-package org-indent
  :ensure nil
  :blackout)
#+END_SRC

** Archiving

Archive with some order in target file preserved. ([[https://gist.github.com/edgimar/072d99d8650abe81a9fe7c8687c0c993][source]])

#+BEGIN_SRC emacs-lisp
(defadvice org-archive-subtree (around fix-hierarchy activate)
  (let* ((fix-archive-p (and (not current-prefix-arg)
                             (not (use-region-p))))
         (afile  (car (org-archive--compute-location
		               (or (org-entry-get nil "ARCHIVE" 'inherit) org-archive-location))))
         (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
    ad-do-it
    (when fix-archive-p
      (with-current-buffer buffer
        (goto-char (point-max))
        (while (org-up-heading-safe))
        (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
               (path (and olpath (split-string olpath "/")))
               (level 1)
               tree-text)
          (when olpath
            (org-mark-subtree)
            (setq tree-text (buffer-substring (region-beginning) (region-end)))
            (let (this-command) (org-cut-subtree))
            (goto-char (point-min))
            (save-restriction
              (widen)
              (-each path
                (lambda (heading)
                  (if (re-search-forward
                       (rx-to-string
                        `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                      (org-narrow-to-subtree)
                    (goto-char (point-max))
                    (unless (looking-at "^")
                      (insert "\n"))
                    (insert (make-string level ?*)
                            " "
                            heading
                            "\n"))
                  (cl-incf level)))
              (widen)
              (org-end-of-subtree t t)
              (org-paste-subtree level tree-text))))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-archive-location "~/Documents/Archive/org-files/%s_archive::")
#+END_SRC

** Habit

#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :ensure nil
  :config (add-to-list 'org-modules 'org-habit))
#+END_SRC

** Protocol

#+BEGIN_SRC emacs-lisp
(use-package org-protocol
  :ensure nil)
#+END_SRC

** Bullets

Prettier [[https://github.com/integral-dw/org-superstar-mode/][bullets]] in org-mode.

[[https://raw.githubusercontent.com/integral-dw/org-superstar-mode/master/sample_image.png]]

#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :commands org-superstar-mode
  :init  (progn

           (defun malb/enable-org-bullets ()
             (org-superstar-mode 1))

           (add-hook 'org-mode-hook #'malb/enable-org-bullets)
           (setq org-superstar-headline-bullets-list '("●" "▲" "■" "◉" "✶" "○" "○")
                 org-superstar-prettify-item-bullets nil)))
#+END_SRC

** Export

UTF-8 everywhere.

#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8
      org-export-in-background nil
      org-export-use-babel t
      org-export-with-toc nil
      org-export-with-timestamps 'active
      org-latex-pdf-process '("latexmk -g -pdf -pdflatex=\"%latex --shell-escape -halt-on-error\" -outdir=%o %f")
      org-export-async-init-file (expand-file-name "org-export-init.el" user-emacs-directory))
#+END_SRC

([[https://lists.gnu.org/archive/html/emacs-orgmode/2016-12/msg00555.html][source]])

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-babel-default-header-args '(:eval . "never-export"))
(add-to-list 'org-babel-default-inline-header-args '(:eval . "never-export"))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(setq org-latex-to-mathml-convert-command "java -jar %j -unicode -force -df %o %I"
      org-latex-to-mathml-jar-file (expand-file-name "mathtoweb.jar" user-emacs-directory))
#+END_SRC

*** iCalendar

iCal export is triggered after 600 seconds of inactivity.

*Note*: this code is definitely from somewhere else. I don’t remember where, though.

#+BEGIN_SRC emacs-lisp
(use-package ox-icalendar
  :ensure nil
  :config (progn
            (setq org-icalendar-include-todo t
                  org-icalendar-combined-agenda-file malb/org-mode-ics
                  org-icalendar-categories '(category)
                  org-icalendar-use-scheduled '(todo-start event-if-not-todo)
                  org-icalendar-use-deadline '(todo-due)
                  org-icalendar-with-timestamps 'active)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar malb/org-icalendar-export-timer nil
  "Timer that `malb/org-icalendar-export-timer' uses to reschedule itself, or nil.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/org-icalendar-export-with-delay (secs)
  "Export after `secs' seconds unless the file changed in the meantime."
  (when malb/org-icalendar-export-timer
    (cancel-timer malb/org-icalendar-export-timer))
  (setq malb/org-icalendar-export-timer
        (run-with-idle-timer
         (* 1 secs) nil (lambda ()
                          ;; async, check org-export-init.el
                          (org-icalendar-combine-agenda-files t)
                          (org-agenda-redo)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/ox-export-after-save-hook ()
  "Save after 600 seconds of no changes."
  (if (eq major-mode 'org-mode)
      (malb/org-icalendar-export-with-delay 600)))

(add-hook 'after-save-hook 'malb/ox-export-after-save-hook)
#+END_SRC

*** LaTeX

- Use [[http://www.xelatex.org][XeLaTeX]] because UTF-8 and fonts.
- Add some standard (to us) packages
- Handouts are done via [[https://www.ctan.org/pkg/tufte-latex?lang=en][tufte-handout]], letters via =ox-koma-letter=.

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :ensure nil
  :config (progn

            (add-to-list 'org-latex-packages-alist '("" "listings"))
            (add-to-list 'org-latex-packages-alist '("" "xcolor"))
            (add-to-list 'org-latex-packages-alist '("" "amssymb"))
            (add-to-list 'org-latex-packages-alist '("" "amsmath"))
            (add-to-list 'org-latex-packages-alist '("" "amsthm"))
            (add-to-list 'org-latex-packages-alist '("" "gensymb"))
            (add-to-list 'org-latex-packages-alist '("" "nicefrac"))
            (add-to-list 'org-latex-packages-alist '("" "units"))
            (add-to-list 'org-latex-packages-alist '("" "xspace"))
            (add-to-list 'org-latex-packages-alist '("notions,operators,sets,keys,ff,adversary,primitives,complexity,asymptotics,lambda,landau,advantage" "cryptocode"))
            (add-to-list 'org-latex-packages-alist '("" "newunicodechar"))
            (add-to-list 'org-latex-packages-alist '("" "microtype"))
            (add-to-list 'org-latex-packages-alist '("color=yellow!40" "todonotes") t)

            (setq malb/org-latex-default (with-temp-buffer
                                           (insert-file-contents
                                            (expand-file-name "article-header.tex" user-emacs-directory))
                                           (buffer-string)))

            (setq org-latex-listings 't
                  org-latex-compiler "xelatex"
                  org-latex-prefer-user-labels t
                  org-latex-caption-above nil
                  org-latex-hyperref-template  (concat "\\hypersetup{\n"
                                                       "pdfauthor={%a},\n"
                                                       "pdftitle={%t},\n"
                                                       "pdfkeywords={%k},\n"
                                                       "pdfsubject={%d},\n"
                                                       "pdfcreator={%c},\n"
                                                       "pdflang={%L},\n"
                                                       "colorlinks,\n"
                                                       "citecolor=gray,\n"
                                                       "filecolor=gray,\n"
                                                       "linkcolor=gray,\n"
                                                       "urlcolor=gray\n"
                                                       "}\n"))

            (add-to-list 'org-latex-classes
                         (list "tufte-book-noparts"
                               (concat "\\documentclass{tufte-book}\n"
                                       "\\usepackage{fontspec}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       malb/org-latex-default
                                       "\\usepackage{ifxetex}\n"
                                       "\\ifxetex\n"
                                       " \\renewcommand{\\textls}[2][5]{%\n"
                                       " \\begingroup\\addfontfeatures{LetterSpace=#1}#2\\endgroup\n"
                                       "}\n"
                                       "\\renewcommand{\\allcapsspacing}[1]{\\textls[15]{#1}}\n"
                                       "\\renewcommand{\\smallcapsspacing}[1]{\\textls[10]{#1}}\n"
                                       "\\renewcommand{\\allcaps}[1]{\\textls[15]{\\MakeTextUppercase{#1}}}\n"
                                       "\\renewcommand{\\smallcaps}[1]{\\smallcapsspacing{\\scshape\\MakeTextLowercase{#1}}}\n"
                                       "\\renewcommand{\\textsc}[1]{\\smallcapsspacing{\\textsmallcaps{#1}}}\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\fi\n"
                                       "[EXTRA]\n")
                               '("\\chapter{%s}" . "\\chapter*{%s}")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")))
            (add-to-list 'org-latex-classes
                         (list "tufte-book"
                               (concat "\\documentclass{tufte-book}\n"
                                       "\\usepackage{fontspec}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       malb/org-latex-default
                                       "\\usepackage{ifxetex}\n"
                                       "\\ifxetex\n"
                                       " \\renewcommand{\\textls}[2][5]{%\n"
                                       " \\begingroup\\addfontfeatures{LetterSpace=#1}#2\\endgroup\n"
                                       "}\n"
                                       "\\renewcommand{\\allcapsspacing}[1]{\\textls[15]{#1}}\n"
                                       "\\renewcommand{\\smallcapsspacing}[1]{\\textls[10]{#1}}\n"
                                       "\\renewcommand{\\allcaps}[1]{\\textls[15]{\\MakeTextUppercase{#1}}}\n"
                                       "\\renewcommand{\\smallcaps}[1]{\\smallcapsspacing{\\scshape\\MakeTextLowercase{#1}}}\n"
                                       "\\renewcommand{\\textsc}[1]{\\smallcapsspacing{\\textsmallcaps{#1}}}\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\fi\n"
                                       "[EXTRA]\n")
                               '("\\part{%s}" . "\\part*{%s}")
                               '("\\chapter{%s}" . "\\chapter*{%s}")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")))

            (add-to-list 'org-latex-classes
                         (list "handout"
                               (concat "\\documentclass{tufte-handout}\n"
                                       "\\usepackage{fontspec}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       malb/org-latex-default
                                       "[EXTRA]\n")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

            (add-to-list 'org-latex-classes
                         (list "org-report"
                               (concat "\\documentclass{report}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\usepackage[a4paper,includeheadfoot,margin=2.54cm]{geometry}\n"
                                       "\\usepackage[hang,flushmargin]{footmisc}\n"
                                       "\\parskip 1em\n"
                                       "\\parindent 0pt\n"
                                       "\\linespread{1.25}\n"
                                       malb/org-latex-default
                                       "[EXTRA]\n"
                                       )
                               '("\\chapter{%s}" . "\\chapter*{%s}")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

            (add-to-list 'org-latex-classes
                         (list "org-article"
                               (concat "\\documentclass{article}\n"
                                       "[DEFAULT-PACKAGES]\n"
                                       "[PACKAGES]\n"
                                       "\\usepackage{fontspec}\n"
                                       "\\usepackage[a4paper,includeheadfoot,margin=2.54cm]{geometry}\n"
                                       "\\usepackage[hang,flushmargin]{footmisc}\n"
                                       "\\parskip 1em\n"
                                       "\\parindent 0pt\n"
                                       malb/org-latex-default
                                       "[EXTRA]\n")
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                               '("\\paragraph{%s}" . "\\paragraph*{%s}")
                               '("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

            (use-package ox-koma-letter
              :ensure org-plus-contrib
              :config (progn
                        (add-to-list 'org-latex-classes
                                     (list "letter"
                                           (concat "\\documentclass{scrlttr2}\n"
                                                   "\\usepackage{fontspec}\n"
                                                   "[DEFAULT-PACKAGES]\n"
                                                   "[EXTRA]\n")))))))
#+END_SRC

*** Beamer

- _underline_ becomes *bold* in Beamer. ([[https://xgarrido.github.io/emacs-starter-kit/starter-kit-org.html][source]])
- +strikethrough+ becomes grey in Beamer.

#+BEGIN_SRC emacs-lisp
(use-package ox-beamer
  :ensure nil
  :config (progn
            (add-to-list 'org-beamer-environments-extra
                         '("lemma" "l" "\\begin{lemma}%a" "\\end{lemma}"))
            (defun malb/beamer-underline (contents backend info)
              (when (eq backend 'beamer)
                (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents))) ;; \\] org parse error

            (defun malb/beamer-strikethrough (contents backend info)
              (when (eq backend 'beamer)
                (concat "{"
                        (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\color{lightgray}" contents) ;; \\] org parse error
                        "}")))

            (defun malb/beamer-code (contents backend info)
              (when (eq backend 'beamer)
                (concat (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\lstinline" contents)))) ;; \\] org parse error

            (add-to-list 'org-export-filter-underline-functions 'malb/beamer-underline)
            (add-to-list 'org-export-filter-strike-through-functions 'malb/beamer-strikethrough)
            (add-to-list 'org-export-filter-code-functions 'malb/beamer-code)

            (add-to-list 'org-latex-classes
                         (list "mbeamer"
                               (concat  "\\documentclass[presentation,smaller]{beamer}\n"
                                        (with-temp-buffer
                                          (insert-file-contents
                                           (expand-file-name "talk-header.tex" user-emacs-directory))
                                          (buffer-string)))
                               '("\\section{%s}" . "\\section*{%s}")
                               '("\\subsection{%s}" . "\\subsection*{%s}")
                               '("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC

*** ODT

#+BEGIN_SRC emacs-lisp
(use-package ox-odt
  :ensure nil
  :init (progn
          (setq org-odt-styles-file
                (expand-file-name "org-export-template.ott" user-emacs-directory))))
#+END_SRC

Enable inline comments in org-export ([[https://gist.github.com/andersjohansson/6baa1e42ad4d7353e125][source]])

#+BEGIN_SRC emacs-lisp
(load-file (expand-file-name "local/ox-inline-comments.el" user-emacs-directory))
#+END_SRC

*** Bootstrap

[[https://github.com/marsmining/ox-twbs][ox-twbs]] - Twitter Bootstrap.

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs)
#+END_SRC

*** Pandoc

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :init (progn
          (setq org-pandoc-menu-entry  '((?m "as md." org-pandoc-export-as-commonmark)
                                         (?M "to md and open." org-pandoc-export-to-commonmark-and-open)
                                         (?x "to docx." org-pandoc-export-to-docx)
                                         (?X "to docx and open." org-pandoc-export-to-docx-and-open)
                                         (?e "to epub." org-pandoc-export-to-epub)
                                         (?E "to epub and open." org-pandoc-export-to-epub-and-open)
                                         (?3 "to epub3." org-pandoc-export-to-epub3)
                                         (?£ "to epub3 and open." org-pandoc-export-to-epub3-and-open)
                                         (?j "as json." org-pandoc-export-as-json)
                                         (?J "to json and open." org-pandoc-export-to-json-and-open)
                                         (?r "as rst." org-pandoc-export-as-rst)
                                         (?R "to rst and open." org-pandoc-export-to-rst-and-open))
                org-pandoc-options '((standalone . t)
                                     (mathjax . t)
                                     (wrap . "preserve")))))
#+END_SRC

*** Rich Text Clipboard

Place rich text version of selection in clipboard ([[https://melpa.org/#/ox-clip][source]])

#+BEGIN_SRC emacs-lisp
(use-package ox-clip)
#+END_SRC

*** HTML Clipboard

#+BEGIN_SRC emacs-lisp
(defun malb/org-clip-block-to-html ()
  "Copy current block as HTML"
  (interactive)
  (save-restriction
    (save-excursion
      (org-narrow-to-block)
      (let ((text (buffer-string)))
        (with-temp-buffer
          (insert text)
          (org-mode)
          (goto-char (point-min))
          (kill-line)
          (goto-char (point-max))
          (beginning-of-line)
          (kill-line)
          (mark-whole-buffer)
          (org-html-convert-region-to-html)
          (kill-new (buffer-string)))))))
#+END_SRC

*** Ignore Some Headlines

The tag =:ignore:= ignores a headline when exporting, section content is exported as usual.

#+BEGIN_SRC emacs-lisp
(use-package ox-extra
  :ensure nil
  :config (ox-extras-activate '(ignore-headlines)))
#+END_SRC
** Capture

If we are in a project we might add a TODO entry to the appropriate entry in =projects.org=.

#+BEGIN_SRC emacs-lisp
(defun malb/org-capture-projectile ()
  (if (projectile-project-p)
      (progn
        (let ((malb/projectile-name
               (projectile-project-name)))
          (find-file (expand-file-name "projects.org" malb/org-files-dir))
          (goto-char (point-min))
          (if (re-search-forward (concat "^\* " malb/projectile-name ".*\n") nil t)
              (newline 1)
            (progn
              (goto-char (point-max))
              (insert (concat "* " malb/projectile-name))
              (newline 1)))))
    (progn
      (find-file malb/inbox-org)
      (goto-char (point-min))
      (re-search-forward "^\* Tasks" nil t)
      (newline 1))))
#+END_SRC

Some helper functions

#+BEGIN_SRC emacs-lisp
;; https://web.archive.org/web/20181019173343/http://ul.io/nb/2018/04/30/better-code-snippets-with-org-capture
(defun malb/org-capture-get-src-block-string (major-mode)
  "Given a major mode symbol, return the associated org-src block
string that will enable syntax highlighting for that language

E.g. tuareg-mode will return 'ocaml', python-mode 'python', etc..."

  (let ((mm (intern (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))))
    (or (car (assoc mm org-babel-load-languages))
        (car (rassoc mm org-src-lang-modes))
        (format "%s" mm))))

(defun malb/org-capture-code-snippet (f)
  (with-current-buffer (find-buffer-visiting f)
    (let ((code-snippet (buffer-substring-no-properties (mark) (- (point) 1)))
          (func-name (which-function))
          (file-name (buffer-file-name))
          (line-number (line-number-at-pos (region-beginning)))
          (org-src-mode (malb/org-capture-get-src-block-string major-mode)))
      (format
       "
In [[file:%s::%s][%s]]:

,#+begin_example %s
%s
,#+end_example"
       file-name
       line-number
       func-name
       org-src-mode
       code-snippet))))
#+END_SRC

*Template Expansions*

- =%[file]= Insert the contents of the file given by file.
- =%(sexp)= Evaluate Elisp sexp and replace with the result. For convenience, =%:keyword= (see below) placeholders within the expression will be expanded prior to this. The sexp must return a string.
- =%<...>= The result of format-time-string on the … format specification.
- =%t= Timestamp, date only.
- =%T= Timestamp, with date and time.
- =%u, %U= Like the above, but inactive timestamps.
- =%i= Initial content, the region when capture is called while the region is active. The entire text will be indented like =%i= itself.
- =%a= Annotation, normally the link created with ~org-store-link~.
- =%A= Like =%a=, but prompt for the description part.
- =%l= Like =%a=, but only insert the literal link.
- =%c= Current kill ring head.
- =%x= Content of the X clipboard.
- =%K= Link to the currently clocked task.
- =%k= Title of the currently clocked task.
- =%n= User name (taken from user-full-name).
- =%f= File visited by current buffer when org-capture was called.
- =%F= Full path of the file or directory visited by current buffer.
- =%:keyword= Specific information for certain link types, see below.
- =%^g= Prompt for tags, with completion on tags in target file.
- =%^G= Prompt for tags, with completion all tags in all agenda files.
- =%^t= Like %t, but prompt for date. Similarly =%^T=, =%^u=, =%^U=. You may define a prompt like =%^{Birthday}t=.
- =%^L= Like %^C, but insert as link.
- =%^C= Interactive selection of which kill or clip to use.
- =%^{prop}p= Prompt the user for a value for property prop.
- =%^{prompt}= prompt the user for a string and replace this sequence with it. You may specify a default value and a completion table with =%^{prompt|default|completion2|completion3...}=. The arrow keys access a prompt-specific history.
- =%\n= Insert the text entered at the nth =%^{prompt}=, where n is a number, starting from 1.
- =%?= After completing the template, position cursor here.

#+BEGIN_SRC emacs-lisp
(use-package doct)
(use-package org-capture
  :ensure nil
  :after all-the-icons
  :bind ("<f9>" . org-capture)
  :config
  (progn
    (setq
     org-capture-templates
     (doct
      `((,(format "%s\tTask" (all-the-icons-octicon "checklist" :face 'all-the-icons :v-adjust 0.01)) :keys "t"
         :prepend t
         :empty-lines 1
         :children ((,(format "%s\tTask" (all-the-icons-octicon "checklist" :face 'all-the-icons :v-adjust 0.01)) :keys "t"
                     :template ("* TODO %?"
                                "%^{schedule|DEADLINE: |SCHEDULED: |}%^t"
                                ":PROPERTIES:"
                                ":CREATED: %U"
                                ":END:"
                                ""
                                "%i")
                     :file malb/inbox-org)
                    (,(format "%s\tTask in Context" (all-the-icons-octicon "checklist" :face 'all-the-icons :v-adjust 0.01)) :keys "c"
                     :template ("* TODO %?:"
                                ":PROPERTIES:"
                                ":CREATED: %U"
                                ":END:"
                                ""
                                "%a"
                                ""
                                "%i")
                     :file malb/inbox-org)
                    (,(format "%s\tTask for Project" (all-the-icons-octicon "checklist" :face 'all-the-icons :v-adjust 0.01)) :keys "p"
                     :template ("** TODO %?"
                                ":PROPERTIES:"
                                ":CREATED: %U"
                                ":END:"
                                ""
                                "%i"
                                "%a")
                     :type plain
                     :function malb/org-capture-projectile)
                    )
         )
        (,(format "%s\tEmail " (all-the-icons-faicon "envelope" :face 'all-the-icons :v-adjust 0.01)) :keys "e"
         :file malb/inbox-org
         ;; :headline "E-Mail"
         :empty-lines 1
         :children  ((,(format "%s\tRespond to Email" (all-the-icons-faicon "envelope" :face 'all-the-icons :v-adjust 0.01)) :keys "r"
                      :template  ("* REPLY to %:fromname on %a :email:"
                                  "DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1d\"))"
                                  ":PROPERTIES:"
                                  ":CREATED: %U"
                                  ":END:"
                                  ""
                                  "%i")
                      :prepend t
                      :immediate-finish t)
                     (,(format "%s\tFile an Email" (all-the-icons-faicon "file" :face 'all-the-icons :v-adjust 0.01)) :keys "f"
                      :template  ("* %a"
                                  ":PROPERTIES:"
                                  ":CREATED: %U"
                                  ":END:")
                      :prepend nil
                      :immediate-finish nil)
                     (,(format "%s\tStore Email Search" (all-the-icons-faicon "search" :face 'all-the-icons :v-adjust 0.01)) :keys "s"
                      :template ("* %a")
                      :immediate-finish nil
                      :prepend nil
                      :empty-lines 0)
                     (,(format "%s\tTask" (all-the-icons-octicon "checklist" :face 'all-the-icons :v-adjust 0.01)) :keys "t"
                      :file malb/work-org
                      :headline "Admin"
                      :template ("* %^{type|TODO|REPLY|READ} %? %^G:email:"
                                 "%^{schedule|DEADLINE: |SCHEDULED: |}%^t"
                                 ":PROPERTIES:"
                                 ":CREATED: %U"
                                 ":END:"
                                 ""
                                 "See %a by %:fromname")
                      :immediate-finish nil
                      :prepend t)
                     (,(format "%s\tOffice Task" (all-the-icons-faicon "university" :face 'all-the-icons :v-adjust 0.01)) :keys "o"
                      :file malb/work-org
                      :headline "Admin"
                      :template ("* TODO %a (%:fromname) %^{tag|:@office:|:@train:}email:"
                                 "SCHEDULED: %(org-insert-time-stamp (let ((tue (org-read-date nil t \"Tue\"))"
                                 "                             (thu (org-read-date nil t \"Thu\")))"
                                 "                         (if (time-less-p tue thu)"
                                 "                             tue"
                                 "                           thu)))"
                                 ":PROPERTIES:"
                                 ":CREATED: %U"
                                 ":END:")
                      :immediate-finish t
                      :prepend t)
                     (,(format "%s\tQuick Task" (all-the-icons-faicon "fast-forward" :face 'all-the-icons :v-adjust 0.01)) :keys "y"
                      :file malb/work-org
                      :headline "Admin"
                      :template ("* TODO %a (%:fromname) :email:"
                                 "SCHEDULED: %(let ((hour (third (decode-time (current-time)))))"
                                 "                  (if (< hour 16)"
                                 "                    (org-insert-time-stamp nil)"
                                 "                   (org-insert-time-stamp (org-read-date nil t \"+1d\"))))"
                                 ":PROPERTIES:"
                                 ":CREATED: %U"
                                 ":END:")
                      :immediate-finish t
                      :prepend t)))
        (,(format "%s\tQuick Task " (all-the-icons-faicon "fast-forward" :face 'all-the-icons :v-adjust 0.01)) :keys "y"
         :template ("* TODO %?"
                    "SCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))"
                    ":PROPERTIES:"
                    ":CREATED: %U"
                    ":END:"
                    ""
                    "%i")
         :file malb/inbox-org)
        (,(format "%s\tReading" (all-the-icons-faicon "book" :face 'all-the-icons :v-adjust 0.01)) :keys "r"
         :file malb/work-org
         :headline "Reading"
         :template ("* READ %?"
                    "DEADLINE: %^t"
                    ":PROPERTIES:"
                    ":CREATED: %U"
                    ":END:"
                    ""
                    "%i")
         :prepend t
         :empty-lines 1)
        (,(format "%s\tResearch Idea" (all-the-icons-faicon "lightbulb-o" :face 'all-the-icons :v-adjust 0.01)) :keys "i"
         :file malb/work-org
         :headline "Ideas"
         :template ("* EXPLORE %?"
                    ":PROPERTIES:"
                    ":CREATED: %U"
                    ":END:"
                    ""
                    "%a"
                    "%i")
         :prepend t
         :empty-lines 1)
        (,(format "%s\tJournal" (all-the-icons-faicon "clipboard" :face 'all-the-icons :v-adjust 0.01)) :keys "j"
         :file (lambda () (expand-file-name "journal.org"
                                            malb/org-files-dir))
         :datetree t
         :template ("* work"
                    "%?"
                    "* critique"
                    ""))
        (,(format "%s\tMeeting" (all-the-icons-faicon "university" :face 'all-the-icons :v-adjust 0.01)) :keys "m"
         :file malb/inbox-org
         ;; :headline "Meetings"
         :template ("* Meeting with %^{who}"
                    "%U"
                    ""
                    "%i%?")
         :clock-in t
         :clock-resume t
         :empty-lines 1)
        (,(format "%s\tNote" (all-the-icons-faicon "sticky-note" :face 'all-the-icons :v-adjust 0.01)) :keys "n"
         :file malb/inbox-org
         :template ("* %?"
                    ":PROPERTIES:"
                    ":CREATED: %U"
                    ":END:"
                    ""
                    "%i")
         :empty-lines 1)
        (,(format "%s\tSoftware Tip" (all-the-icons-faicon "code" :face 'all-the-icons :v-adjust 0.01)) :keys "s"
         :file (lambda () (expand-file-name "software.org" deft-directory))
         :headline "Incoming"
         :template ("* %?"
                    ":PROPERTIES:"
                    ":CREATED: %U"
                    ":END:"
                    ""
                    "%(malb/org-capture-code-snippet \"%F\")"
                    "")
         :prepend t
         :empty-lines 1)

        (,(format "%s\tWeight" (all-the-icons-faicon "tachometer"  :face 'all-the-icons :v-adjust 0.01)) :keys "w"
         :file malb/private-org
         :headline "Weight"
         :type table-line
         :template "| %u | %? | |")

        (,(format "%s\t[External] " (all-the-icons-faicon "firefox" :face 'all-the-icons :v-adjust 0.01)) :keys "%"
         :children (
                    (,(format "%s\tReading" (all-the-icons-faicon "book" :face 'all-the-icons :v-adjust 0.01)) :keys "r"
                     :file malb/work-org
                     :headline "Reading"
                     :template ("* READ %a%?"
                                "DEADLINE: %^t"
                                ":PROPERTIES:"
                                ":CREATED: %U"
                                ":END:"
                                ""
                                "%i")
                     :prepend t
                     :empty-lines 1)
                    (,(format "%s\tWebsite" (all-the-icons-faicon "globe" :face 'all-the-icons :v-adjust 0.01)) :keys "w"
                     :file malb/inbox-org
                     ;; :headline "Links"
                     :template ("* %?%a"
                                ":PROPERTIES:"
                                ":CREATED: %U"
                                ":END:")
                     :immediate-finish nil
                     :prepend t)
                    (,(format "%s\tWebsite (selected text)" (all-the-icons-faicon "globe" :face 'all-the-icons :v-adjust 0.01)) :keys "W"
                     :file malb/inbox-org
                     ;; :headline "Links"
                     :template  ("* %?%a"
                                 ":PROPERTIES:"
                                 ":CREATED: %U"
                                 ":END:"
                                 ""
                                 "#+begin_quote"
                                 "%:initial"
                                 "#+end_quote"
                                 )
                     :immediate-finish nil
                     :prepend t))))))

    (setq org-capture-templates-contexts
          '(("er" ((in-mode . "mu4e-view-mode")))
            ("ef" ((in-mode . "mu4e-view-mode")))
            ("et" ((in-mode . "mu4e-view-mode")))
            ("eo" ((in-mode . "mu4e-view-mode")))
            ("ey" ((in-mode . "mu4e-view-mode")))
            ("es" ((in-mode . "mu4e-headers-mode")))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-view-org-capture (arg)
  "Call `org-capture' followed by removing flag from e-mail."
  (interactive "P")
  (mu4e~view-in-headers-context
   (if (member 'flagged (mu4e-message-field-at-point :flags))
       (mu4e-mark-set 'unflag)))
  (org-capture arg))

(bind-key "<f9>" #'malb/mu4e-view-org-capture mu4e-view-mode-map)
#+END_SRC

Run org-capture [[https://github.com/tumashu/org-capture-pop-frame][in a frame]].

#+BEGIN_SRC emacs-lisp
(use-package org-capture-pop-frame
  :after (org-capture)
  :config (progn (setq ocpf-frame-parameters '((name . "*Org Capture*")
                                               (width . 120)
                                               (height . 40)
                                               (sticky . t)
                                               (fullscreen . nil)
                                               (tool-bar-lines . 0)
                                               (menu-bar-lines . 0)))

                 (defun ocpf--org-capture (orig-fun &optional goto keys)
                   "Create a new frame and run org-capture."
                   (interactive)
                   (let ((frame-window-system
                          (cond ((eq system-type 'darwin) 'ns)
                                ((eq system-type 'gnu/linux) 'x)
                                ((eq system-type 'windows-nt) 'w32)))
                         (after-make-frame-functions
                          #'(lambda (frame)
                              (progn
                                (if (and (fboundp 'persp-init-frame)
                                         persp-mode)
                                    (persp-init-frame frame)) ;; MALB: make perspective work
                                (select-frame frame)
                                (setq word-wrap nil)
                                (setq truncate-lines nil)
                                (condition-case nil
                                    (funcall orig-fun goto keys)
                                  ((debug error) (ocpf--delete-frame))) ;; MALB: handle "q"
                                (setq header-line-format
                                      (list "Capture buffer. "
                                            (propertize
                                             (substitute-command-keys "Finish \\[org-capture-finalize], ") ;; \\] org parse error
                                             'mouse-face 'mode-line-highlight
                                             'keymap
                                             (let ((map (make-sparse-keymap)))
                                               (define-key map [header-line mouse-1] 'org-capture-finalize)
                                               map))
                                            (propertize
                                             (substitute-command-keys "abort \\[org-capture-kill]. ") ;; \\] org parse error
                                             'mouse-face 'mode-line-highlight
                                             'keymap
                                             (let ((map (make-sparse-keymap)))
                                               (define-key map [header-line mouse-1] 'org-capture-kill)
                                               map))))))))
                     (select-frame-set-input-focus
                      (make-frame
                       `((window-system . ,frame-window-system)
                         ,@ocpf-frame-parameters)))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'helm-commands-using-frame 'org-refile)
#+END_SRC

** Web Tools

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools
  :after org)
#+END_SRC

** Eldoc

Activate eldoc and show footnotes in minibuffer.

#+BEGIN_SRC emacs-lisp
(use-package org-eldoc
  :ensure nil
  :config (progn
            (add-hook 'org-mode-hook #'org-eldoc-load)
            (add-hook 'org-mode-hook #'eldoc-mode)))

(defun malb/org-eldoc-get-footnote (&rest _ignored)
  (save-excursion
    (let ((fn (org-between-regexps-p "\\[fn:" "\\]")))
      (when fn
        (save-match-data
          (nth 3 (org-footnote-get-definition (buffer-substring (+ 1 (car fn)) (- (cdr fn) 1)))))))))

(advice-add 'org-eldoc-documentation-function
            :before-until #'malb/org-eldoc-get-footnote)
#+END_SRC

** Inline Tasks

#+BEGIN_SRC emacs-lisp
(use-package org-inlinetask
  :ensure nil
  :config (progn
            (defun malb/org-latex-format-inlinetask-function
                (todo todo-type priority title tags contents info)
              "format function for a inlinetasks.
See `org-latex-format-inlinetask-function' for details."
              (concat "\\todo[inline]{\\textbf{" todo "}: " title "}\n"))
            (setq org-latex-format-inlinetask-function #'malb/org-latex-format-inlinetask-function)
            (setq org-inlinetask-min-level 6)))
#+END_SRC

** Functions

([[http://emacs.stackexchange.com/a/10712/115][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/org-delete-link ()
  "Replace an org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole org link.
In both the cases, save the LINK to the kill-ring.
Execute this command while the point is on or after the hyper-linked org link."
  (interactive)
  (when (derived-mode-p 'org-mode)
    (let ((search-invisible t) start end)
      (save-excursion
        (when (re-search-backward "\\[\\[" nil :noerror)
          (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                   nil :noerror)
            (setq start (match-beginning 0))
            (setq end   (match-end 0))
            (kill-new (match-string-no-properties 1)) ; Save link to kill-ring
            (goto-char start)
            (re-search-forward "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" end)
            (replace-match "\\2")))))))
#+END_SRC

** Org Babel

Working with source code in org-mode.

#+BEGIN_SRC emacs-lisp
(use-package ob
  :ensure nil
  :after jupyter
  :config (progn
            ;; load more languages for org-babel
            (org-babel-do-load-languages
             'org-babel-load-languages
             '((python . t)
               (shell . t)
               (latex . t)
               (ditaa . t)
               (C . t)
               (dot . t)
               (plantuml . t)
               (makefile . t)
               (jupyter . t)))          ; must be last

            (setq org-babel-default-header-args:sh    '((:results . "output replace"))
                  org-babel-default-header-args:bash  '((:results . "output replace"))
                  org-babel-default-header-args:shell '((:results . "output replace"))
                  org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                                 (:results . "scalar")
                                                                 (:session . "py")
                                                                 (:exports . "both")
                                                                 (:kernel . "sagemath")))

            (add-to-list 'org-latex-listings-langs '(jupyter-python "python"))

            (setq org-confirm-babel-evaluate nil
                  org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
                  org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

            (add-to-list 'org-src-lang-modes (quote ("plantuml" . plantuml)))))
#+END_SRC

*** Async

Add =:async= keyword to header-args of any org-babel src block and invoke ~ob-async-org-babel-execute-src-block~.

#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :after ob
  :init (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia")))
#+END_SRC

** Org Download

([[https://github.com/abo-abo/org-download][source]])

This extension facilitates moving images from point A (e.g. an image inside your browser that you can drag to Emacs) to point B (an Emacs org-mode buffer where the inline link will be inserted).

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :config (progn
            (setq-default org-download-heading-lvl nil)
            (add-hook 'dired-mode-hook 'org-download-enable)))
#+END_SRC

** Org Chef

[[https://github.com/Chobbes/org-chef][org-chef]]

#+begin_src emacs-lisp
(use-package org-chef)
#+end_src

** Tips

*** Agenda commands

| ~F~         | ~(org-agenda-follow-mode)~           | Toggle Follow mode                                     |
| ~L~         | ~(org-agenda-recenter)~              | Display original location and recenter that window.    |
| ~o~         |                                      | Delete other windows.                                  |
| ~f~         | ~(org-agenda-later)~                 | Go forward in time to display                          |
| ~b~         | ~(org-agenda-earlier)~               | Go backward in time to display earlier dates           |
| ~r~ and ~g~ | ~(org-agenda-redo)~                  | Recreate the agenda buffer.                            |
| ~C-c C-s~   | ~(org-agenda-schedule)~              | Schedule this item.                                    |
| ~C-c C-d~   | ~(org-agenda-deadline)~              | Set a deadline for this item.                          |
| ~S-<right>~ | ~(org-agenda-do-date-later)~         | Change the timestamp by one day into the future.       |
| ~S-<left>~  | ~(org-agenda-do-date-earlier)~       | Change the timestamp by one day into the past.         |
| ~>~         | ~(org-agenda-date-prompt)~           | Change the timestamp associated with the current line. |
| ~m~         | ~(org-agenda-bulk-mark)~             | Mark the entry at point for bulk action.               |
| ~*~         | ~(org-agenda-bulk-mark-all)~         | Mark all visible agenda entries for bulk action.       |
| ~u~         | ~(org-agenda-bulk-unmark)~           | Unmark entry at point for bulk action.                 |
| ~U~         | ~(org-agenda-bulk-remove-all-marks)~ | Unmark all marked entries for bulk action.             |
| ~B~         | ~(org-agenda-bulk-action)~           | Bulk action: act on all marked entries in the agenda.  |
#+TBLFM:

*** Commands I easily forget

- =C-c C-v C-d= splits blocks
- =C-c C-j= calls ~(org-goto)~ which jumps to headlines in a file
- =C-c /= calls ~(org-sparse-tree)~ which reduces the tree to the nodes with some attribute

*** Style

In org-mode we can style inline elements with *bold*, /italic/, _underlined_, =verbatim=, and ~code~. But this breaks if the character just inside the styling code is a non-smart single or double quote. =C-c ;= is styled; =C-c '= is not. We can fix that by inserting a zero-width space between the apostrophe and the = . The first time, we can put the cursor between the apostrophe and the = and enter ~C-x 8 RET ZERO WIDTH SPACE RET~, at which point =C-c '​= will display correctly.

*** Batch Exporting

*Note* the order matters, i.e. open the file first then call =org-latex-export-to-pdf=

#+BEGIN_SRC shell :tangle no
emacs --batch -l ~/.emacs.d/org-export-init.el file.org -f org-latex-export-to-pdf
#+END_SRC

* Shells

We don’t need a =$PAGER= here ([[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#eshell-and-shell-environment][source]])

#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "cat")
#+END_SRC

** Toggle Shells

 Open various shells at point, close with =x= Config partly stolen from [[https://github.com/syl20bnr/spacemacs/blob/master/layers/shell/packages.el][spacemacs]] and from ([[http://www.howardism.org/Technical/Emacs/eshell-fun.html][source]]).

#+BEGIN_SRC emacs-lisp
(defun malb/make-toggle-shell (shell-name shell-cmd &optional post-exec per-project enter-exec)
  "Create function to toggle a shell-like thing in current project/directory.

The function behaves as follows:

- The shell-like buffer is renamed to match the current projectile
  project or directory to make multiple windows easier.
- If a buffer of the same name already exists, it is reused.
- If a buffer with the same name is already shown, its window is closed.
- `post-exec` is run after the shell is created.
- `enter-exec` is called before anything else (to set virtualenvs etc)
"
  `(lambda (arg)
     (interactive "P")
     ,enter-exec
     (let* ((parent (if (buffer-file-name)
                        (file-name-directory (buffer-file-name))
                      default-directory))
            (height (/ (window-total-height) 3))
            (name (if (projectile-project-p)
                      (projectile-project-name)
                    (car (last (split-string parent "/" t)))))
            (buffer-name   (if (and (not arg) ,per-project)
                               (concat "*" ,shell-name
                                       "[" name "]" "*")
                             ,shell-name))
            (window (get-buffer-window buffer-name)))
       (if (and window (<= (window-height window) (/ (frame-height) 3)))
           (progn
             (select-window window)
             (delete-window))
         (progn
           (split-window-vertically (- height))
           (other-window 1)
           (if (get-buffer buffer-name)
               (progn
                 (switch-to-buffer buffer-name)
                 (set-window-dedicated-p (get-buffer-window (current-buffer)) t))
             (progn
               ,shell-cmd
               (rename-buffer buffer-name)
               (set-window-dedicated-p (get-buffer-window (current-buffer)) t)
               ,post-exec)))))))
#+END_SRC

** [#B] Multi-Term

[[https://www.emacswiki.org/emacs/MultiTerm][MultiTerm]] is a mode based on term.el, for managing multiple terminal buffers in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :commands (malb/toggle-multi-term multi-term)
  :config (progn
            (setq term-buffer-maximum-size 16384)

            (add-to-list 'term-bind-key-alist '("S-<left>"  . multi-term-prev))
            (add-to-list 'term-bind-key-alist '("S-<right>" . multi-term-next))
            (add-to-list 'term-bind-key-alist '("<tab>" . malb/term-send-tab))
            (add-to-list 'term-bind-key-alist '("C-r" . term-send-reverse-search-history))

            (bind-key "C-y" #'term-paste term-raw-map)

            ;; rebind C-r to the terminal's native one
            (setq term-bind-key-alist (remove* '"C-r" term-bind-key-alist :test 'equal :key 'car))

            (setq multi-term-switch-after-close nil)

            (defun malb/toggle-term-mode ()
              (interactive)
              (if (term-in-char-mode)
                  (term-line-mode)
                (term-char-mode)))

            (defun malb/term-send-tab ()
              "Send tab in term mode."
              (interactive)
              (term-send-raw-string "\t"))

            (fset 'malb/toggle-multi-term
                  (malb/make-toggle-shell "multi-term"
                                          '(let ((current-prefix-arg nil)) (multi-term))
                                          '(progn
                                             (when (and (boundp 'conda-env-current-name) conda-env-current-name)
                                               (insert (format "conda activate %s" conda-env-current-name))
                                               (term-send-input))
                                             (insert "ls")
                                             (term-send-input))
                                          t))))
#+END_SRC

** Vterm

[[https://github.com/akermu/emacs-libvterm][Vterm]] is an Emacs terminal using [[http://www.leonerd.org.uk/code/libvterm/][libvterm]]

=C-c C-t= enters copy mode, =<enter>= adds selection to kill ring and leaves copy mode.

#+begin_src emacs-lisp
(use-package vterm
  :commands (malb/toggle-vterm vterm)
  :init (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
  :config (progn
            (setq vterm-kill-buffer-on-exit t)
            (bind-key "M-<up>"   #'vterm-send-up   vterm-mode-map)
            (bind-key "M-<down>" #'vterm-send-down vterm-mode-map)
            (fset 'malb/toggle-vterm
                  (malb/make-toggle-shell
                   "vterm"
                   '(let ((current-prefix-arg nil)) (vterm))
                   '(progn
                      (when (and (boundp 'conda-env-current-name) conda-env-current-name)
                        (vterm-send-string (format "conda activate %s" conda-env-current-name))
                        (vterm-send-return))
                      (vterm-send-string "ls")
                      (vterm-send-return))
                   t))

            (defun malb/vterm-send-C-d-advive (orig-function &rest args)
              (let ((do-kill-frame (and (not (malb/only-frame-p (selected-frame)))
                                        (= (length (window-list)) 1)))
                    (buffer  (current-buffer)))
                (apply orig-function args)
                (sit-for 0.1)
                (if (and do-kill-frame (not (buffer-live-p buffer)))
                    (delete-frame))))

            (advice-add #'vterm-send-C-d :around #'malb/vterm-send-C-d-advive)))
#+end_src

** [#B] Shell

#+BEGIN_SRC emacs-lisp
(use-package shell
  :config (progn
            (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)

            ;; https://www.emacswiki.org/emacs/multi-shell.el
            (defun malb/comint-close-buffer-when-finished ()
              "This function for close current shell buffer.
When `exit' from shell buffer."
              (when (ignore-errors (get-buffer-process (current-buffer)))
                (set-process-sentinel (get-buffer-process (current-buffer))
                                      (lambda (proc change)
                                        (when (string-match "\\(finished\\|exited\\)" change)
                                          (kill-buffer (process-buffer proc)))))))

            (add-hook 'shell-mode-hook #'toggle-truncate-lines)
            (add-hook 'shell-mode-hook #'malb/comint-close-buffer-when-finished)
            (fset 'malb/toggle-shell
                  (malb/make-toggle-shell "shell" '(shell)  nil t))))
#+END_SRC

** EShell

([[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package eshell
  :config (progn

            ;; -------------
            ;; TOGGLE ESHELL
            ;; -------------

            (fset 'malb/toggle-eshell
                  (malb/make-toggle-shell "eshell"
                                          '(eshell "new")
                                          '(progn (insert "ls") (eshell-send-input)) t))
            ;; ------------
            ;; KEY BINDINGS
            ;; ------------

            (defun malb/eshell-keys ()
              (bind-key "<home>" #'eshell-bol eshell-mode-map)
              (bind-key "M-r" #'helm-eshell-history eshell-mode-map)
              (bind-key "M-/" #'helm-esh-pcomplete eshell-mode-map)
              (bind-key "M-w" #'malb/eshell-kill-ring-save eshell-mode-map)
              (bind-key "ESC ." #'malb/eshell-insert-last-word eshell-mode-map))

            ;; https://github.com/bbatsov/emacs-dev-kit/blob/master/eshell-config.el
            ;; for some reason this needs to be a hook
            (add-hook 'eshell-mode-hook #'malb/eshell-keys)

            ;; ---------------
            ;; VISUAL COMMANDS
            ;; ---------------

            (setq eshell-visual-subcommands '(("git" "diff" "show")
                                              ("tmux" "attach" "new")))

            (defun malb/eshell-add-visual-commands ()
              (add-to-list 'eshell-visual-commands "htop")
              (add-to-list 'eshell-visual-commands "ssh")
              (add-to-list 'eshell-visual-commands "ipython")
              (add-to-list 'eshell-visual-commands "mscdb.sh")
              (add-to-list 'eshell-visual-commands "vim"))

            (add-hook 'eshell-mode-hook #'malb/eshell-add-visual-commands)

            (defun malb/visual-command-frame (old-function &rest arguments)
              (let  ((frame (make-frame '((width . 160) (height . 40)))))
                (select-frame frame)
                (apply old-function arguments)
                ;; (set-process-sentinel (get-buffer-process (current-buffer))
                ;;                       (lambda (proc change)
                ;;                         (when (string-match "\\(finished\\|exited\\)" change)
                ;;                           (delete-frame (window-frame
                ;;                                          (get-buffer-window
                ;;                                           (process-buffer proc)))))))
                (set-window-dedicated-p (get-buffer-window) t)))

            (advice-add #'eshell-exec-visual :around #'malb/visual-command-frame)

            ;; -------
            ;; ALIASES
            ;; -------

            ;; https://github.com/algernon/emacs.d/blob/master/layers/%2Bapps/algernon-eshell/packages.el#L85-L95
            (defun eshell/git (command &rest args)
              (pcase command
                ("status" (progn
                            (magit-status)
                            (eshell/echo)))
                (_ (let ((command (s-join " " (append (list "git" command) args))))
                     (message command)
                     (shell-command-to-string command)))))

            ;; mapped to 'x' in eshell
            (defun eshell/x ()
              (delete-window)
              (eshell/exit))

            (defalias 'eshell/q     'malb/quit-bottom-disposable-windows)
            (defalias 'eshell/en    'find-file)
            (defalias 'eshell/e     'find-file)
            (defalias 'eshell/vim   'find-file) ;; muscle memory
            (defalias 'eshell/d     'dired)
            (defalias 'eshell/emacs 'find-file)
            (defalias 'eshell/less  'view-file)

            (defun eshell/clear ()
              "Clear the eshell buffer."
              (let ((inhibit-read-only t))
                (erase-buffer)
                (eshell-send-input)))

            ;; TODO This is broken
            (defun eshell/ag (&optional dir)
              (malb/helm-ag (file-name-as-directory
                             (expand-file-name (or dir ".")))))

            ;; -----------
            ;; MINOR MODES
            ;; -----------

            (defun malb/eshell-minor-modes ()
              (smartparens-mode t))

            (add-hook 'eshell-mode-hook #'malb/eshell-minor-modes)

            ;; ------------------------------------------------
            ;; DON'T ADD COMMAND STARTING WITH SPACE TO HISTORY
            ;; ------------------------------------------------

            (setq eshell-input-filter
                  (lambda (str)
                    (not (or (string= "" str)
                             (string-prefix-p " " str)))))

            ;; --------------------
            ;; COPY PREVIOUS OUTPUT
            ;; --------------------

            ;; http://fasciism.com/2017/01/27/eshell-kill-previous-output/
            (defun eshell/kpo (&optional nth)
              "Copies the output of the previous command to the kill ring.
When nth is set, it will copy the nth previous command."
              (save-excursion
                ;; Move to the end of the eshell buffer.
                (goto-char (point-max))
                ;; Move to the start of the last prompt.
                (search-backward-regexp eshell-prompt-regexp nil nil nth)
                ;; Move to the start of the line, before the prompt.
                (beginning-of-line)
                ;; Remember this position as the end of the region.
                (let ((end (point)))
                  ;; Move to the start of the last prompt.
                  (search-backward-regexp eshell-prompt-regexp)
                  ;; Move one line below the prompt, where the output begins.
                  (next-line)
                  ;; Find first line that's not blank.
                  (while (looking-at "^[[:space:]]*$")
                    (beginning-of-line)
                    (next-line))
                  ;; Copy region to kill ring.
                  (copy-region-as-kill (point) end)
                  ;; Output stats on what was copied as a sanity check.
                  (format "Copied %s words to kill ring." (count-words-region (point) end)))))

            (defun malb/eshell-kill-ring-save (arg)
              "Copy selection or previous command's output to kill ring."
              (interactive "P")
              (if (or arg (region-active-p))
                  (call-interactively #'kill-ring-save)
                (eshell/kpo)))

            ;; --------------
            ;; TAB COMPLETION
            ;; --------------

            (defun malb/config-eshell-completion ()
              (setq pcomplete-cycle-completions t
                    pcomplete-ignore-case t)
              (setq-local company-idle-delay nil)
              (define-key eshell-mode-map [remap eshell-pcomplete]
                (lambda ()
                  (interactive)
                  (let ((completion--capf-misbehave-funs nil))
                    (call-interactively #'company-capf)))))

            (add-hook 'eshell-mode-hook #'malb/config-eshell-completion)


            ;; -----
            ;; ESC-.
            ;; -----

            ;; https://gist.github.com/kanru/8680931
            (defun malb/eshell-last-argument (n)
              (let* ((input (substring-no-properties
                             (eshell-previous-input-string (1- n))))
                     (parse (with-temp-buffer
                              (insert input)
                              (car (reverse (eshell-parse-arguments
                                             (point-min) (point-max)))))))
                (eval parse)))

            ;; https://gist.github.com/kanru/8680931
            (defun malb/eshell-insert-last-word (n)
              (interactive "p")
              (unless (eq last-command this-command)
                (put 'malb/eshell-insert-last-word 'pre-n n)
                (put 'malb/eshell-insert-last-word 'pre-p nil))
              (let ((n (get 'malb/eshell-insert-last-word 'pre-n))
                    (pre-p (get 'malb/eshell-insert-last-word 'pre-p)))
                (when pre-p
                  (delete-region pre-p (point)))
                (put 'malb/eshell-insert-last-word 'pre-n (1+ n))
                (put 'malb/eshell-insert-last-word 'pre-p (point))
                (insert (malb/eshell-last-argument n))))

            ;; ------
            ;; CONFIG
            ;; ------

            (setq eshell-scroll-to-bottom-on-input t
                  eshell-destroy-buffer-when-process-dies t
                  eshell-history-size 8192
                  eshell-buffer-maximum-lines 16384
                  eshell-hist-ignoredups t
                  eshell-list-files-after-cd t
                  eshell-ls-initial-args "-hk"
                  eshell-buffer-shorthand t
                  eshell-plain-echo-behavior t)))
#+END_SRC

Plan 9 Smart Shell

([[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][source]])


#+BEGIN_SRC emacs-lisp
(use-package em-smart
  :ensure nil
  :config (setq eshell-where-to-jump 'begin
                eshell-review-quick-commands nil
                eshell-smart-space-goes-to-end t))
#+END_SRC

*** Git prompt

#+BEGIN_SRC emacs-lisp
(use-package eshell-git-prompt
  :config (progn (eshell-git-prompt-use-theme "powerline")))
#+END_SRC

*** Git completion

([[https://tsdh.wordpress.com/2013/05/31/eshell-completion-for-git-bzr-and-hg/][source]])

#+BEGIN_SRC emacs-lisp
(defun pcmpl-git-commands ()
  "Return the most common git commands by parsing the git output."
  (with-temp-buffer
    (call-process-shell-command "git" nil (current-buffer) nil "help" "--all")
    (goto-char 0)
    (search-forward "Main Porcelain Commands")
    (let (commands)
      (while (re-search-forward
	      "^[[:blank:]]+\\([[:word:]-.]+\\)[[:blank:]]*\\([[:word:]-.]+\\)?"
	      nil t)
	(push (match-string 1) commands)
	(when (match-string 2)
	  (push (match-string 2) commands)))
      (sort commands #'string<))))

(defconst pcmpl-git-commands (pcmpl-git-commands)
  "List of `git' commands.")

(defvar pcmpl-git-ref-list-cmd "git for-each-ref refs/ --format='%(refname)'"
  "The `git' command to run to get a list of refs.")

(defun pcmpl-git-get-refs (type)
  "Return a list of `git' refs filtered by TYPE."
  (with-temp-buffer
    (insert (shell-command-to-string pcmpl-git-ref-list-cmd))
    (goto-char (point-min))
    (let (refs)
      (while (re-search-forward (concat "^refs/" type "/\\(.+\\)$") nil t)
	(push (match-string 1) refs))
      (nreverse refs))))

(defun pcmpl-git-remotes ()
  "Return a list of remote repositories."
  (split-string (shell-command-to-string "git remote")))

(defun pcomplete/git ()
  "Completion for `git'."
  ;; Completion for the command argument.
  (pcomplete-here* pcmpl-git-commands)
  (cond
   ((pcomplete-match "help" 1)
    (pcomplete-here* pcmpl-git-commands))
   ((pcomplete-match (regexp-opt '("pull" "push")) 1)
    (pcomplete-here (pcmpl-git-remotes)))
   ;; provide branch completion for the command `checkout'.
   ((pcomplete-match "checkout" 1)
    (pcomplete-here* (append (pcmpl-git-get-refs "heads")
			     (pcmpl-git-get-refs "tags"))))
   (t
    (while (pcomplete-here (pcomplete-entries))))))
#+END_SRC

*** Tips

Cat directly into a buffer (select with =C-c M-b=)

#+BEGIN_SRC shell :tangle no
cat mylog.log >> #<buffer *scratch*>
#+END_SRC

** Zsh History

#+BEGIN_SRC emacs-lisp
(defvar malb/helm-c-source-zsh-history
  '((name . "Zsh History")
    (candidates . malb/helm-c-zsh-history-set-candidates)
    (action . (("Insert" . malb/helm-c-zsh-history-insert)
               ("Execute" . malb/helm-c-zsh-history-run)))
    (volatile)
    (requires-pattern . 3)
    (delayed)))

(defun malb/helm-c-zsh-history-set-candidates (&optional request-prefix)
  (let ((pattern (replace-regexp-in-string
                  " " ".*"
                  (or (and request-prefix
                           (concat request-prefix
                                   " " helm-pattern))
                      helm-pattern))))
    (with-current-buffer (find-file-noselect "~/.zsh_history" t t)
      (auto-revert-mode -1)
      (goto-char (point-max))
      (loop for pos = (re-search-backward pattern nil t)
            while pos
            collect (replace-regexp-in-string
                     "\\`:.+?;" ""
                     (buffer-substring (line-beginning-position)
                                       (line-end-position)))))))

(defun malb/helm-c-zsh-history-insert (candidate)
  (insert candidate))

(defun malb/helm-c-zsh-history-run (candidate)
  (malb/named-compile candidate))

(defun malb/helm-command-from-zsh ()
  (interactive)
  (require 'helm)
  (helm-other-buffer 'malb/helm-c-source-zsh-history "*helm zsh history*"))
#+END_SRC

** Yakuake

… still my main shell, let’s make sure we can get there quickly.

#+BEGIN_SRC sh :tangle no
#!/usr/bin/env bash
if [ -z $(wmctrl -xl | grep -iF 'yakuake.yakuake' | head -n1 | cut -d' ' -f1) ]; then
    qdbus org.kde.yakuake /yakuake/window toggleWindowState;
fi
qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.addSession;
qdbus org.kde.yakuake /yakuake/sessions org.kde.yakuake.runCommand "cd $1" >/dev/null 2>&1 &
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/ykcd ()
  (interactive)
  (let ((fn (or (buffer-file-name) "~")))
    (shell-command (concat "ykcd " (file-name-directory fn)))))
#+END_SRC

** Yequake

#+begin_quote
[[https://github.com/alphapapa/yequake][This package]] provides configurable, drop-down Emacs frames, similar to drop-down terminal windows programs, like Yakuake.
#+end_quote

[[https://raw.githubusercontent.com/alphapapa/yequake/master/images/animation.gif]]

#+BEGIN_SRC emacs-lisp
(use-package yequake
  :config (setq yequake-frames
                '(("yequake-scratch" .
                   ((width . 0.75)
                    (height . 0.4)
                    (alpha . 0.95)
                    (buffer-fns . ("*scratch*"))
                    (frame-parameters . ((undecorated . t)
                                         (buffer-predicate . (lambda (x) nil))
                                         (internal-border-width . 24))))))))
#+END_SRC

* Programming (Languages)
** General
*** REPL
**** Comint

We want to pick previous inputs based on prefix ([[https://emacs.stackexchange.com/questions/14072/replicate-ipython-history-behaviour-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(use-package comint
  :ensure nil
  :config (progn
            (dolist (key '("C-<up>" "M-<up>" "M-p"))
              (bind-key key #'comint-previous-matching-input-from-input comint-mode-map))
            (dolist (key '("C-<down>" "M-<down>" "M-n"))
              (bind-key key #'comint-next-matching-input-from-input comint-mode-map))

            (bind-key "M-r" #'helm-comint-input-ring comint-mode-map)

            (setq comint-scroll-to-bottom-on-input t ; always insert at the bottom
                  comint-scroll-to-bottom-on-output nil
                  comint-input-ignoredups t ; no duplicates in command history
                  comint-prompt-read-only t ; don’t overwrite prompt
                  comint-move-point-for-output t)

            (defun malb/kill-buffer-delete-window ()
              (interactive)
              (let ((kill-buffer-query-functions nil))
                (kill-buffer)))

            (defun malb/kill-buffer (old-function &rest arguments)
              (apply old-function arguments)
              (let ((kill-buffer-query-functions nil))
                (kill-buffer)))

            (advice-add 'comint-send-eof :around  #'malb/kill-buffer)

            (defun malb/comint-kill-ring-save (arg)
              "Copy selection or previous command's output to kill ring."
              (interactive "P")
              (if (or arg (region-active-p))
                  (call-interactively #'kill-ring-save)
                (let ((proc (get-buffer-process (current-buffer)))
                      (inhibit-read-only t))
                  (let ((end (save-excursion
                               (goto-char (process-mark proc))
                               (forward-line 0)
                               (point)))
                        (start (save-excursion
                                 (goto-char comint-last-input-start)
                                 (forward-line 0)
                                 (point))))
                    (copy-region-as-kill start end)))))

            (bind-key "M-w" #'malb/comint-kill-ring-save comint-mode-map)
            (bind-key "C-S-w" #'malb/kill-buffer-delete-window comint-mode-map)))
#+END_SRC

***** Comint History Across Sessions

[[https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/][source]]

Directory where comint history will be stored

  #+BEGIN_SRC emacs-lisp
(defvar comint-history-dir (locate-user-emacs-file "comint-history"))

(unless (file-exists-p comint-history-dir)
  (make-directory comint-history-dir))
  #+END_SRC

Function to write comint history on exit

  #+BEGIN_SRC emacs-lisp
(defun comint-write-history-on-exit (process event)
  (comint-write-input-ring)
  (let ((buf (process-buffer process)))
    (when (buffer-live-p buf)
      (with-current-buffer buf
        (insert (format "\nProcess %s %s" process event))))))
  #+END_SRC

Function to setup comint history

  #+BEGIN_SRC emacs-lisp
(defun turn-on-comint-history ()
  (let ((process (get-buffer-process (current-buffer))))
    (when process
      (setq comint-input-ring-file-name
            (expand-file-name (format "inferior-%s-history"
                                      (process-name process))
                              comint-history-dir))
      (comint-read-input-ring t)
      (add-hook 'kill-buffer-hook 'comint-write-input-ring t t)
      (set-process-sentinel process
                            #'comint-write-history-on-exit))))
  #+END_SRC

Setup comint history on comint start

  #+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook 'turn-on-comint-history)
  #+END_SRC

Save comint history when emacs is killed

  #+BEGIN_SRC emacs-lisp
(defun comint-write-input-ring-all-buffers ()
  (mapc (lambda (buffer) (with-current-buffer buffer (comint-write-input-ring)))
        (buffer-list)))

(add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)
  #+END_SRC

***** Shx

#+BEGIN_QUOTE
shx or “shell-extras” extends comint-mode in Emacs — https://github.com/riscy/shx-for-emacs/
#+END_QUOTE

[[https://github.com/riscy/shx-for-emacs/blob/master/img/screenshot.png]]

#+BEGIN_SRC emacs-lisp
(use-package shx
  :after comint
  :config (progn
            (with-eval-after-load 'python
              (add-hook 'inferior-python-mode-hook #'shx-mode))
            (with-eval-after-load 'shell
              (add-hook 'shell-mode-hook #'shx-mode))))
#+END_SRC

*** Spell Checking

Enable spell checking in comments and documentation.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

*** Flycheck

[[https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png]] ([[http://www.flycheck.org/images/screencast.gif][source]])

Use [[https://github.com/flycheck/flycheck][Flycheck]] to run static checkers on code. We use clang’s checker for flycheck for which we can load per directory configuration using =.dir-locals.el=, e.g.

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((flycheck-clang-include-path . ("/FULL/PATH/TO/DIR1" "/FULL/PATH/TO/DIR2" ) ))))
#+END_SRC

Make flycheck prettier based on what spacemacs does.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :blackout flycheck-mode

  :config (progn
            (global-flycheck-mode)
            (add-hook 'org-mode-hook (lambda () (flycheck-mode -1)))

            (bind-key "C-c f n" #'flycheck-next-error flycheck-mode-map)
            (bind-key "C-c f p" #'flycheck-previous-error flycheck-mode-map)
            (bind-key "C-c f l" #'flycheck-list-errors flycheck-mode-map)

            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (setq flycheck-standard-error-navigation nil)

            (when (fboundp 'define-fringe-bitmap)
              (define-fringe-bitmap 'my-flycheck-fringe-indicator
                (vector #b00000000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00011000
                        #b01111110
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b11111111
                        #b01111110
                        #b00011000
                        #b00000000
                        #b00000000
                        #b00000000
                        #b00000000)))


            (flycheck-define-error-level 'error
              :overlay-category 'flycheck-error-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-error)

            (flycheck-define-error-level 'warning
              :overlay-category 'flycheck-warning-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-warning)

            (flycheck-define-error-level 'info
              :overlay-category 'flycheck-info-overlay
              :fringe-bitmap 'my-flycheck-fringe-indicator
              :fringe-face 'flycheck-fringe-info)
            ))
#+END_SRC

Use [[https://github.com/yasuyk/helm-flycheck][helm-flycheck]] because reasons.

#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :after flycheck
  :config (progn
            (bind-key "C-c f h" #'helm-flycheck flycheck-mode-map)))
#+END_SRC

[[https://raw.githubusercontent.com/flycheck/flycheck-pos-tip/master/screenshot.png]]

Use [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] to display hints about potential issues.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :after flycheck
  :init (progn
          ;; flycheck errors on a tooltip (doesnt work on console)
          (with-eval-after-load 'flycheck
            (flycheck-pos-tip-mode))))
#+END_SRC

*** Comments

Comments, as I mean, using [[https://github.com/remyferre/comment-dwim-2][comment-dwim-2]].

#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :bind ("M-;" . comment-dwim-2)
  :config (setq cd2/region-command #'cd2/comment-or-uncomment-region))
#+END_SRC

Make bug references in comments and string clickable

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'bug-reference-prog-mode)
#+END_SRC

*** Indenting

**** Obey Project Rules

[[https://github.com/jscheid/dtrt-indent][drt-indent]] guesses the indentation offset originally used for creating source code files and transparently adjusts the corresponding settings in Emacs, making it more convenient to edit foreign files.

#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :blackout dtrt-indent-mode
  :config (progn (dtrt-indent-global-mode t)))
#+END_SRC

**** Agressive Indenting

[[https://github.com/Bruce-Connor/aggressive-indent-mode][aggressive-indent-mode]] for … aggressive indenting.

[[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif]] ([[https://github.com/Malabarba/aggressive-indent-mode/raw/master/c-example.gif][source]])

Enable it on a per-project basis in order to keep RC check ins clean: use it in own projects but not necessarily in projects where not the main contributor. Use =.dir-locals.el= to enable it, e.g.:

#+BEGIN_SRC emacs-lisp :tangle no
((c-mode . ((aggressive-indent-mode t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
            (unbind-key "C-c C-q" aggressive-indent-mode-map))
  :blackout aggressive-indent-mode)
#+END_SRC

*** Trailing whitespace

[[https://github.com/lewang/ws-butler][ws-buttler]] for not leaving trailing white spaces without being that guy™.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :blackout ws-butler-mode
  :config (progn
            ;; adding it to prog-mode-hook causes problems for emacsclient
            (add-hook 'c-mode-common-hook   #'ws-butler-mode)
            (add-hook 'python-mode-hook     #'ws-butler-mode)
            (add-hook 'cython-mode-hook     #'ws-butler-mode)
            (add-hook 'LaTeX-mode-hook      #'ws-butler-mode)
            (add-hook 'emacs-lisp-mode-hook #'ws-butler-mode)
            ))
#+END_SRC

*** Highlight FIXME and friends

#+BEGIN_SRC emacs-lisp
(defun malb/fixme-highlight ()
  (font-lock-add-keywords nil
                          '(("\\<\\(FIXME\\|BUG\\|TODO\\|HACK\\|NOTE\\)" 1
                             font-lock-warning-face t))))

(add-hook 'prog-mode-hook #'malb/fixme-highlight)
(add-hook 'python-mode-hook #'malb/fixme-highlight)
#+END_SRC

*** Which Function

Show function in mode-line ([[https://github.com/howardabrams/dot-files/blob/master/emacs-mode-line.org][source]])

#+BEGIN_SRC emacs-lisp
(use-package which-func
  :config (progn
            (which-function-mode 1)
            (setq which-func-unknown ""
                  which-func-maxout 1024
                  which-func-modes '(latex-mode
                                     markdown-mode
                                     c-mode
                                     emacs-lisp-mode
                                     org-mode
                                     c++-mode))

            (setq which-func-format
                  `(" "
                    (:propertize which-func-current local-map
                                 (keymap
                                  (mode-line keymap
                                             (mouse-3 . end-of-defun)
                                             (mouse-2 . narrow-to-defun)
                                             (mouse-1 . beginning-of-defun)))
                                 face which-func
                                 mouse-face mode-line-highlight
                                 help-echo "mouse-1: go to beginning\n\
mouse-2: toggle rest visibility\n\
mouse-3: go to end")
                    " "))
            ))
#+END_SRC

*** Highlight Symbols

[[https://github.com/wolray/symbol-overlay][symbol-overlay]] for highlighting symbols.

#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay
  :bind ("M-s h ." . symbol-overlay-put)
  :config (setq symbol-overlay-faces '((t (:background "#b58900" :foreground "black"))
                                       (t (:background "#cb4b16" :foreground "white"))
                                       (t (:background "#dc322f" :foreground "white"))
                                       (t (:background "#d33682" :foreground "white"))
                                       (t (:background "#6c71c4" :foreground "white"))
                                       (t (:background "#268bd2" :foreground "white"))
                                       (t (:background "#2aa198" :foreground "black"))
                                       (t (:background "#859900" :foreground "black")))))
#+END_SRC

*** Looking Stuff Up (Dash)

[[https://github.com/areina/helm-dash][helm-dash]] package uses Dash docsets inside emacs to browse documentation.

#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :bind ("C-c h ." . helm-dash-at-point)
  :config (progn
            (setq helm-dash-common-docsets '("Python_3"
                                             "C++"
                                             "C"
                                             "Emacs_Lisp"
                                             "Bash"
                                             "Docker"
                                             "Go"
                                             "Java_SE12"
                                             "LaTeX"
                                             "HTML"
                                             "Markdown"
                                             "NumPy"
                                             "Flask"
                                             "SQLAlchemy"
                                             "SQLite"
                                             "Bootstrap_4"
                                             "Font_Awesome"
                                             )
                  helm-dash-browser-func 'eww)))
#+END_SRC

[[http://puntoblogspot.blogspot.de/2016/02/with-this-little-trick-helm-dash-gets.html][Tip:]] =C-c C-f= aka =helm-follow-mode= is your friend.

*** GNU Global

Use GNU Global for Java ([[https://tuhdo.github.io/c-ide.html][source]]) and optionally for C++

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :config (progn  (add-hook 'c-mode-common-hook
                            (lambda ()
                              (ggtags-mode t)))

                  (unbind-key "M-." ggtags-mode-map)
                  (unbind-key "M-," ggtags-mode-map)
                  (unbind-key "C-M-." ggtags-mode-map)
                  (bind-key "C-c j g s" #'ggtags-find-other-symbol ggtags-mode-map)
                  (bind-key "C-c j g h" #'ggtags-view-tag-history ggtags-mode-map)
                  (bind-key "C-c j g r" #'ggtags-find-reference ggtags-mode-map)
                  (bind-key "C-c j g f" #'ggtags-find-file ggtags-mode-map)
                  (bind-key "C-c j g c" #'ggtags-create-tags ggtags-mode-map)
                  (bind-key "C-c j g u" #'ggtags-update-tags ggtags-mode-map)))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :init (setq helm-gtags-prefix-key "\C-cjg")
  :blackout helm-gtags-mode
  :config (progn  (setq helm-gtags-ignore-case t
                        helm-gtags-auto-update t
                        helm-gtags-use-input-at-cursor t
                        helm-gtags-pulse-at-cursor t)

                  (add-hook 'c-mode-common-hook #'helm-gtags-mode)

                  (bind-key "C-c j g a" #'helm-gtags-tags-in-this-function helm-gtags-mode-map)
                  (bind-key "C-c j g j" #'helm-gtags-select helm-gtags-mode-map)
                  (bind-key "C-c j g ." #'helm-gtags-dwim helm-gtags-mode-map)
                  (bind-key "C-c j g ," #'helm-gtags-pop-stack helm-gtags-mode-map)
                  (bind-key "C-c j g <"   #'helm-gtags-previous-history helm-gtags-mode-map)
                  (bind-key "C-c j g >"   #'helm-gtags-next-history helm-gtags-mode-map)))
#+END_SRC

*** Dump Jump

zero-config [[https://github.com/jacktasia/dumb-jump][jump to definition]] for JavaScript, Emacs Lisp, Python, Go, Clojure, …

- =dumb-jump-go= =C-c j d .= core functionality. Attempts to jump to the definition for the thing under point
- =dumb-jump-back= =C-c j d ,= jumps back to where you were when you jumped. These are chained so if you go down a rabbit hole you can get back out or where you want to be.
- =dumb-jump-quick-look= =C-c j d q= like =dumb-jump-go= but shows tooltip with file, line, and context

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :config (progn
            (setq dumb-jump-selector 'helm)
            (unbind-key "C-M-g" dumb-jump-mode-map)
            (unbind-key "C-M-p" dumb-jump-mode-map)
            (unbind-key "C-M-q" dumb-jump-mode-map)
            (bind-key "C-c j d ." #'dumb-jump-go dumb-jump-mode-map)
            (bind-key "C-c j d ," #'dumb-jump-back dumb-jump-mode-map)
            (bind-key "C-c j d q" #'dumb-jump-quick-look dumb-jump-mode-map)
            (dumb-jump-mode)))
#+END_SRC

*** Smart Jump

#+BEGIN_QUOTE
This packages tries to smartly go to definition leveraging several methods to do so. If one method fails, this package will go on to the next one, eventually falling back to dumb-jump. — [[https://github.com/jojojames/smart-jump][smart-jump]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package smart-jump
  :config (smart-jump-setup-default-registers))
#+END_SRC

*** Debuggers

[[https://github.com/realgud/realgud][All the debuggers]]

#+BEGIN_SRC emacs-lisp
(use-package realgud
  :commands (realgud:pdb realgud:ipdb realgud:trepan2 realgud:gdb)
  :config (progn
            (setq realgud:pdb-command-name "python -m pdb")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq gdb-find-source-frame t
      gdb-many-windows t)
#+END_SRC

*** CamelCase

#+BEGIN_SRC emacs-lisp
(use-package string-inflection)
#+END_SRC

*** Code Formatting

#+BEGIN_QUOTE
Auto-format source code in many languages with one command – [[https://github.com/lassik/emacs-format-all-the-code][format-all]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package format-all)
#+END_SRC

*** Jupyter

[[https://github.com/dzop/emacs-jupyter][emacs-jupyter]] is an Emacs frontend to Jupyter kernels

#+BEGIN_SRC emacs-lisp
(use-package jupyter
  :commands (jupyter-run-server-repl
             jupyter-run-repl
             jupyter-server-list-kernels)
  :defer 2
  :bind (:map jupyter-repl-mode-map
              ("M-<up>" . jupyter-repl-history-previous)
              ("C-<up>" . jupyter-repl-history-previous)
              ("M-<down>" . jupyter-repl-history-next)
              ("C-<down>" . jupyter-repl-history-next))
  :init (eval-after-load 'jupyter-org-extensions
          '(unbind-key "C-c h" jupyter-org-interaction-mode-map)))
#+END_SRC

#+begin_src emacs-lisp
(defun malb/previous-org-jupyter-kernel ()
  (save-excursion
    (if (re-search-backward " :kernel \\(\\w+\\)" nil t)
        (substring-no-properties (match-string 1))
      "sagemath")))
#+end_src

**** Tips

- We can [[https://janakiev.com/blog/jupyter-virtual-envs/][add virtual environments as Jupyter kernels]] like this:

  #+begin_example shell
(env) pip install ipykernel
(env) python -m ipykernel install --user --name=env
  #+end_example

- It also works over Tramp

*** Language Server Protocol (LSP)

#+BEGIN_QUOTE
The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc. – https://microsoft.github.io/language-server-protocol/
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :after (projectile)
  :commands lsp
  :bind (:map lsp-mode-map
         ("M-r" . lsp-find-references))
  :config (progn (setq lsp-eldoc-render-all nil
                       lsp-prefer-flymake nil)
                 (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after (lsp-mode)
  :config (progn
            (setq lsp-ui-sideline-enable nil
                  lsp-ui-sideline-ignore-duplicate t)

            (setq lsp-ui-peek-enable t)
            ;; register the defaults which will call out to ccls
            (smart-jump-register :modes '(c-mode c++-mode)
                                 :async 2000
                                 :order 1)

            (setq lsp-ui-imenu-enable t)
            (setq lsp-ui-doc-enable nil)
            (setq lsp-ui-flycheck-enable t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm-lsp
  :config (progn
            (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
            (add-to-list 'helm-commands-using-frame #'helm-lsp-workspace-symbol)
            (add-to-list 'helm-commands-using-frame #'helm-lsp-global-workspace-symbo)))
#+END_SRC

** C/C++ Development

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :config (progn
            (add-hook 'c-mode-common-hook #'malb/c-mode-common-hook)
            (add-hook 'c-mode-common-hook #'hs-minor-mode)
            (add-hook 'c-mode-common-hook 'display-line-numbers-mode)
            (bind-key "<home>"  #'malb/beginning-of-line-dwim c-mode-base-map)
            (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))))
#+END_SRC

*** Language Server Protocol (LSP)

#+BEGIN_QUOTE
C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting – https://github.com/MaskRay/ccls
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ccls
  :init (progn
          (defun malb/ccls-enable ()
            (condition-case nil
                (if (buffer-file-name)
                    (lsp))
              (user-error nil)))

          (add-hook 'c-mode-hook #'malb/ccls-enable)
          (add-hook 'c++-mode-hook #'malb/ccls-enable)
          ))
#+END_SRC

*** Font Lock

Grey out ~#if 0~ blocks.

#+BEGIN_SRC emacs-lisp
(defun malb/c-mode-font-lock-if0 (limit)
  (save-restriction
    (widen)
    (save-excursion
      (goto-char (point-min))
      (let ((depth 0) str start start-depth)
        (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
          (setq str (match-string 1))
          (if (string= str "if")
              (progn
                (setq depth (1+ depth))
                (when (and (null start) (looking-at "\\s-+0"))
                  (setq start (match-end 0)
                        start-depth depth)))
            (when (and start (= depth start-depth))
              (c-put-font-lock-face start (match-beginning 0) 'font-lock-comment-face)
              (setq start nil))
            (when (string= str "endif")
              (setq depth (1- depth)))))
        (when (and start (> depth 0))
          (c-put-font-lock-face start (point) 'font-lock-comment-face)))))
  nil)

(defun malb/c-mode-common-hook ()
  (font-lock-add-keywords  nil
                           '((malb/c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))
#+END_SRC

Highlight member functions in C/C++ ([[https://www.reddit.com/r/emacs/comments/27eqwm/highlighting_c_member_function_calls/][source]])

#+BEGIN_SRC emacs-lisp
(dolist (major-mode '(c-mode c++-mode))
  (font-lock-add-keywords major-mode
                          `((,(concat
                               "\\<[_a-zA-Z][_a-zA-Z0-9]*\\>"       ; Object identifier
                               "\\s *"                              ; Optional white space
                               "\\(?:\\.\\|->\\)"                   ; Member access
                               "\\s *"                              ; Optional white space
                               "\\<\\([_a-zA-Z][_a-zA-Z0-9]*\\)\\>" ; Member identifier
                               "\\s *"                              ; Optional white space
                               "(")                                 ; Paren for method invocation
                             1 'font-lock-function-name-face t))))
#+END_SRC

Modern C++

#+BEGIN_SRC emacs-lisp
(use-package modern-cpp-font-lock
  :blackout modern-c++-font-lock-mode
  :config (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))
#+END_SRC

*** Valgrind

This code allows to run [[http://valgrind.org/][valgrind]] and step through warnings/errors. We set =--error-errorcode=1= because we bury compilation buffers that finish with exit code zero automatically. By default, valgrind returns the exit code of the program it runs. ([[https://github.com/codemac/config/blob/master/emacs.d/boot.org][source]])

#+BEGIN_SRC emacs-lisp
(require 'compile "compile")

(defgroup valgrind nil
  "Run valgrind as inferior of Emacs, parse error messages."
  :group 'tools
  :group 'processes)


(defcustom valgrind-command "valgrind --error-exitcode=1 --leak-check=full"
  "*Last shell command used to run valgrind; default for next valgrind run.

Sometimes it is useful for files to supply local values for this variable.
You might also use mode hooks to specify it in certain modes, like this:

    (add-hook 'c-mode-hook
       (lambda ()
         (unless (or (file-exists-p \"makefile\")
                     (file-exists-p \"Makefile\"))
           (set (make-local-variable 'valgrind-command)
                (concat \"make -k \"
                        (file-name-sans-extension buffer-file-name))))))"
  :type 'string
  :group 'valgrind)

;; History of compile commands.
(defvar valgrind-history nil)

(defun valgrind (command)
  "Run valgrind.
Runs COMMAND, a shell command, in a separate process asynchronously
with output going to the buffer `*valgrind*'.

You can then use the command [next-error] to find the next error message
and move to the source code that caused it."
  (interactive
   (if (or compilation-read-command current-prefix-arg)
       (list (read-from-minibuffer "Valgrind command: "
                                   (eval valgrind-command) nil nil
                                   '(valgrind-history . 1)))
     (list (eval valgrind-command))))
  (unless (equal command (eval valgrind-command))
    (setq valgrind-command command))
  (compilation-start command t))
#+END_SRC

*** Clang Format

Use [[http://clang.llvm.org/docs/ClangFormat.html][clang-format]] to … format code, [[https://github.com/SavchenkoValeriy/emacs-clang-format-plus][clang-format+]] automatically runs =clang-format= when a =.clang-format= is present.

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :config (progn
            (setq clang-format-executable "clang-format")))

(use-package clang-format+
  :config (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC

*** Disassemble

#+BEGIN_SRC emacs-lisp
(use-package disaster)
#+END_SRC

** Golang

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go$"
  :interpreter "go"
  :config (add-hook 'go-mode-hook #'flycheck-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :hook (go-mode . go-eldoc-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :commands (go-guru-describe go-guru-freevars go-guru-implements go-guru-peers
                              go-guru-referrers go-guru-definition go-guru-pointsto
                              go-guru-callstack go-guru-whicherrs go-guru-callers go-guru-callees
                              go-guru-expand-region)
  :config (unless (executable-find "guru")
            (warn "go-mode: couldn't find guru, refactoring commands won't work")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gorepl-mode
  :commands (gorepl-run gorepl-run-load-current-file)
  :config (unless (executable-find "gore")
            (warn "go-mode: couldn't find gore, REPL support disabled")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-go
  :init (setq command-go-gocode-command "gocode"
              company-go-show-annotation t)
  :after go-mode
  :config (if (executable-find command-go-gocode-command)
              (add-to-list 'company-backends #'company-go)
            (warn "go-mode: couldn't find gocode, code completion won't work")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gotest
  :bind (:map go-mode-map
              ("C-c a" . go-test-current-project)
              ("C-c m" . go-test-current-file)
              ("C-c ." . go-test-current-test)
              ("C-c b" . go-run)
              ("C-h f" . godoc-at-point)))
#+END_SRC

#+BEGIN_QUOTE
Go Projectile is a set of Go language related add-ons for the Emacs Projectile mode. — https://github.com/dougm/go-projectile
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
;; (use-package go-projectile
;;   :after projectile)
#+END_SRC

****** TODO run-hooks: Symbol’s value as variable is void: projectile-go-function

** Python

We use the “onetwo” style to fill docstrings in Python, i.e.:

#+BEGIN_SRC python :tangle no
"""Process foo, return bar."""

"""
Process foo, return bar.

If processing fails throw ProcessingError.

"""
#+END_SRC

I often restart Python processes (Cython development), so let’s bind a key for that.

#+BEGIN_SRC emacs-lisp
(use-package python
  :mode (("\\.py\\'" . python-mode))
  :bind (:map python-mode-map
              ("C-c C-c" . elpy-shell-send-region-or-buffer)
              ("C-c C-r" . pyvenv-restart-python)
              ("<home>"  . malb/beginning-of-line-dwim)
              ("C-<tab>" . bicycle-cycle)
              ("<backtab>" . bicycle-cycle-global)
              :map inferior-python-mode-map
              ("C-c C-r" . pyvenv-restart-python))
  :hook (python-mode . outline-minor-mode)
  :config (progn
            (setq-default python-indent 4
                          python-fill-docstring-style 'django)

            (setq python-shell-interpreter "jupyter"
                  python-shell-interpreter-args "console --simple-prompt"
                  python-shell-prompt-detect-failure-warning nil)

            (defun malb/python-mode-hook ()
              (setq-local outline-blank-line t))

            (add-hook 'python-mode-hook #'malb/python-mode-hook)

            (defun malb/inferior-python-setup ()
              (make-local-variable 'company-backends)
              (setq company-backends '(company-files company-capf)))

            (add-hook 'inferior-python-mode-hook #'malb/inferior-python-setup)

            ;; http://emacs.stackexchange.com/a/21186/8930
            (add-to-list 'python-indent-trigger-commands 'malb/indent-fold-or-complete)
            (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")))
#+END_SRC

Create an iPython based toggle shell (consider using jupyter here)

#+BEGIN_SRC emacs-lisp
(defun malb/make-ipython-shell (shell-name virtual-env &optional venv-vars post-exec per-project)
  `(lambda (arg)
     (interactive "P")
     (let ((project-venv-vars ,venv-vars))
       (conda-env-activate ,virtual-env))
     (let* ((name   (if (and (not arg) ,per-project)
                        (concat "*" ,shell-name
                                "[" (if (projectile-project-p)
                                        (projectile-project-name)
                                      (car (last (split-string parent "/" t)))) "]" "*")
                      (concat "*" ,shell-name "*")))
            (height (/ (window-total-height) 3))
            (window (get-buffer-window name)))
       (if (and window (<= (window-height window) (/ (frame-height) 3)))
           (progn
             (select-window window)
             (delete-window))
         (progn
           (if (get-buffer name)
               (progn
                 (split-window-vertically (- height))
                 (other-window 1)
                 (switch-to-buffer name)
                 (set-window-dedicated-p (get-buffer-window (current-buffer)) t))
             (progn
               (let* ((buffer (python-shell-make-comint (python-shell-calculate-command)
                                                        (replace-regexp-in-string "\*" "" name))))
                 (display-buffer buffer '((display-buffer-reuse-window display-buffer-in-side-window) .
                                          ((reusable-frames . visible)
                                           (side            . bottom)
                                           (window-height   . 0.3))))
                 (select-window (get-buffer-window buffer))
                 (set-window-dedicated-p (get-buffer-window (current-buffer)) t)
                 (dolist (cmd ,post-exec)
                   (insert (concat cmd "\n")))
                 ))))))))
#+END_SRC

*** Highlight indentation

It makes sense to highlight indentation in Python.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
  :blackout highlight-indentation-mode
  :config (progn (add-hook 'python-mode-hook #'highlight-indentation-mode)))
#+END_SRC

*** Autocompletion

Use [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] for auto-completion and stuff, it runs [[https://github.com/tkf/emacs-jedi][jedi]] for us. In particular it offers:

|---------+----------------------------------|
| ~M-.~   | =anaconda-mode-complete=         |
| ~M-,​~   | =anaconda-mode-find-assignments= |
| ~M-r~   | =anaconda-mode-find-references=  |
| ~M-*~   | =xref-pop-marker-stack=                               |
| ~M-?~   | =anaconda-mode-show-doc=         |
|---------+----------------------------------|

Fall back to dumb jump if anaconda fails.

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :after smart-jump
  :blackout anaconda-mode
  :config (progn

            (defun malb/local-anaconda-mode ()
              (when (and (buffer-file-name)
                         (not (file-remote-p (buffer-file-name))))
                (anaconda-mode)))

            (add-hook 'python-mode-hook #'malb/local-anaconda-mode)

            (defun malb/local-anaconda-eldoc-mode ()
              (when (and (buffer-file-name)
                         (not (file-remote-p (buffer-file-name))))
                (anaconda-eldoc-mode)))

            (add-hook 'python-mode-hook #'malb/local-anaconda-eldoc-mode)

            (defun malb/vanilla-python-shell-interpreter (orig-fun &rest args)
              (let ((python-shell-interpreter "python")
                    (python-shell-interpreter-args "-i"))
                (apply orig-fun args)))

            (advice-add 'anaconda-mode-start :around #'malb/vanilla-python-shell-interpreter)))
#+END_SRC

*** Docstrings
**** [[https://github.com/glyph/python-docstring-mode][Python Docstring Mode]]

#+BEGIN_QUOTE
Python docstring mode provides syntax highlighting for docstrings in both ReStructuredText and Epydoc formats, as well as an override for the fill-paragraph function when editing such a docstring that will wrap things according to Python community convention.
#+END_QUOTE

Manually fixed bugs:

- [[https://github.com/glyph/python-docstring-mode/issues/9][Problems locating `docstring_wrap.py` #9]]

#+BEGIN_SRC emacs-lisp
(use-package python-docstring
  :blackout python-docstring-mode
  :hook (python-mode . python-docstring-mode))
#+END_SRC

**** [[https://github.com/naiquevin/sphinx-doc.el][Sphinx Doc]]

An emacs minor mode for inserting docstring skeleton for Python functions and methods (=C-c M-d=). The structure of the docstring is as per the requirement of the Sphinx documentation generator.

#+BEGIN_SRC emacs-lisp
(use-package sphinx-doc
  :blackout sphinx-doc-mode
  :hook (python-mode . sphinx-doc-mode))
#+END_SRC

*** Cython

#+BEGIN_SRC emacs-lisp
(use-package cython-mode
  :mode (("\\.pyx\\'"  . cython-mode)
         ("\\.spyx\\'" . cython-mode)
         ("\\.pxd\\'"  . cython-mode)
         ("\\.pxi\\'"  . cython-mode)))
#+END_SRC

[[https://github.com/lbolla/emacs-flycheck-cython][Flycheck for Cython]]

#+BEGIN_SRC emacs-lisp
(use-package flycheck-cython
  :after (cython-mode flycheck))
#+END_SRC

*** Black

Code formatting “do what they want”: [[https://github.com/psf/black][https://github.com/psf/black]]

#+BEGIN_SRC emacs-lisp
(use-package blacken
  :config (setq blacken-line-length 'fill))
#+END_SRC

*** Managing Imports

[[https://github.com/anachronic/importmagic.el][importmagic]] tries to guess how to add missing imports. You need to install =importmagic= and =epc= for it work.

#+BEGIN_SRC shell :tangle no
pip install importmagic epc
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package importmagic
  :blackout importmagic-mode
  :hook (python-mode-hook . importmagic-mode)
  :config (setq importmagic-python-interpreter "python"))
#+END_SRC

[[https://github.com/timothycrosley/isort][isort]] sorts Python imports. You need to install =isort= first.

#+begin_example shell :tangle no
pip install isort
#+end_example

#+BEGIN_SRC emacs-lisp
(use-package py-isort
  :config (setq py-isort-options '("--lines=120")))
#+END_SRC

*** ElPy

#+BEGIN_QUOTE
[[https://github.com/jorgenschaefer/elpy][Elpy]] is an Emacs package to bring powerful Python editing to Emacs. It combines a number of other packages, both written in Emacs Lisp as well as Python.
#+END_QUOTE

Elpy is quite opinionated and we don’t necessarily share all those opinions. Hence, we only enable a small subset.

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :bind (:map python-mode-map ("C-c C-c" . elpy-shell-send-region-or-buffer))
  :commands (elpy-shell-send-region-or-buffer elpy-module-yasnippet elpy-module-sane-defaults)
  :config (progn
            (elpy-module-yasnippet 'global-init)
            (defun malb/elpy-sane-defaults ()
              (elpy-module-sane-defaults 'buffer-init))
            (add-hook 'python-mode-hook #'malb/elpy-sane-defaults)))
#+END_SRC

*** Pip

#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)
#+END_SRC

*** Virtual Environments

#+begin_src emacs-lisp
(use-package conda
  :custom (conda-anaconda-home "/opt/conda/")
  :config (progn
            (conda-env-initialize-interactive-shells)
            (conda-env-initialize-eshell)
            (conda-env-autoactivate-mode t)
            (setq conda-env-home-directory (expand-file-name "~/.conda/")
                  conda-message-on-environment-switch nil)))
#+end_src

** Sage

Enable [[https://github.com/stakemori/sage-shell-mode][sage-shell-mode]] for running [[http://sagemath.org][Sage]] from within Emacs. It’s available on MELPA and hence easier to keep around when we switch Sage installs all the time. To edit a file in sage-shell-mode put ~# -*- mode: sage-shell:sage -*-~ on top.

#+BEGIN_SRC emacs-lisp
(use-package sage-shell-mode
  :custom ((sage-shell:use-simple-prompt t)
           (sage-shell:use-prompt-toolkit nil)
           (sage-shell:set-ipython-version-on-startup nil)
           (sage-shell:check-ipython-version-on-startup nil))
  :config (progn
            (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode)
            (add-hook 'sage-shell-mode-hook #'eldoc-mode)
            (add-hook 'sage-shell-after-prompt-hook #'sage-shell-view-mode)

            (setq sage-shell-view-default-commands 'plots
                  sage-shell-view-scale 1.5
                  sage-shell-view-default-resolution 180)

            (setq sage-shell:input-history-cache-file (concat user-emacs-directory "sage_shell_input_history")
                  sage-shell:sage-executable malb/sage-executable
                  ac-sage-show-quick-help t)

            (fset 'malb/toggle-sage
                  (malb/make-toggle-shell "*Sage*"
                                          '(progn
                                             (conda-env-deactivate)
                                             (sage-shell:run-sage "sage --simple-prompt"))
                                          nil
                                          nil))

            (advice-add 'sage-shell:send-eof :around  #'malb/kill-buffer)
            (advice-add 'sage-shell:run-sage :before (lambda (cmd)
                                                       (conda-env-deactivate)))

            (bind-key "C-<up>" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "C-<down>" #'comint-next-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-p" #'comint-previous-matching-input-from-input sage-shell-mode-map)
            (bind-key "M-n" #'comint-next-matching-input-from-input sage-shell-mode-map)
            (bind-key "C-<return>" #'auto-complete sage-shell:sage-mode-map)))
#+END_SRC

org babel for Sage can be quite handy for writing talks etc. ([[https://github.com/stakemori/ob-sagemath][source]])

#+BEGIN_SRC emacs-lisp
(use-package ob-sagemath
  :config (progn
            (setq org-babel-default-header-args:sage '((:session . t)
                                                       (:results . "output replace")
                                                       (:exports . "both")
                                                       (:eval . "never-export")
                                                       (:cache .   "no")
                                                       (:noweb . "no")
                                                       (:hlines . "no")
                                                       (:tangle . "no")))))
#+END_SRC

** Lisp

[[https://imgs.xkcd.com/comics/lisp_cycles.png]]

*** General

#+BEGIN_QUOTE
short and sweet LISP editing ([[https://github.com/abo-abo/lispy][source]])
#+END_QUOTE

Basic navigation by-list and by-region:

| binding | command                                      |
|---------+----------------------------------------------|
| ~h~     | moves left                                   |
| ~j~     | moves down                                   |
| ~k~     | moves up                                     |
| ~l~     | moves right                                  |
| ~f~     | steps inside the list                        |
| ~b~     | moves back in history for all above commands |
| ~d~     | moves to different side of sexp              |

Paredit transformations, callable by plain letters:

| binding | command    |
|---------+------------|
| ~>~     | slurps     |
| ~<~     | barfs      |
| ~r~     | raises     |
| ~C~     | convolutes |
| ~s~     | moves down |
| ~w~     | moves up   |

IDE-like features for Elisp, Clojure, Scheme, Common Lisp, Hy, Python and Julia:

| binding | command                                                          |
|---------+------------------------------------------------------------------|
| ~e~     | evals                                                            |
| ~E~     | evals and inserts                                                |
| ~g~     | jumps to any tag in the current directory with semantic          |
| ~G~     | jumps to any tag in the current file                             |
| ~M-.~   | jumps to symbol, ~M-~, jumps back                                |
| ~F~     | jumps to symbol, ~D~ jumps back                                  |
| ~C-1~   | shows documentation in an overlay                                |
| ~C-2~   | shows arguments in an overlay                                    |
| ~Z~     | breaks out of edebug, while storing current function's arguments |

Code manipulation:

| binding | command                                                                 |
|---------+-------------------------------------------------------------------------|
| ~i~     | prettifies code (remove extra space, hanging parens ...)                |
| ~xi~    | transforms cond expression to equivalent if expressions                 |
| ~xc~    | transforms if expressions to an equivalent cond expression              |
| ~xf~    | flattens function or macro call (extract body and substitute arguments) |
| ~xr~    | evals and replaces                                                      |
| ~xl~    | turns current defun into a lambda                                       |
| ~xd~    | turns current lambda into a defun                                       |
| ~O~     | formats the code into one line                                          |
| ~M~     | formats the code into multiple lines                                    |

#+BEGIN_SRC emacs-lisp
(use-package lispy
   :hook (lisp-data-mode . lispy-mode))
#+END_SRC

[[https://raw.githubusercontent.com/cpitclaudel/easy-escape/master/img/easy-escape.png]]

#+BEGIN_SRC emacs-lisp
(use-package easy-escape
  :hook ((emacs-lisp-mode lisp-mode) . easy-escape-minor-mode))
#+END_SRC

*** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :bind (:map emacs-lisp-mode-map
              ("C-c C-z" . ielm)
              ("C-c C-c" . eval-defun)
              ("C-c C-b" . eval-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :blackout elisp-slime-nav-mode
  :config (progn

            (defun malb/elisp-hook ()
              (elisp-slime-nav-mode)
              (smartparens-strict-mode)
              (eldoc-mode)
              (lispy-mode 1))

            (setq eldoc-idle-delay 0.3)

            (add-hook 'emacs-lisp-mode-hook #'malb/elisp-hook)
            (add-hook 'lisp-interaction-mode-hook #'malb/elisp-hook)
            (add-hook 'ielm-mode-hook #'elisp-slime-nav-mode)
            (add-hook 'ielm-mode-hook #'smartparens-strict-mode)
            (add-hook 'ielm-mode-hook #'eldoc-mode)

            (bind-key "M-?" #'elisp-slime-nav-describe-elisp-thing-at-point
                      emacs-lisp-mode-map)))
#+END_SRC

[[http://emacsredux.com/blog/2016/03/02/pimp-my-minibuffer/][Eldoc in minibuffer eval]].

#+BEGIN_SRC emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+END_SRC

[[https://github.com/Wilfred/suggest.el][suggest.el]] is an Emacs package for discovering elisp functions based on examples.

#+BEGIN_SRC emacs-lisp
(use-package suggest)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'hs-minor-mode)
#+END_SRC

*** Hy

#+BEGIN_SRC emacs-lisp
(use-package hy-mode
  :mode "\\.hy\\'"
  :hook (hy-mode . lispy-mode))
#+END_SRC

** Web

[[http://web-mode.org/web-mode.png?v=5]]

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\\.html?\\\'"
  :after pandoc
  :config (progn
            (setq web-mode-enable-engine-detection t)
            (add-to-list 'pandoc-major-modes '(web-mode . "html"))))
#+END_SRC

* Prose
** General
*** Tab Completion

Use less tab completion in prose. ([[http://endlessparentheses.com/tab-completion-for-prose.html][souce]])

#+BEGIN_SRC emacs-lisp
(defun malb/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 3)
  (setq-local company-idle-delay 0.5))

(add-hook 'text-mode-hook #'malb/config-prose-completion)
#+END_SRC

*** Line Wrapping

Put everything back on one line if =M-q= is pressed twice and use ~visual-line-mode~ to do the work of wrapping text for us. ([[http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html?source=rss][source]])

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook #'turn-on-visual-line-mode)
(blackout 'visual-line-mode)

(defun malb/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'malb/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(defun malb/org-fill-or-unfill ()
  "Like `org-fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'malb/org-fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'org-fill-paragraph)))

(bind-key [remap fill-paragraph] #'malb/fill-or-unfill)
(bind-key "M-q" #'malb/org-fill-or-unfill org-mode-map)
#+END_SRC

Indent correctly in ~visual-line-mode~ (~org-mode~ has its own thing).

#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :config (progn
            (add-hook 'markdown-mode-hook #'adaptive-wrap-prefix-mode)
            (add-hook 'LaTeX-mode-hook #'adaptive-wrap-prefix-mode)))
#+END_SRC

Allow for a bit more characters per line by default.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 100)
#+END_SRC

For some modes we want resp. less wrapping width.

#+BEGIN_SRC emacs-lisp
(defun malb/fill-column-32768 ()
  (set-fill-column 32768))

(defun malb/fill-column-72 ()
  (set-fill-column 72))
#+END_SRC

Indicate soft wrapped lines.

#+BEGIN_SRC emacs-lisp
(setq visual-line-fringe-indicators '(nil right-curly-arrow))
#+END_SRC

*** Typography

[[https://github.com/jorgenschaefer/typoel][typo]] is a minor mode that will change a number of normal keys to make them insert typographically useful unicode characters. Some of those keys can be used repeatedly to cycle through variations. This includes in particular quotation marks and dashes.

#+BEGIN_SRC emacs-lisp
(use-package typo
  :blackout typo-mode
  :config (progn
            (typo-global-mode)
            (setq-default typo-language "English")

            (defun malb/typo-in-src-block ()
              (memq (face-at-point) '(org-block
                                      font-lock-string-face
                                      font-lock-comment-face
                                      markdown-code-face)))

            (add-to-list 'typo-disable-electricity-functions #'malb/typo-in-src-block)

            (add-hook 'org-mode-hook #'typo-mode)))
#+END_SRC

*** Visual Fill Column Mode

[[https://github.com/joostkremers/visual-fill-column][soft wrap at fill-column]]

([[http://www.lunaryorn.com/posts/center-buffer-text-in-emacs.html][source]])

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :commands (visual-fill-column-mode turn-on-visual-fill-column-mode)
  :config (progn
            (setq-default visual-fill-column-center-text t
                          visual-fill-column-inhibit-sensible-window-split t
                          visual-fill-column-fringes-outside-margins nil)

            (dolist (fn '(text-scale-increase text-scale-decrease text-scale-adjust))
              (advice-add fn :after #'visual-fill-column-adjust))))
#+END_SRC

*** Sentences

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
(bind-key "C-x C-t" #'transpose-sentences)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(advice-add 'kill-sentence :after #'fixup-whitespace)
#+END_SRC

*** Highlighting Sentences & Paragraphs

Also use [[https://github.com/larstvei/Focus][focus-mode]] occationally.

[[https://raw.githubusercontent.com/larstvei/Focus/master/demo-light.gif]] ([[https://github.com/larstvei/Focus][source]])


#+BEGIN_SRC emacs-lisp
(use-package focus)
#+END_SRC

*** Spell Checking

- Replace ~’~ with ~​'​~ before sending it to ispell ([[http://endlessparentheses.com/ispell-and-apostrophes.html][source]]) *Note:* Below, we adapt "en_GB" (our default) instead of =nil= (the global default) because otherwise we [[http://endlessparentheses.com/ispell-and-apostrophes.html#comment-2258586606][can’t change dictionaries]].

- Enable/disable company completion from ispell dictionaries ([[https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-company.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :hook ((message-mode) . malb/company-ispell-setup)
  :config (progn
            (setq ispell-dictionary "en_GB"
                  ispell-silently-savep t)

            ;; Tell ispell.el that ’ can be part of a word. ;
            (setq ispell-local-dictionary-alist
                  '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]"
                     "['\x2019]" nil ("-d" "en_GB") nil utf-8)))

            ;; Don't send ’ to the subprocess.
            (defun malb/replace-apostrophe (args)
              (cons (replace-regexp-in-string
                     "’" "'" (car args))
                    (cdr args)))

            (advice-add #'ispell-send-string :filter-args #'malb/replace-apostrophe)

            ;; Convert ' back to ’ from the subprocess.
            (defun malb/replace-quote (args)
              (if (not (or (derived-mode-p 'org-mode)
                           (derived-mode-p 'markdown-mode)
                           (derived-mode-p 'rst-mode)
                           (derived-mode-p 'message-mode)))
                  args
                (cons (replace-regexp-in-string
                       "'" "’" (car args))
                      (cdr args))))

            (defun malb/company-ispell-setup ()
              (when (boundp 'company-backends)
                (make-local-variable 'company-backends)
                (setq company-backends (delete 'company-dabbrev company-backends))
                (add-to-list 'company-backends '(company-ispell :with company-yasnippet) t)
                ;; https://github.com/redguardtoo/emacs.d/issues/473
                (if (and (boundp 'ispell-alternate-dictionary)
                         ispell-alternate-dictionary)
                    (setq company-ispell-dictionary ispell-alternate-dictionary))))

            (advice-add #'ispell-parse-output :filter-args #'malb/replace-quote)))
#+END_SRC

Diminish ~flyspell-mode~ as we always use it.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :blackout
  :config (setq flyspell-issue-message-flag nil))
#+END_SRC

Use [[https://github.com/cute-jumper/ace-flyspell][ace-flyspell]] for fixing typos. I find myself pressing =C-.= in other programs these days just to be frustrated that it doesn’t just work™

#+BEGIN_SRC emacs-lisp
(use-package ace-flyspell
  :bind (("C-." . ace-flyspell-correct-word)
         :map flyspell-mode-map
         ("C-." . malb/ace-flyspell-dwim))
  :after flyspell
  :config (progn
            (setq ace-flyspell-new-word-no-query t)

            (defun malb/ace-flyspell-dwim (arg)
              "Run `ace-flyspell-dim` unless prefix argument is given. In that case offer a word to insert."
              (interactive "P")
              (if arg
                  (progn
                    (ace-flyspell-jump-word)
                    (ace-flyspell--insert-word))
                (ace-flyspell-dwim)))

            (unbind-key "C-;" flyspell-mode-map)))
#+END_SRC

Automatically pick dictionary.

#+BEGIN_SRC emacs-lisp
(use-package auto-dictionary
  :disabled
  :config (progn
            (setf (cdr (rassoc "en" adict-dictionary-list)) "en_GB")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package guess-language
  :commands (guess-language-buffer)
  :hook (message-mode . guess-language-mode)
  :config (setq guess-language-langcodes '((en . ("en_GB" "English"))
                                           (de . ("de_DE" "German")))
                guess-language-languages '(en de)))
#+END_SRC

*** Grammar Checking

Langtool ([[https://github.com/mhayashi1120/Emacs-langtool][source]])

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config (progn
            (setq langtool-language-tool-jar (expand-file-name "languagetool-commandline.jar"
                                                               (concat user-emacs-directory "langtool"))
                  langtool-default-language "en-GB"
                  langtool-disabled-rules '("WHITESPACE_RULE"
                                            "EN_QUOTES"
                                            "DASH_RULE"
                                            "OXFORD_SPELLING_ISE_VERBS"
                                            "OXFORD_SPELLING_NOUNS"))

            (bind-key "C-x 4 w" #'langtool-check)
            (bind-key "C-x 4 W" #'langtool-check-done)
            (bind-key "C-x 4 l" #'langtool-switch-default-language)
            (bind-key "C-x 4 4" #'langtool-show-message-at-point)
            (bind-key "C-x 4 c" #'langtool-correct-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-languagetool
  :ensure nil)
#+END_SRC

*** Synonyms

[[https://raw.githubusercontent.com/hpdeifel/synosaurus/master/screenshots/cnr.png]]

[[https://github.com/hpdeifel/synosaurus][synosaurus]]

#+BEGIN_SRC emacs-lisp
(use-package synosaurus
  :bind (("C-c w s" . synosaurus-lookup)
         ("C-c w r" . synosaurus-choose-and-replace))
  :config (progn
            (setq synosaurus-choose-method 'popup)
            (unbind-key "C-c s l" synosaurus-mode-map)
            (unbind-key "C-c s r" synosaurus-mode-map)
            (add-hook 'org-mode-hook #'synosaurus-mode)
            (add-hook 'LaTeX-mode-hook #'synosaurus-mode)))
#+END_SRC

[[https://raw.githubusercontent.com/SavchenkoValeriy/emacs-powerthesaurus/master/assets/demo.gif]]

[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][powerthesaurus]]

#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
  :bind ("C-c w p" . powerthesaurus-lookup-word-dwim))
#+END_SRC

*** Dictionary

[[https://raw.githubusercontent.com/wiki/abo-abo/define-word/images/define-word.png]]

Use [[http://oremacs.com/2015/05/22/define-word/][define-word]] to get a quick reference on a word.

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :bind (("C-c w D" . define-word-at-point)))
#+END_SRC

Use [[https://github.com/tecosaur/lexic][lexic]] for local word lookups.

#+begin_src emacs-lisp
(use-package lexic
  :commands lexic-search lexic-list-dictionary malb/define-word-at-point-lexic
  :bind (("C-c w d" . malb/define-word-at-point-lexic))
  :config (progn
            (defun malb/define-word-at-point-lexic (identifier &optional arg)
              "Look up the definition of the word at point (or selection) using `lexic-search'."
              :override #'+lookup/dictionary-definition
              (interactive
               (list (or (thing-at-point 'word)
                         (read-string "Look up in dictionary: "))
                     current-prefix-arg))
              (cl-letf (((symbol-function 'visual-fill-column-mode)
                         (lambda (&optional arg)) nil))
                (lexic-search identifier nil nil t)))))
#+end_src

*** Translating

[[https://github.com/atykhonov/google-translate][google-translate]]

#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :after google-translate-tk
  :bind ("C-c w t" . google-translate-smooth-translate)
  :init (progn
          (setq google-translate-translation-directions-alist
                '(("de" . "en") ("en" . "de")))))

;; https://github.com/atykhonov/google-translate/issues/137#issuecomment-723938431
(use-package google-translate-tk
  :ensure nil
  :config (defun google-translate--search-tkk ()
            "Search TKK."
            (list 430675 2721866130)))
#+END_SRC

** Taking Notes (Deft)

Use [[http://jblevins.org/projects/deft/][deft]] for random notes and for a listing of blog entries.

[[http://jblevins.org/projects/deft/deft-v0.6.gif]] ([[http://jblevins.org/projects/deft/deft-v0.6.gif][source]])

#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("<f8>" . malb/deft)
  :bind ("S-<f8>" . malb/blog)
  :init (progn
          (setq deft-extensions '("org" "md")
                deft-default-extension "org"
                deft-directory malb/deft-directory
                deft-text-mode 'org-mode
                deft-use-filename-as-title nil
                deft-auto-save-interval 300.0
                deft-use-filter-string-for-filename t
                deft-current-sort-method 'mtime
                deft-file-naming-rules '((noslash . "-")
                                         (nospace . "-")
                                         (case-fn . downcase)))

          (defun malb/deft-in-dir (dir)
            "Run deft in directory DIR"
            (setq deft-directory dir) ;; TODO: cannot let-bind
            (switch-to-buffer "*Deft*")
            (kill-this-buffer)
            (deft))

          (defun malb/blog ()
            (interactive)
            (let ((deft-current-sort-method 'mtime))
              (malb/deft-in-dir (expand-file-name "web/blog" malb/projects-dir))))

          (defun malb/deft ()
            (interactive)
            (malb/deft-in-dir malb/deft-directory))

          (add-hook 'deft-mode-hook #'hl-line-mode)))
#+END_SRC

** Markdown

Standard setup and quick preview ([[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-markdown.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.text\\'" . markdown-mode)
         ("README\\.md\\'" . gfm-mode))
  :config (progn
            (defvar malb/markdown.css
              (expand-file-name "themes/foghorn.css" user-emacs-directory))

            (setq markdown-command (concat
                                    "pandoc --highlight-style pygments -f markdown+smart -t html -c"
                                    malb/markdown.css)
                  markdown-css-paths (list malb/markdown.css)
                  markdown-enable-math t
                  markdown-fontify-code-blocks-natively t)

            (add-hook 'markdown-mode-hook #'flyspell-mode)
            (add-hook 'markdown-mode-hook #'outline-minor-mode)

            (bind-key "M-." #'markdown-do markdown-mode-map)

            (bind-key "C-<tab>" #'outline-cycle markdown-mode-map)))
#+END_SRC

*** Pandoc

Use [[https://joostkremers.github.io/pandoc-mode/][pandoc-mode]] to call [[http://johnmacfarlane.net/pandoc/][pandoc]] for converting markdown to everything else.

#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :config (progn
            (add-hook 'markdown-mode-hook #'conditionally-turn-on-pandoc)
            (add-hook 'org-mode-hook #'conditionally-turn-on-pandoc)
            (add-hook 'pandoc-mode-hook #'pandoc-load-default-settings)

            (defun malb/pandoc-convert (writer &optional buffer beginning end reader)
              (let* ((buffer (or buffer (current-buffer)))
                     (pandoc-buffer (get-buffer-create pandoc--output-buffer-name))
                     (begginning (or beginning (point-min)))
                     (end (or end (point-max)))
                     (reader (or reader (cdr (assq major-mode pandoc-major-modes))))
                     (text))
                (switch-to-buffer pandoc-buffer)
                (erase-buffer)
                (switch-to-buffer buffer)
                (call-process-region beginning end "pandoc" nil pandoc-buffer t
                                     "--read"
                                     reader
                                     "--write"
                                     writer
                                     "--quiet"
                                     "--wrap=none")
                (switch-to-buffer pandoc-buffer)
                (setq text (buffer-string))
                (bury-buffer)
                text))

            (defun malb/copy-as (arg)
              (interactive "P")
              (cond
               (arg
                (malb/-copy-as
                 (completing-read "Output format to use: " (mapcar 'car pandoc-output-format-extensions) nil t)))
               ((derived-mode-p 'org-mode)
                (malb/copy-as-latex-from-org))
               (t
                (malb/-copy-as "org"))))

            (defun malb/copy-as-latex-from-org ()
              (interactive)
              (if (org-region-active-p)
                  (kill-new (org-export-string-as (buffer-substring (region-beginning) (region-end)) 'latex t))
                (kill-new (org-export-string-as (buffer-substring (point-min) (point-max)) 'latex t))))

            (defun malb/copy-as-latex ()
              (interactive)
              (malb/-copy-as "latex"))

            (defun malb/copy-as-org ()
              (interactive)
              (malb/-copy-as "org"))

            (defun malb/-copy-as (what)
              (kill-new (malb/pandoc-convert what
                                             (current-buffer)
                                             (if (use-region-p) (region-beginning) (point-min))
                                             (if (use-region-p) (region-end) (point-max))))
              (deactivate-mark))

            (bind-key "M-W" #'malb/copy-as)))
#+END_SRC

** ReST

Python’s distutils [[http://bugs.python.org/issue11913][mandate]] =README.txt= or =README= in ReST. Hence, we add =README.txt= as the kind of file which wants ReST and use [[http://docutils.sourceforge.net/docs/user/emacs.html][rst-mode]] to edit it.

#+BEGIN_SRC emacs-lisp
(use-package rst
  :commands rst-mode-hook
  :mode "README\\.txt")
#+END_SRC

** LaTeX

| Command   | Explanation          |
|-----------+----------------------|
| ~C-c C-v~ | forward search       |
| ~C-c @~   | outline minor mode   |
| ~C-c ?~   | symbol documentation |

#+BEGIN_SRC emacs-lisp
(use-package tex
  :commands LaTeX-mode-hook
  :ensure auctex
  :defer t
  :bind (:map LaTeX-mode-map
              ("C-<tab>" . outline-cycle)
              ("M-." . malb/latex-jump)
              ("M-<right>" . sp-forward-sexp)
              ("M-<left>" . sp-backward-sexp)
              ("M-<up>" . outline-move-subtree-up)
              ("M-<down>" . outline-move-subtree-down)
              ("C-c h ." . TeX-doc))
  :config (progn
            (add-hook 'LaTeX-mode-hook #'visual-line-mode)
            (add-hook 'LaTeX-mode-hook #'flyspell-mode)
            (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
            (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
            (add-hook 'LaTeX-mode-hook #'visual-fill-column-mode)
            (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)

            (setq TeX-view-program-list '(("Okular" "okular --unique %o#src:%n%b")
                                          ("Emacs" "emacsclient -n -e '(find-file-other-window \"%o\")'")))

            (setq TeX-view-program-selection '(((output-dvi style-pstricks) "dvips and gv")
                                               (output-dvi "Okular")
                                               (output-pdf "PDF Tools")
                                               (output-html "xdg-open")))

            (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

            (defun malb/latex-add-environments ()
              (LaTeX-add-environments
               '("lemma" LaTeX-env-label)
               '("theorem" LaTeX-env-label)
               '("algorithm" LaTeX-env-label)
               '("corollary" LaTeX-env-label)
               '("definition" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("proposition" LaTeX-env-label)))

            (defun malb/latex-add-font-lock ()
              ;; dunno why cleveref.el isn't loaded
              (font-latex-add-keywords '(("malb" "*[{")
                                         ("todo" "*[{"))
                                       'function)
              (font-latex-add-keywords '(("cref"          "*{")
                                         ("Cref"          "*{")
                                         ("crefrange"     "*{{")
                                         ("Crefrange"     "*{{")
                                         ("cpageref"      "{")
                                         ("Cpageref"      "{")
                                         ("cpagerefrange" "{{")
                                         ("Cpagerefrange" "{{")
                                         ("namecref"      "{")
                                         ("nameCref"      "{")
                                         ("lcnamecref"    "{")
                                         ("namecrefs"     "{")
                                         ("nameCrefs"     "{")
                                         ("lcnamecrefs"   "{")
                                         ("labelcref"     "{")
                                         ("labelcpageref" "{")
                                         ("label"         "[{"))
                                       'reference))

            (add-hook 'LaTeX-mode-hook #'malb/latex-add-environments)
            (add-hook 'LaTeX-mode-hook #'malb/latex-add-font-lock)
            (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
            (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)

            (defun malb/latex-jump ()
              "If point is on a citation, jump to the bibtex file, otherwise open refex menu."
              (interactive)
              (xref-push-marker-stack)
              (let ((current (point)))
                (ignore-errors (org-ref-latex-jump-to-bibtex))
                (if (eq current (point))
                    (reftex-goto-label))))

            ;; http://endlessparentheses.com/improving-latex-equations-with-font-lock.html
            (defface malb/unimportant-latex-face
              '((t :height 0.8
                   :inherit font-lock-comment-face))
              "Face used on less relevant math commands.")

            (font-lock-add-keywords
             'latex-mode
             `((,(rx "\\" (or (any ",.!;")
                             (and (or "left" "right" "qquad" "quad" "big" "bigg" "Big" "Bigg")
                                  symbol-end)))
                0 'malb/unimportant-latex-face prepend)) 'end)

            (setq TeX-auto-save t
                  TeX-parse-self t
                  reftex-plug-into-AUCTeX t
                  LaTeX-math-menu-unicode t
                  TeX-PDF-mode t
                  TeX-source-correlate-mode t
                  TeX-save-query nil
                  TeX-error-overview-open-after-TeX-run t
                  TeX-electric-sub-and-superscript t
                  ;; TeX-electric-math '("\\(" . "\\)")
                  ;; LaTeX-electric-left-right-brace t
                  TeX-quote-after-quote nil
                  reftex-toc-split-windows-fraction 0.15
                  reftex-toc-split-windows-horizontally t)

            (add-to-list 'display-buffer-alist
                         '("^\\*toc\\*$" display-buffer-in-side-window
                           (window-parameters
                            (no-other-window . t)
                            (no-delete-other-window . t))
                           (side . left)
                           (window-width . 0.15)
                           (preserve-size t)
                           (dedicated . t)))

            (defun malb/reftex-toc-advice (old-function &rest arguments)
              (apply old-function arguments)
              (delete-window)
              (display-buffer "*toc*"))

            (advice-add #'reftex-toc :around #'malb/reftex-toc-advice)

            ;; https://stackoverflow.com/questions/19845598/emacs-regex-replacing-a-string-inside-a-latex-equation
            (defun malb/latex-replace-in-math ()
              "Call `query-replace-regexp' with `isearch-filter-predicate' to filter out outside math environments."
              (interactive)
              (let ((isearch-filter-predicate
                     (lambda (BEG END)
                       (save-excursion (save-match-data (goto-char BEG) (texmathp)))))
                    (case-fold-search nil))
                (call-interactively 'query-replace-regexp)))

            (setq-default TeX-master 'dwim)
            (setq-default TeX-auto-local (expand-file-name "auctex-auto" user-emacs-directory))

            (setq font-latex-fontify-sectioning 1.0)

            (add-to-list 'LaTeX-verbatim-environments "lstlisting")))
#+END_SRC


*** Yanking

- https://abizjak.github.io/emacs/2016/03/05/latex-environment-yank.html
- https://abizjak.github.io/emacs/2016/03/05/latex-environment.html

#+begin_src emacs-lisp
(use-package latex-math-yank
  :ensure nil)
#+end_src

*** CDLaTeX

#+begin_src emacs-lisp
(use-package cdlatex
  :config (progn
            (unbind-key "$" 'cdlatex-mode-map)     ;; smartparens
            (unbind-key "{" 'cdlatex-mode-map)     ;; smartparens
            (unbind-key "(" 'cdlatex-mode-map)     ;; smartparens
            (unbind-key "[" 'cdlatex-mode-map)     ;; smartparens
            (unbind-key "C-c ?" 'cdlatex-mode-map) ;; TeX-doc
            (setq cdlatex-math-modify-alist '((?a "\\alert" "\\alert" t t nil)
                                              (?m "\\mat" nil t t nil)
                                              (?v "\\vec" nil t t nil))
                  cdlatex-command-alist '(("ZZ" "Insert \\ZZ" "\\ZZ?"
                                           cdlatex-position-cursor nil nil t)
                                          ("nrm" "Insert ||foo||" "\\lVert{?}\\rVert"
                                           cdlatex-position-cursor nil nil t))
                  cdlatex-math-symbol-alist '( ( ?a  ("\\alpha" "\\alert{?}"))))))
#+end_src

*** LaTeXMK

#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :config (progn
            (setq auctex-latexmk-inherit-TeX-PDF-mode t)
            (auctex-latexmk-setup)))
#+END_SRC

Run =latexmk -pvc= in async shell

****** TODO use aux-dir & output-dir in combination with custom rc file to cp output to base dir

#+BEGIN_SRC emacs-lisp
(defun malb/run-latexmk (arg)
  (interactive "p")
  (let*  ((engine (if arg "-xelatex" ""))
          (filename (file-name-sans-extension (buffer-file-name)))
          (output-buffer (format "*LaTeXMK %s*" (file-name-nondirectory (buffer-file-name)))))
    (ignore-errors
      (select-frame (make-frame-command)))
    (async-shell-command (format "latexmk -pvc -pdf \"%s\" -interaction=nonstopmode \"%s.tex\""
                                 engine filename)
                         output-buffer)
    (delete-window)))
#+END_SRC

** [#B] Utility Functions

([[https://sriramkswamy.github.io/dotemacs/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/align-& (start end)
  "Align columns by ampersand"
  (interactive "r")

  (when (not (use-region-p))
    (save-excursion
      (LaTeX-mark-environment)
      (setq start (region-beginning))
      (setq end (region-end))))

  (save-excursion
    (replace-regexp "\\s-*&\\s-*" " & " nil start end)
    (replace-regexp "^\\s-*" " " nil start end))
  (align-regexp start end "\\(\\s-*\\)&" 1 1 t))

(bind-key "C-c w &" #'malb/align-&)

(defun malb/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (save-excursion
    (align-regexp start end
                  "\\(\\s-*\\)\\s-" 1 0 t)))

(defun malb/align-= (start end)
  "Align columns by equals sign"
  (interactive "r")
  (save-excursion
    (align-regexp start end
                  "\\(\\s-*\\)=" 1 0 t)))

(defun malb/align-: (start end)
  "Align columns by equals sign"
  (interactive "r")
  (save-excursion
    (align-regexp start end
                  "\\(\\s-*\\):" 1 0 t)))
#+END_SRC

** BibTeX

My standard BibTeX sources are

- =crypto_crossref.bib= and =abbrev3.bib= are from [[http://cryptobib.di.ens.fr/][crypto.bib]] which has most references relevant to crypto,
- =jacm.bib= is for the Journal of the ACM provided by the [[http://ftp.math.utah.edu/pub/tex/bib/jacm.bib][University of Utah]],
- =dcc.bib= is for Designs, Codes, and Cryptography provided by the [[http://ftp.math.utah.edu/pub/tex/bib/designscodescryptogr.bib][University of Utah]],
- =rfc.bib= is for RFCs and provided by [[http://tm.uka.de/~bless/bibrfcindex.html][Roland Bless]].

These are stored in some =common-latex= folder which has my [[https://bitbucket.org/malb/paper-template][paper-template]] as a subfolder.

#+BEGIN_SRC emacs-lisp
(defvar malb/common-latex (concat (file-name-as-directory malb/projects-dir) "common-latex"))

(defvar malb/crypto-bib (concat (file-name-as-directory malb/common-latex) "cryptobib"))

(defvar malb/bibtex-files (list (expand-file-name "crypto_crossref.bib" malb/crypto-bib)
                                (expand-file-name "abbrev3.bib" malb/crypto-bib)
                                (expand-file-name "rfc.bib" malb/common-latex)
                                (expand-file-name "jacm.bib" malb/common-latex)
                                (expand-file-name "dcc.bib" malb/common-latex)
                                (expand-file-name "local.bib" malb/common-latex)
                                (expand-file-name "social-science.bib" malb/common-latex)
                                ))

(setq reftex-default-bibliography malb/bibtex-files)
#+END_SRC

We cite as “Alice15” or “AliBobCha15” or “ABCD15” ([[https://nickhigham.wordpress.com/2016/01/06/managing-bibtex-files-with-emacs/#comment-2977][source]]) and clean up BibTeX entries as we like them on =C-c C-c=.

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :config (progn
            (setq bibtex-align-at-equal-sign t
                  bibtex-comma-after-last-field t
                  bibtex-entry-format '(opts-or-alts
                                        required-fields
                                        sort-fields
                                        page-dashes
                                        whitespace
                                        last-comma
                                        delimiters
                                        numerical-fields
                                        realign))

            ;; “no” wrap in BibTeX
            (add-hook 'bibtex-mode-hook #'malb/fill-column-32768)

            (defun bibtex-generate-autokey ()
              (let* ((bibtex-autokey-names nil)
                     (bibtex-autokey-year-length 2)
                     (bibtex-autokey-name-separator "\0")
                     (names (split-string (bibtex-autokey-get-names) "\0"))
                     (year (bibtex-autokey-get-year))
                     (name-char (cond ((= (length names) 1)
                                       (length (car names)))
                                      ((<= (length names) 3)
                                       3)
                                      (t 1)))
                     (existing-keys (bibtex-parse-keys))
                     key)
                (setq names (mapcar 'capitalize names))
                (setq names (mapconcat (lambda (x)
                                         (substring x 0 (min (length x) name-char)))
                                       names
                                       ""))
                (setq key (format "%s%s" names year))
                (let ((ret key))
                  (loop for c from ?a to ?z
                        while (assoc ret existing-keys)
                        do (setq ret (format "%s%c" key c)))
                  ret)))))
#+END_SRC

Force parsing of the BibTeX bibliography ([[http://stackoverflow.com/questions/9682592/setting-up-reftex-tab-completion-in-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/get-bibtex-keys (file)
  (with-current-buffer (find-file-noselect file)
    (mapcar #'car (bibtex-parse-keys))))

(defun malb/latex-parse-bibtex ()
  (interactive)
  (mapc 'LaTeX-add-bibitems
        (apply 'append
               (mapcar #'malb/get-bibtex-keys (reftex-get-bibfile-list)))))
#+END_SRC

*** BibTeX Completion & Helm BibTeX

[[https://github.com/tmalsburg/helm-bibtex/][Helm-bibtex]] is a nice interface for BibTeX.

[[https://github.com/tmalsburg/helm-bibtex/raw/master/screenshot.png]] ([[https://github.com/tmalsburg/helm-bibtex/][source]])


- We patch =bibtex-completion-find-pdf-in-library= to replace =:= with =_=.
- We add a cache to speed up loading.

#+BEGIN_SRC emacs-lisp
(use-package bibtex-completion
  :config (progn
            (setq bibtex-completion-bibliography malb/bibtex-files
                  bibtex-completion-library-path malb/literature-dirs
                  bibtex-completion-notes-path malb/literature-notes-file
                  bibtex-completion-notes-template-one-file
                  (concat "** ${title} cite:${=key=}\n"
                          ":PROPERTIES:\n"
                          ":CUSTOM_ID: ${=key=}\n"
                          ":AUTHOR: ${author-or-editor}\n"
                          ":YEAR: ${year}\n"
                          ":DOI: ${doi}\n"
                          ":URL: ${url}\n"
                          ":NOTER_DOCUMENT: %(car (bibtex-completion-find-pdf \"${=key=}\"))\n"
                          ":END:\n"
                          "\n"
                          "fullcite:${=key=}\n"
                          "\n"))

            ;;
            ;; PDF Filenames
            ;;

            (defun bibtex-completion-find-pdf-in-library (key-or-entry &optional find-additional)
              "Searches the directories in `bibtex-completion-library-path'
for a PDF whose name is composed of the BibTeX key plus
`bibtex-completion-pdf-extension'.  The path of the first matching
PDF is returned.

If FIND-ADDITIONAL is non-nil, the paths of all PDFs whose name
starts with the BibTeX key and ends with
`bibtex-completion-pdf-extension' are returned instead."
              (let* ((key (if (stringp key-or-entry)
                              key-or-entry
                            (bibtex-completion-get-value "=key=" key-or-entry)))
                     (main-pdf (cl-loop
                                for dir in
                                (-flatten bibtex-completion-library-path)
                                append (cl-loop
                                        for ext in
                                        (-flatten bibtex-completion-pdf-extension)
                                        collect (f-join dir (s-concat
                                                             (s-replace ":" "_" key) ext))))))
                (if find-additional
                    (sort               ; move main pdf on top of the list if needed
                     (cl-loop
                      for dir in (-flatten bibtex-completion-library-path)
                      append (directory-files dir t
                                              (s-concat "^" (regexp-quote (s-replace ":" "_" key))
                                                        ".*\\("
                                                        (mapconcat
                                                         'regexp-quote
                                                         (-flatten bibtex-completion-pdf-extension)
                                                         "\\|")
                                                        "\\)$")))
                     (lambda (x y)
                       (and (member x main-pdf)
                            (not (member y main-pdf)))))
                  (-flatten (-first 'f-file? main-pdf)))))

            (defun bibtex-completion-add-pdf-to-library (keys)
              "Add a PDF to the library for the first selected entry. The PDF
can be added either from an open buffer or a file."
              (let* ((key (car keys))
                     (source (char-to-string
                              (read-char-choice "Add pdf from [b]uffer or [f]ile? " '(?b ?f))))
                     (buffer (when (string= source "b")
                               (read-buffer-to-switch "Add pdf buffer: ")))
                     (file (when (string= source "f")
                             (expand-file-name (read-file-name "Add pdf file: " nil nil t))))
                     (path (-flatten (list bibtex-completion-library-path)))
                     (path (if (cdr path)
                               (completing-read "Add pdf to: " path nil t)
                             (car path)))
                     (pdf (expand-file-name (concat  (s-replace ":" "_" key) ".pdf") path)))
                (cond
                 (buffer
                  (with-current-buffer buffer
                    (write-file pdf)))
                 (file
                  (copy-file file pdf)))))

            ;;
            ;; Caching
            ;;

            (defvar malb/bibtex-completion-hashes nil)

            (defun malb/bibtex-completion-hashes ()
              (cons bibtex-completion-bibliography
                    (mapcar 'cadr bibtex-completion-cache)))

            (defvar malb/bibtex-completion-candidates-cache nil)

            (defun malb/bibtex-completion-candidates-clear-cache ()
              (setq malb/bibtex-completion-candidates-cache nil
                    malb/bibtex-completion-hashes nil))

            (defun malb/bibtex-completion-candidates-cache (old-function &rest arguments)
              "Call `bibtex-completion-candidates` only when files changed."

              (let ((local-hashes (malb/bibtex-completion-hashes)))
                (when (not (equal local-hashes malb/bibtex-completion-hashes))
                  (setq malb/bibtex-completion-hashes local-hashes
                        malb/bibtex-completion-candidates-cache (apply old-function arguments))))
              malb/bibtex-completion-candidates-cache)

            (advice-add #'bibtex-completion-candidates :around #'malb/bibtex-completion-candidates-cache)))
#+END_SRC

We add an option to search for the paper’s title online.

#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :commands (helm-bibtex helm-bibtex-with-local-bibliography)
  :config (progn
            (setq helm-bibtex-full-frame t)
            (add-to-list 'helm-commands-using-frame 'helm-bibtex)

            (defun malb/bibtex-completion-google-this (keys-or-entries)
              (dolist (key-or-entry keys-or-entries)
                (let* ((key (if (stringp key-or-entry)
                                key-or-entry
                              (bibtex-completion-get-value "=key=" key-or-entry))))
                  (helm-googler (replace-regexp-in-string
                                 "{\\|}" ""
                                 (bibtex-completion-get-value
                                  "title"
                                  (bibtex-completion-get-entry key)))))))

            (helm-bibtex-helmify-action malb/bibtex-completion-google-this
                                        helm-malb/bibtex-completion-google-this)

            (eval-after-load "org-ref-helm-bibtex"
              '(progn (helm-delete-action-from-source "Insert BibTeX key"
                                                      helm-source-bibtex)
                      (helm-add-action-to-source "Insert BibTeX key" 'helm-bibtex-insert-key
                                                 helm-source-bibtex 0)
                      (helm-add-action-to-source "Find online" 'helm-malb/bibtex-completion-google-this
                                                 helm-source-bibtex)))))
#+END_SRC

A [[https://company-mode.github.io/][company]] interface to bibtex-completion.

#+BEGIN_SRC emacs-lisp
(defun company-bibtex-completion-candidates ()
  (let ((bibtex-completion-bibliography
         (or (bibtex-completion-find-local-bibliography)
             bibtex-completion-bibliography)))
    (mapcar (lambda (x) (propertize (cdr (assoc "=key=" (cdr x)))
                                    'bibtex-completion-annotation
                                    (cdr (assoc "title" (cdr x)))))
            (bibtex-completion-candidates))))

(defun company-bibtex-completion (command &optional arg &rest ignored)
  "bibtex-completion backend"
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'company-bibtex-completion))
    (prefix (let ((prefixes (company-auctex-prefix "\\\\cite[^[{]*\\(?:\\[[^]]*\\]\\)?{\\([^}]*\\)\\=")))
              (if prefixes
                  (last (split-string prefixes "," t))
                nil)))
    (candidates (all-completions arg (company-bibtex-completion-candidates)))
    (annotation (get-text-property 0 'bibtex-completion-annotation arg))))

(add-to-list 'company-backends #'company-bibtex-completion)
#+END_SRC

****** TODO turn company-bibtex-completion into library so it can be lazy loaded

*** Adding References

I like the interface of [[https://github.com/cpitclaudel/biblio.el][biblio]] better, [[https://github.com/cute-jumper/gscholar-bibtex][gscholar-bibtex]] covers more bases.

- [[https://github.com/cpitclaudel/biblio.el][biblio]] browses and gathers bibliographic references and publications from various sources, by keywords or by DOI.

  #+BEGIN_SRC emacs-lisp
(use-package biblio
  :config (setq biblio-bibtex-use-autokey t))
  #+END_SRC

- [[https://github.com/cute-jumper/gscholar-bibtex][gscholar-bibtex]] grabs BibTeX entries from from Google Scholar, ACM Digital Library, IEEE Xplore and DBLP.

  #+BEGIN_SRC emacs-lisp
(use-package gscholar-bibtex
  :init (progn
            (setq gscholar-bibtex-database-file (expand-file-name "common-latex/local.bib" malb/projects-dir))))
  #+END_SRC

*** Org Ref

#+BEGIN_QUOTE
[[https://github.com/jkitchin/org-ref][Org-ref]] is a library for org-mode that provides rich support for citations, labels and cross-references in org-mode. org-ref is especially suitable for org-mode documents destined for LaTeX export and scientific publication. org-ref is also extremely useful for research documents and notes. org-ref bundles several other libraries that provide functions to create and modify bibtex entries from a variety of sources, but most notably from a DOI.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :after org
  :defer 2
  :config (progn
            (setq org-ref-default-bibliography malb/bibtex-files
                  org-ref-bibliography-notes malb/literature-notes-file
                  org-ref-pdf-directory malb/literature-dirs
                  org-ref-show-broken-links nil
                  org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)
            (bind-key "<f2> ;" #'org-ref-bibtex-hydra/body bibtex-mode-map)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-ref-latex
  :ensure nil
  :commands org-ref-latex-jump-to-bibtex)
#+END_SRC

** Speed Reading

Spray is a speed reading mode.

[[https://gitlab.com/iankelling/spray/raw/master/screencast.gif]]

([[https://gitlab.com/iankelling/spray][source]])

#+BEGIN_SRC emacs-lisp
(use-package spray
  :config (progn
            (setq spray-wpm 512
                  spray-margin-left 4
                  spray-margin-top 12)
            (bind-key "+" 'spray-faster spray-mode-map)
            (bind-key "-" 'spray-slower spray-mode-map)
            (add-to-list 'spray-unsupported-minor-modes 'beacon-mode)))
#+END_SRC

** AWS Polly

A simple interface for AWS’ text-to-speech API. All text is sent to Amazon’s severs so keep privacy implications in mind before using this.

#+BEGIN_SRC emacs-lisp
(use-package aws-polly
  :after emms
  :commands aws-polly-region
  :ensure nil)
#+END_SRC

* E-mail (Mu4e)

we use Mu4e:

#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'mu4e-user-agent)
#+END_SRC

We can then use the following =emacsmail= script as =mailto= handler

#+begin_src sh :tangle no
#!/bin/bash
emacsclient -c --eval "(browse-url-mail \"$@\")"
#+end_src

E-mail is fetched by [[http://isync.sourceforge.net/mbsync.html][mbsync]] and parsed by [[http://www.djcbsoftware.nl/code/mu/][mu]]. Then, we use [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]]. See this [[https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/#more-1336][blog post]] for details.

#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :ensure nil
  :ensure-system-package mu
  :config  (setq mu4e-headers-skip-duplicates t
                 mu4e-use-fancy-chars t
                 mu4e-view-show-images t
                 message-kill-buffer-on-exit t
                 mu4e-hide-index-messages t
                 mu4e-auto-retrieve-keys t
                 mu4e-compose-dont-reply-to-self t
                 mu4e-completing-read-function 'completing-read
                 mu4e-compose-in-new-frame t
                 mu4e-split-view 'vertical
                 mu4e-headers-visible-columns 134
                 mu4e-headers-visible-lines 16
                 mu4e-context-policy 'pick-first
                 mu4e-compose-context-policy 'ask
                 mu4e-change-filenames-when-moving t
                 mu4e-confirm-quit nil
                 mu4e-index-cleanup t
                 mu4e-view-show-addresses t
                 mu4e-index-lazy-check nil
                 mu4e-headers-auto-update nil))
#+END_SRC

#+begin_src emacs-lisp
(use-package mu4e-icalendar
  :ensure nil
  :config (mu4e-icalendar-setup))
#+end_src

** Prettier ([[https://github.com/Bronsa/.emacs.d/blob/master/config/mu4e.el][source]])

#+BEGIN_SRC emacs-lisp
(setq mu4e-use-fancy-chars t
      mu4e-headers-draft-mark     '("D" . "✎ ") ; draft
      mu4e-headers-new-mark       '("N" . "")
      mu4e-headers-seen-mark      '("S" . "")    ; seen
      mu4e-headers-unread-mark    '("u" . "")    ; unseen
      mu4e-headers-flagged-mark   '("F" . "★ ")  ; flagged
      mu4e-headers-new-mark       '("N" . "✉ ")  ; new
      mu4e-headers-replied-mark   '("R" . "↵ ")  ; replied
      mu4e-headers-passed-mark    '("P" . "⇉ ")  ; passed
      mu4e-headers-encrypted-mark '("x" . "🔒 ") ; encrypted
      mu4e-headers-signed-mark    '("s" . "✍ ")  ; signed
      mu4e-headers-attach-mark    '("a" . "🗎")  ; attachments
      mu4e-headers-empty-parent-prefix '("-" . "○")
      mu4e-headers-first-child-prefix '("\\" . "▸")
      mu4e-headers-has-child-prefix '("+" . "●"))
#+END_SRC

** Folders

#+BEGIN_SRC emacs-lisp
(setq mu4e-drafts-folder "/[Google Mail]/Drafts"
      mu4e-sent-folder   "/[Google Mail]/Sent Mail"
      mu4e-trash-folder  "/[Google Mail]/Bin")

(setq mu4e-maildir-shortcuts
      '((:maildir "/Inbox"                   :key ?i)
        (:maildir "/[Google Mail]/Drafts"    :key ?d)
        (:maildir "/[Google Mail]/Sent Mail" :key ?s)
        (:maildir "/[Google Mail]/Spam"      :key ?j)
        (:maildir "/[Google Mail]/Bin"       :key ?t)))
#+END_SRC

** Search

([[https://melpa.org/#/mu4e-query-fragments][source]])

#+BEGIN_SRC emacs-lisp
(use-package mu4e-query-fragments
  :config (setq mu4e-query-fragments-list
                '(("%hidden" . "flag:trashed OR maildir:\"/[Google Mail]/Spam\"")
                  ("%unread" . "flag:unread AND NOT %hidden  ")
                  ("%today"  . "date:today..now AND NOT %hidden")
                  ("%week"   . "date:7d..now AND NOT %hidden")
                  ("%month"  . "date:31d..now AND NOT %hidden")
                  ("%inbox"  . "(maildir:\"/royal holloway\" OR maildir:/INBOX) AND NOT %hidden")
                  ("%sent"   . "(maildir:\"/[Google Mail]/Sent Mail\" OR maildir:\"/royal holloway/sent\")")
                  ("%direct" . "%inbox AND NOT flag:list AND (to:martinralbrecht@* OR to:martin.albrecht@*)")
                  ("%doc"    . "mime:application/* AND NOT (mime:application/pgp* or mime:application/ics) AND size:5k..1024M AND NOT %hidden")
                  ("%bulk"   . "(flag:list OR from:trac@sagemath.org OR maildir:/bulk OR maildir:/research/.lists) AND NOT %hidden"))))
#+END_SRC

#+begin_quote
Just press ~l~ in the headers view and any mailing list you've subscribed to will be automatically discovered and presented in recency order. No setup or refiling necessary.
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package mu4e-jump-to-list
  :config (progn
            (unbind-key "l" mu4e-main-mode-map)
            (unbind-key "l" mu4e-headers-mode-map)))
#+END_SRC

Canned queries.

#+BEGIN_SRC emacs-lisp
(setq mu4e-bookmarks nil)               ; clear out

(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%unread") :name "Unread messages" :key ?u) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%unread AND %bulk") :name "Unread (bulk)" :key ?l) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%direct") :name "Direct" :key ?d) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "flag:flagged AND NOT %hidden") :name "Flagged" :key ?f) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%today") :name "Today's" :key ?t) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%week")  :name "Last 7 days" :key ?w) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%direct AND %week") :name "Last 7 days (direct)" :key ?W) t)

(add-to-list
 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand
                            "%direct AND %week AND NOT (flag:replied OR flag:passed OR flag:trashed OR flag:list)")
                          :name "Last 7 days (direct, unanswered)"
                          :key ?R) t)

(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%sent AND %week") :name "Last 7 days (sent)" :key ?s) t)
(add-to-list 'mu4e-bookmarks `(:query ,(mu4e-query-fragments-expand "%doc AND %inbox AND %month") :name "Documents (31 days)" :key ?D) t)
#+END_SRC

** Retrieving

#+BEGIN_SRC emacs-lisp
(setq mu4e-get-mail-command "timelimit -t 180 -T 180 mbsync googlemail-default"
      mu4e-update-interval nil)
#+END_SRC

** Contacts

Handling contacts semi-automagically is one of mu4e’s big selling points to me. The functions below make it more automagic.

My shitty regexp for detecting e-mail addresses

#+BEGIN_SRC emacs-lisp
(defconst malb/email-regexp "<?\\([^ ]+@[^ ]+\.[^ >]+\\)>?")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/extract-email (str)
  ;; return last sub-string looking like an email address
  (let ((tokens (reverse (split-string-and-unquote str)))
        (match))
    (dolist (token tokens)
      (string-match malb/email-regexp token)
      (setq match (or match (match-string 1 token))))
    match))
#+END_SRC

*** Canonicalisation

A table of canonical names for people who cannot seem to fix their headers …

#+BEGIN_SRC emacs-lisp
(defcustom malb/mu4e-name-replacements nil
  "replacement names from e-mail addresses"
  :type '(list :type string)
  :group 'malb)
#+END_SRC

- My uni likes “Lastname, Firstname (Year)” which is weird, so we fix it.
- Some people like to YELL their LASTNAME and then write the first name, we also canonicalise that
- Some people like to send incomplete data, so we maintain a local replacement list

#+BEGIN_SRC emacs-lisp
(defun malb/canonicalise-contact-name (email  &optional name nick)
  ""
  (let* ((name (or name ""))
         (case-fold-search nil)
         ;; look up email address and use entry if found
         (candidate (if nick (caddr (assoc (downcase email) malb/mu4e-name-replacements))
                      (cadr (assoc (downcase email) malb/mu4e-name-replacements)))))
    (if candidate
        candidate
      (progn
        ;; deal with YELL’d last names
        (setq name (replace-regexp-in-string "^\\(\\<[[:upper:]]+\\>\\) \\(.*\\)" "\\2 \\1" name))
        ;; Foo, Bar becomes Bar Foo
        (setq name (replace-regexp-in-string "^\\(.*\\), \\([^ ]+\\).*" "\\2 \\1" name))
        ;; foo bar becomes Foo Bar
        (setq name (capitalize name))))))
#+END_SRC

A function to add new replacements.

#+BEGIN_SRC emacs-lisp
(defun malb/add-mu4e-name-replacement ()
  (interactive)
  (let* ((email (helm-read-string "E-mail: " (replace-regexp-in-string
                                              ".*<\\(.*\\)>.*" "\\1"
                                              (downcase (get-text-property (point) 'gnus-data)))))
         (name  (helm-read-string "Name: "
                                  (malb/canonicalise-contact-name
                                   email
                                   (replace-regexp-in-string "\\(.*\\) <.*>.*" "\\1"
                                                             (get-text-property (point) 'gnus-data)))))
         (nick  (helm-read-string "Nick: " (replace-regexp-in-string "\\([^ ]?\\) .*" "\\1" name))))
    (add-to-list 'malb/mu4e-name-replacements (list email name nick) t)
    (customize-save-variable 'malb/mu4e-name-replacements malb/mu4e-name-replacements)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(bind-key "N" #'malb/add-mu4e-name-replacement mu4e-view-mode-map)
#+END_SRC

Canonicalise contacts as they appear from mu4e.

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-contact-rewrite-function (contact)
  (let ((full-email-regex "\"?\\(.*?\\)\"? <\\(.*?\\)>"))
    (cond
     ((string-match-p (rx  (or (seq "no" (zero-or-one "-") "reply")
                               (seq "replyto-" (one-or-more char) "@plus.google.com")
                               (seq "@" (one-or-more char) ".twitter.com")
                               (seq "do-not-reply" (zero-or-more char) "@")
                               (seq "bounce-" (one-or-more char) "@"))) contact)
      nil)
     ((string-match-p full-email-regex contact)
      (let* ((email (downcase (replace-regexp-in-string full-email-regex "\\2" contact)))
             (name  (replace-regexp-in-string full-email-regex "\\1" contact))
             (case-fold-search t))
        (if (equal (downcase name) email)
            email
          (format "%s <%s>" (malb/canonicalise-contact-name email name) email))))
     (t contact))))

(setq mu4e-contact-process-function #'malb/mu4e-contact-rewrite-function)
#+END_SRC

Extract a pretty-ish list of contacts from an e-mail.

#+BEGIN_SRC emacs-lisp
(defun malb/extract-contacts (fields)
  "Return a list of 'name <email>' entries."
  (let (addresses
        point-end-of-line
        (case-fold-search t)
        (search-regexp (mapconcat (lambda (arg) (concat "^" arg ": *"))
                                  fields "\\|")))

    ;; extract addresses
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward search-regexp nil t)
        (save-excursion
          (setq point-end-of-line (re-search-forward "$")))
        (setq addresses (append addresses
                                (mail-header-parse-addresses
                                 (buffer-substring-no-properties (point) point-end-of-line))))))
    (setq addresses (mapcar (lambda (address)
                              (format "\"%s\" <%s>"
                                      (malb/canonicalise-contact-name (car address) (cdr address))
                                      (car address)))
                            addresses))))
#+END_SRC

The following is useful in e-mail templates

#+BEGIN_SRC emacs-lisp
(defun malb/get-names-from-fields (fields)
  (let (contacts
        ret
        point-end-of-line
        (search-regexp (mapconcat (lambda (arg)
                                    (concat "^" arg ": "))
                                  fields "\\|"))
        (case-fold-search t))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward search-regexp nil t)
        (save-excursion
          (setq point-end-of-line (re-search-forward "$")))
        (setq contacts (append contacts
                               (mail-header-parse-addresses
                                (buffer-substring-no-properties (point)
                                                                point-end-of-line)))))
      (dolist (contact contacts)
        (let ((name (malb/canonicalise-contact-name (car contact) (cdr contact) t)))
          ;; extract first name
          (when (string-match "\\([^ ,]+\\)" name)
            (push (match-string 1 name) ret))))
      (if ret (string-join (nreverse ret) ", ") ret "there"))))
#+END_SRC

A shortcut:

#+BEGIN_SRC emacs-lisp
(defun malb/get-names-from-to-field ()
  (interactive)
  (malb/get-names-from-fields '("To")))
#+END_SRC

*** Rearrange To and CC

Use Helm to re-arrange recipients of an e-mail. I often get e-mail from Bob with Charley in CC which prompts me to send an e-mail to Charley with Bob in CC.

#+BEGIN_SRC emacs-lisp
(defun malb/helm-reorder-recipients ()
  "Re-distribute addresses to To: and CC: fields."
  (interactive)
  (let* ((search-regexp "^to: *\\|^cc: *")
         (addresses (malb/extract-contacts '("to" "cc")))
         (case-fold-search t)
         to cc)

    ;; ask user to split into To and CC
    (setq to (helm :sources (helm-build-sync-source "To:"
                              :candidates addresses
                              :action  '(("Select" . (lambda (x) (helm-marked-candidates)))
                                         ("Ignore" . (lambda (x)))))))

    (dolist (address to)
      (setq addresses (delete address addresses)))

    (if addresses
        (setq cc (helm :sources (helm-build-sync-source "CC:"
                                  :candidates addresses
                                  :action  '(("Select" . (lambda (x) (helm-marked-candidates)))
                                             ("Ignore" . (lambda (x))))))))

    ;; Replace To: and CC: fields
    (save-excursion
      (goto-char (point-min))

      (while (re-search-forward search-regexp nil t)
        (kill-whole-line))

      (message-goto-from)

      (progn (newline)
             (insert "To: ")
             (insert (mapconcat #'identity to ", ")))
      (if cc (progn (newline)
                    (insert "Cc: ")
                    (insert (mapconcat #'identity cc ", ")))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(bind-key "C-c ]" #'malb/helm-reorder-recipients mu4e-compose-mode-map)
#+END_SRC

*** Contact Look up

#+BEGIN_SRC emacs-lisp
(defun malb/fullcontact ()
  (interactive)
  (let* ((email (replace-regexp-in-string "<\\(.*?\\)>" "\\1" (thing-at-point 'email)))
         (path (expand-file-name "fullcontact.py" user-emacs-directory)))
    (if email
        (let ((msg (shell-command-to-string (format "PYTHONIOENCODING=utf8 python %s -e %s" path email))))
          (message "%s" msg)))))

(bind-key "@" #'malb/fullcontact mu4e-view-mode-map)
#+END_SRC

** Searching

#+BEGIN_SRC emacs-lisp
(unbind-key "s" mu4e-main-mode-map)
#+END_SRC

A helm menu for contacts, based on ([[http://kitchingroup.cheme.cmu.edu/blog/2015/03/14/A-helm-mu4e-contact-selector/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/helm-mu-contacts (arg)
  "Helm interface to e-mail addresses.

When ARG equals then the persistent action is search, otherwise
it is to insert the contact.
"
  (interactive "p")

  (if (not mu4e~contacts)
      (progn
        ;; request contacts
        (mu4e~request-contacts-maybe)
        (let ((i 0))
          ;; sleep for at most 2 seconds to wait for contacts to be filed
          (while (and (not mu4e~contacts) (> 2 i))
            (sleep-for 1)
            (+ i 1)))))

  (let ((malb/helm-mu-actions
         '(("Insert" . (lambda (x)
                         (insert (mapconcat 'identity
                                            (helm-marked-candidates) ","))))
           ("Find messages (simple)" .
            (lambda (x)
              (let ((combiner "OR")
                    (from-to-contact "contact:"))
                (mu4e-headers-search
                 (mapconcat (lambda (x) (format (concat from-to-contact "%s")
                                                (malb/extract-email x)))
                            (helm-marked-candidates)
                            (format " %s " combiner))))))
           ("Find messages" .
            (lambda (x)
              (let* ((candidates (helm-marked-candidates))
                     (combiner  (if (> (length candidates ) 1)
                                    (completing-read "Combine multiple with:" '("OR" "AND"))
                                  ""))
                     (from-to-contact (completing-read "Restrict to:" '("from:" "to:" "contact:"))))
                (mu4e-headers-search
                 (mapconcat (lambda (x) (format (concat from-to-contact "%s")
                                                (malb/extract-email x)))
                            candidates
                            (format " %s " combiner))))))
           ;; ("Copy to clipboard" . (lambda (x)
           ;;                          (kill-new (mapconcat 'identity
           ;;                                               (helm-marked-candidates) ","))))
           ("Google search" . (lambda (x) (helm-googler (replace-regexp-in-string
                                                         (format "^\\(.*\\) %s" malb/email-regexp) "\\1" x))))
           )))

    (helm :sources (helm-build-sync-source "E-mail address candidates"
                     :candidates  (append
                                   ;; mu contacts
                                   (loop for contact being the hash-key of mu4e~contacts
                                         collect (cons contact contact)))
                     :action  (cond ((equal arg 4) (cons (cadr malb/helm-mu-actions)
                                                         (cons (car malb/helm-mu-actions)
                                                               (cddr  malb/helm-mu-actions))))
                                    (t malb/helm-mu-actions))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(bind-key "C-c [" #'malb/helm-mu-contacts mu4e-compose-mode-map)
#+END_SRC

Search mu with [[https://github.com/emacs-helm/helm-mu][helm-mu]].

#+BEGIN_SRC emacs-lisp
(use-package helm-mu
  :config (progn

            (defun malb/helm-mu (arg)
              (interactive "p")
              (let ((current-prefix-arg nil))
                (cond
                 ((equal arg 4) (malb/helm-mu-contacts 4))
                 (t (helm-mu)))))

            (add-to-list 'helm-commands-using-frame 'helm-mu)
            (add-to-list 'helm-commands-using-frame 'malb/helm-mu-contacts)

            (fset 'mu4e-main-mode-map mu4e-main-mode-map) ;; this seems to have been forgotten in mu4e

            (dolist (mode-map '(mu4e-main-mode-map mu4e-headers-mode-map mu4e-view-mode-map))
              (unbind-key "s" mode-map)
              (bind-key "ss" #'mu4e-query-fragments-search mode-map)
              (bind-key "sm" #'mu4e-query-fragments-search mode-map)
              (bind-key "sl" #'mu4e-jump-to-list mode-map)
              (bind-key "sh" #'malb/helm-mu mode-map)
              (bind-key "sc" (defun malb/helm-mu-contacts-messages ()
                               (interactive)
                               (malb/helm-mu-contacts 4))
                        mode-map))))
#+END_SRC

[[http://puntoblogspot.blogspot.de/2016/02/with-this-little-trick-helm-dash-gets.html][Tip:]] =C-c C-f= aka =helm-follow-mode= is your friend.

** Viewing

Use =<TAB>= to preview messages and =q= to close previews.

#+BEGIN_SRC emacs-lisp
(require 'mu4e-view)
(require 'mu4e-headers)

(defun malb/preview-message ()
  (interactive)
  (mu4e-headers-view-message)
  (sleep-for 0.1) ;; this is a HACK
  (select-window (previous-window)))

;; based on (mu4e-select-other-view)
(defun malb/close-message-view ()
  (interactive)
  (let* ((other-buf
	   (cond
	     ((eq major-mode 'mu4e-headers-mode)
	       (mu4e-get-view-buffer))
	     ((eq major-mode 'mu4e-view-mode)
	       (mu4e-get-headers-buffer))))
	  (other-win (and other-buf (get-buffer-window other-buf))))
    (if (window-live-p other-win)
      (progn
          (select-window other-win)
          (sleep-for 0.1)
          (mu4e~view-quit-buffer))
      (mu4e~headers-quit-buffer))))

(bind-key "<tab>" #'malb/preview-message mu4e-headers-mode-map)
(bind-key "q" #'malb/close-message-view mu4e-headers-mode-map)
#+END_SRC

Visual-line mode all the way.

#+BEGIN_SRC emacs-lisp
(bind-key "<home>" #'beginning-of-visual-line mu4e-view-mode-map)
(bind-key "<end>" #'end-of-visual-line mu4e-view-mode-map)
#+END_SRC

Use ace-link for links as it is compatible with gnus.

#+BEGIN_SRC emacs-lisp
(bind-key "g" #'ace-link mu4e-view-mode-map)
#+END_SRC


Headers to show in header view.

#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-fields '((:human-date . 10)
                            (:flags . 4)
                            (:mailing-list . 16)
                            (:from-or-to . 22)
                            (:subject)))
#+END_SRC

Use imagemagick, if available

#+BEGIN_SRC emacs-lisp
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-view-mode-hook ()
  "View e-mails with width restriction, but wider for HTML."
  (set-fill-column 84)
  (visual-line-mode 1)
  (visual-fill-column-mode 1))
#+END_SRC

Discourage HTML rendering in GNUS:

#+begin_src emacs-lisp
(with-eval-after-load "mm-decode"
  (add-to-list 'mm-discouraged-alternatives "text/html")
  (add-to-list 'mm-discouraged-alternatives "text/richtext"))
#+end_src

Toggle between GNUS and traditional MU4E view.

#+BEGIN_SRC emacs-lisp
;; https://www.reddit.com/r/emacs/comments/ho8lxi/mu4e_office365_meeting_invitations/
(defun malb/toggle-mu4e-gnus ()
  (interactive)
  "Toggle between old mu4e view mode and gnus-view-mode."
  (if (equal mu4e-view-use-gnus t)
      (progn
        (setq mu4e-view-use-gnus nil)
        (add-hook 'mu4e-view-mode-hook #'malb/mu4e-view-mode-hook)
        (remove-hook 'gnus-article-mode-hook #'malb/mu4e-view-mode-hook))
    (progn
      (setq mu4e-view-use-gnus t)
      (add-hook 'gnus-article-mode-hook #'malb/mu4e-view-mode-hook)
      (remove-hook 'mu4e-view-mode-hook #'malb/mu4e-view-mode-hook)))
  (remove-overlays)
  (condition-case nil
      (mu4e-view-refresh)
    (error nil)))

(setq mu4e-view-use-gnus t)
(add-hook 'gnus-article-mode-hook #'malb/mu4e-view-mode-hook)

(bind-key "z" #'malb/toggle-mu4e-gnus mu4e-view-mode-map)
#+END_SRC

Gnus formatting

#+begin_src emacs-lisp
(setq gnus-article-date-headers '(original))
#+end_src

** Threading

[[https://raw.githubusercontent.com/rougier/mu4e-thread-folding/master/screenshot.png]]

#+begin_src emacs-lisp
(use-package mu4e-thread-folding
  :quelpa (mu4e-thread-folding :fetcher github :repo "rougier/mu4e-thread-folding")
  :config (progn
            (setq mu4e-thread-folding-default-view 'unfolded)
            (add-to-list 'mu4e-header-info-custom
                         '(:empty . (:name "Empty"
                                           :shortname ""
                                           :function (lambda (msg) "  "))))))
#+end_src

** Actions

Action to view e-mails in external browser.

#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
             '("browser" . mu4e-action-view-in-browser) t)
#+END_SRC

Action to save e-mail to PDF.

#+begin_src emacs-lisp
(defun malb/mu4e-action-save-to-pdf (msg)
  (let* ((date (mu4e-message-field msg :date))
         (infile (mu4e~write-body-to-html msg))
         (outfile (format-time-string "%Y-%m-%d%H%M%S.pdf" date)))
    (with-temp-buffer
      (shell-command
       (format "wkhtmltopdf %s ~/Downloads/%s" infile outfile) t))))

(add-to-list 'mu4e-view-actions '("save to pdf" . malb/mu4e-action-save-to-pdf) t)
#+end_src

#+BEGIN_SRC emacs-lisp
(delete '("show this thread" . mu4e-action-show-thread) mu4e-view-actions)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(delete '("view as pdf" . mu4e-action-view-as-pdf) mu4e-view-actions)
#+END_SRC

Action to search messages by/to sender.

#+BEGIN_SRC emacs-lisp
(defun malb/search-for-sender (msg)
  "Search for messages sent by the sender of the message at point."
  (mu4e-headers-search
   (concat "from:" (cdar (mu4e-message-field msg :from)))))

(defun malb/search-for-sender-extended (msg)
  "Search for messages sent by the sender of the message at point."
  (mu4e-headers-search
   (concat "from:"  (mu4e-headers-search (cdar (mu4e-message-field msg :from)))
           "OR to:" (mu4e-headers-search (cdar (mu4e-message-field msg :from)))
           "OR cc:" (mu4e-headers-search (cdar (mu4e-message-field msg :from))))))

(add-to-list 'mu4e-view-actions
             '("from 🔍" . malb/search-for-sender) t)
(add-to-list 'mu4e-headers-actions
             '("from 🔍" . malb/search-for-sender) t)

;; (add-to-list 'mu4e-view-actions
;;              '("sender search" . malb/search-for-sender-extended) t)
#+END_SRC

Action to search messages involving all correspondents.

#+BEGIN_SRC emacs-lisp
(defun malb/find-correspondence (msg)
  "Find messages involving all correspondents."
  (let ((addresses (append (mapcar (lambda (x) (cdr x))
                                   (mu4e-message-field msg :to))
                           (mapcar (lambda (x) (cdr x))
                                   (mu4e-message-field msg :cc))
                           (mapcar (lambda (x) (cdr x))
                                   (mu4e-message-field msg :from)))))
    (helm :sources (helm-build-sync-source "Filter candidates:"
                     :candidates (cl-remove-if (lambda (x)
                                                 (member x (mu4e-personal-addresses))) addresses)
                     :after-init-hook (lambda () (with-helm-buffer
                                                   (run-at-time 0.25 nil #'helm-mark-all)))
                     :action '(("Filter" . (lambda (x) (setq addresses (helm-marked-candidates))))
                               ("Use all" . (lambda (x))))))
    (mu4e-headers-search
     (format "contact:%s"
             (mapconcat 'identity addresses " AND ")))))

(add-to-list 'mu4e-view-actions
             '("Contact 🔍" . malb/find-correspondence) t)

(add-to-list 'mu4e-headers-actions
             '("Contact 🔍" . malb/find-correspondence) t)
#+END_SRC

DWIM action. ~malb/mu4e-dwim-actions~ is a list of triples ~("from regexp" "subject regexp" (lambda (msg) …))~ where the lambda is executed whenever both regexps match. Processing does not stop after the first match.

#+BEGIN_SRC emacs-lisp
(setq malb/mu4e-dwim-actions nil)

(defun malb/mu4e-dwim-action (msg)
  (let  ((from (cdr (car (mu4e-message-field msg :from))))
         (subject (mu4e-message-field msg :subject)))
    (dolist (action malb/mu4e-dwim-actions)
      (let ((from-regexp (car action))
            (subject-regexp (cadr action))
            (f (caddr action)))
        (when (and
               (string-match from-regexp from)
               (string-match subject-regexp subject))
          (funcall f msg))))))

(add-to-list 'mu4e-view-actions
             '("dwim" . malb/mu4e-dwim-action) t)
(add-to-list 'mu4e-headers-actions
             '("dwim" . malb/mu4e-dwim-action) t)
#+END_SRC

This can be useful for writing DWIM actions: ([[https://etienne.depar.is/emacs.d/mu4e.html][source]])

#+begin_src emacs-lisp
(defun malb/get-mail-header (header-name path)
  (replace-regexp-in-string
   "[ \t\n]*$"
   ""
   (shell-command-to-string
    (concat "sed -n '/^"
            header-name
            ":/I{:loop t;h;n;/^ /{H;x;s/\\n//;t loop};x;p}' '"
            path
            "' | sed -n 's/^"
            header-name
            ": \\(.*\\)$/\\1/Ip'"))))
#+end_src

** Writing

Don’t break long lines manually.

#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-format-flowed t)

(defun malb/no-hard-newlines ()
  (setq use-hard-newlines nil))

(add-hook 'mu4e-compose-mode-hook #'malb/no-hard-newlines)
#+END_SRC

To use a bit of org-mode’s magic as well by pulling in [[http://orgmode.org/manual/Orgtbl-mode.html][orgtbl-mode]]. We also enable footnotes, to add a footnote try =C-c ! a=. Also set e-mail width to 72 characters.

#+BEGIN_SRC emacs-lisp
(add-hook 'mu4e-compose-mode-hook #'malb/fill-column-72)
(add-hook 'mu4e-compose-mode-hook #'malb/mu4e-compose-frame)
(add-hook 'message-mode-hook #'flyspell-mode)
(add-hook 'message-mode-hook #'turn-on-orgtbl)
(add-hook 'message-mode-hook #'typo-mode)

;; TODO this isn’t as nice as it could be
(bind-key "C-c C-x f" #'org-footnote-action message-mode-map)
#+END_SRC

Don’t add an empty line when quoting e-mail ([[https://lists.gnu.org/archive/html/info-gnus-english/2010-04/msg00019.html][source]])

#+BEGIN_SRC emacs-lisp
(require 'nnheader)

(defun malb/message-insert-citation-line ()
  "Insert a simple citation line."
  (when message-reply-headers
    (newline)
    (insert (mail-header-from message-reply-headers) " writes:")
    (newline)))

(setq message-citation-line-function #'malb/message-insert-citation-line)
#+END_SRC

Various shortcuts to jump to/create headers.

#+BEGIN_SRC emacs-lisp
(bind-key "C-c g t" #'message-goto-to mu4e-compose-mode-map)
(bind-key "C-c g c" #'message-goto-cc mu4e-compose-mode-map)
(bind-key "C-c g b" #'message-goto-bcc mu4e-compose-mode-map)
(bind-key "C-c g f" #'message-goto-from mu4e-compose-mode-map)
(bind-key "C-c g s" #'message-goto-subject mu4e-compose-mode-map)
#+END_SRC

Don’t let ~display-buffers-alist~ interfere with ~mu4e-compose~:

#+BEGIN_SRC emacs-lisp
(defun malb/switch-to-mu4e-advice (old-function &rest arguments)
  (malb/switch-to-mu4e)
  (apply old-function arguments))

(defun malb/switch-away-from-mu4e-advice (old-function &rest arguments)
  (malb/switch-away-from-mu4e)
  (apply old-function arguments))

(advice-add #'mu4e-compose :around #'malb/clean-display-buffer-alist-advice)
(advice-add #'mu4e~compose-handler :around #'malb/clean-display-buffer-alist-advice)
(advice-add #'mu4e-view :around  #'malb/switch-to-mu4e-advice)
(advice-add #'mu4e-org-open :around #'malb/switch-to-mu4e-advice)
#+END_SRC

Don’t ask me to remove the backup file, I do want to remove the backup file, too.

#+BEGIN_SRC emacs-lisp
(defun malb/yes-no-skip-remove-backup (orig-fn &rest args)
  (if (string-prefix-p "Remove the backup file" (car args))
      t
    (apply orig-fn args)))

(advice-add #'yes-or-no-p :around #'malb/yes-no-skip-remove-backup)
#+END_SRC

** Context Switching

Update "From:" and signature on context switch.

([[https://github.com/djcb/mu/issues/776][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-compose-context-switch (&rest _ignore)
  "When switching context in a compose buffer, switch “from” and signature."
  (when (eq major-mode 'mu4e-compose-mode)
    (message-replace-header "From" (mu4e~draft-from-construct))
    (setq-local message-signature mu4e-compose-signature)
    (setq malb/message-sig-cycle 0)
    (malb/message-remove-signature)
    (save-excursion (message-insert-signature))))

(advice-add 'mu4e-context-switch :after #'malb/mu4e-compose-context-switch)

(defun malb/message-remove-signature ()
  "Find and remove signature."
  (save-excursion
    (when (message-goto-signature)
      (forward-line -1)
      (delete-region (1- (point)) (point-max)))))

(defun malb/message-send-check-context ()
  "Check that from address and context matches, and ask to change if required.

This is to avoid making mistakes in trying to send the current
message from the wrong account"
  ;; this may be a too strict check
  (when (not (string= (message-fetch-field "from")
                      (mu4e~draft-from-construct)))
    (let ((context (mu4e-context-determine nil nil)))
      (cond ((and context
                  (y-or-n-p
                   (format
                    "Attempt to send via mismatching context. Switch to [%s] and send? "
                    (mu4e-context-name context))))
             (mu4e-context-switch t (mu4e-context-name context)))
            ((not context)
             (mu4e-context-switch
              t
              (mu4e-context-name  ; throws an error if no context found:
               (mu4e~context-ask-user
                "Attempt to send via mismatching context! Send after switching to: "))))
            (t (signal 'quit nil))))))

(add-hook 'message-send-hook #'malb/message-send-check-context)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-cycle-contexts ()
  "Cycle through `mu4e-contexts'."
  (interactive)
  (when mu4e-contexts
    (let* ((names (mapcar #'mu4e-context-name mu4e-contexts))
           (currentname (ignore-errors (mu4e-context-name mu4e~context-current))))
      (mu4e-context-switch t
                           (nth
                            (mod (if currentname
                                     (1+ (cl-position currentname names :test #'equal))
                                   0)
                                 (length names))
                            names)))))

(bind-key "C-c C-i" #'malb/mu4e-cycle-contexts mu4e-compose-mode-map)
#+END_SRC

** Attachments

#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir (expand-file-name "incoming" malb/sync-dir))
(setq-default mu4e-save-multiple-attachments-without-asking t)
#+END_SRC

Attachments are mostly handled using the helm baloo interface, but sometimes we want to send files from a directory: =C-c C-m C-a= ([[https://writequit.org/eos/eos-mail.html][source]])

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

(use-package gnus-dired
  :ensure nil
  :after mu4e
  :config
  (progn
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))

    (setq gnus-dired-mail-mode 'mu4e-user-agent)))
#+END_SRC

Put attachments at end of my writing ([[http://mbork.pl/2015-11-28_Fixing_mml-attach-file_using_advice][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/mml-attach-file--go-to-eob (orig-fun &rest args)
  "Go to the end of my message before attaching files."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (let ((point (re-search-forward "^.*writes:$" nil t)))
        (if point
            (progn
              (goto-char point)
              (previous-line))
          (goto-char (point-max))))
      (newline)
      (apply orig-fun args))))

(advice-add 'mml-attach-file :around #'malb/mml-attach-file--go-to-eob)
#+END_SRC

** Window Management

Create a new mu4e session in a new frame.

#+BEGIN_SRC emacs-lisp
(defun malb/mail ()
  (interactive)
  (select-frame (make-frame-command))
  (set-frame-name "*mu4e*") ;; we use this in our window management
  (mu4e))
#+END_SRC

Kill mu4e frame.

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-quit-session ()
  (interactive)
  (kill-buffer)
  (delete-frame))

(bind-key "q" #'malb/mu4e-quit-session mu4e-main-mode-map)
#+END_SRC

We patch mu4e to be way less clever about window management after sending an e-mail,  my =mu4e-message-kill-buffer= looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
(defun mu4e-sent-handler (docid path)
  "Handler function, called with DOCID and PATH for the just-sent
message. For Forwarded ('Passed') and Replied messages, try to set
the appropriate flag at the message forwarded or replied-to."
  (mu4e~compose-set-parent-flag path)
  (when (file-exists-p path) ;; maybe the draft was not saved at all
    (mu4e~proc-remove docid))
  ;; kill any remaining buffers for the draft file, or they will hang around...
  ;; this seems a bit hamfisted...
  (dolist (buf (buffer-list))
    (when (and (buffer-file-name buf)
	       (string= (buffer-file-name buf) path))
      (if message-kill-buffer-on-exit
	  (kill-buffer buf))))
  ;; (mu4e~switch-back-to-mu4e-buffer)
  (mu4e-message "Message sent"))
#+END_SRC

I set my compose frame to be a dedicated window, which then takes care of all window management for me.

#+BEGIN_SRC emacs-lisp
(defun malb/mu4e-compose-frame ()
  (sleep-for 0.25) ;; this is a HACK
  (set-frame-size (selected-frame) 80 60)
  (sleep-for 0.25) ;; this is a HACK
  (set-window-dedicated-p (get-buffer-window (current-buffer)) t))
#+END_SRC

** PGP

#+BEGIN_SRC emacs-lisp
(setq mml2015-encrypt-to-self t)
(define-key mu4e-compose-mode-map (kbd "C-c s") 'mml-secure-message-sign-pgpmime)
(define-key mu4e-compose-mode-map (kbd "C-c e") 'mml-secure-message-encrypt-pgpmime)
(setq epg-gpg-program "gpg2")
#+END_SRC

** Org-Mu4e

Link to mu4e messages and threads.

#+BEGIN_SRC emacs-lisp
(use-package org-mu4e
  :ensure nil
  :config (progn
            (setq org-mu4e-link-query-in-headers-mode t)
            (advice-add 'org-mu4e-open :around  #'malb/switch-to-mu4e-advice)))
#+END_SRC

****** TODO check if advise can be removed since we’re now checking for major-mode

* Blogging

We change the default template to not include the title which is filled in by deft. We also query the user for a date/time for the blog post.

#+BEGIN_SRC emacs-lisp
(use-package org2blog
  :config (progn
            (let ((credentials (auth-source-user-and-password "martinralbrecht.wordpress.com")))
              (setq org2blog/wp-blog-alist
                    `(("martinralbrecht"
                       :url "https://martinralbrecht.wordpress.com/xmlrpc.php"
                       :username ,(car credentials)
                       :password ,(cadr credentials)))))
            (setq org2blog/wp-track-posts (list malb/work-org "Blog"))

            (defun malb/org2blog/wp-format-buffer (buffer-template)
              "Buffer formatting function without title."
              (format buffer-template
                      (format-time-string "[%Y-%m-%d %a %H:%M]" (org-read-date t t))
                      (mapconcat
                       (lambda (cat) cat)
                       (or (plist-get (cdr org2blog/wp-blog) :default-categories)
                           org2blog/wp-default-categories)
                       ", ")))

            (setq org2blog/wp-use-sourcecode-shortcode nil
                  org2blog/wp-image-upload t
                  org2blog/wp-show-post-in-browser nil
                  org2blog/wp-default-categories '("cryptography")
                  org2blog/wp-buffer-format-function #'malb/org2blog/wp-format-buffer
                  org2blog/wp-buffer-template "#+DATE: %s
,#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
,#+CATEGORY: %s
,#+TAGS:
,#+DESCRIPTION:
\n")

            ))
#+END_SRC

****** TODO https://github.com/org2blog/org2blog/wiki/Debugging-Stories

* PDF Viewer

[[https://github.com/politza/pdf-tools][PDF tools]] is a reasonable PDF viewer for Emacs.

We also add support to extract PDF annotations to a temporary org-mode/markdown buffer, based on [[https://github.com/machc/pdf-tools-org][pdf-tools-org]], and calling [[https://github.com/tabulapdf/tabula-java][tabular]] or [[https://en.wikipedia.org/wiki/Pdftotext][pdftotext]].

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :after (org tex)
  :config (progn
            (pdf-tools-install)
            (setq-default pdf-view-display-size 'fit-page)

            (require 'pdf-annot)

            (setq pdf-annot-default-annotation-properties
                  `((t (label . ,user-full-name))
                    (text (icon . "Note")
                          (color . "#dc322f"))
                    (highlight (color . "#fef3d5"))
                    (squiggly (color . "#dc322f"))
                    (strike-out(color . "#dc322f"))
                    (underline (color . "#268bd2"))))

            (setq pdf-view-resize-factor 1.1
                  pdf-annot-activate-created-annotations t
                  pdf-misc-print-programm "gtklp")

            (add-hook 'pdf-annot-list-mode-hook #'pdf-annot-list-follow-minor-mode)

            (defun malb/pdf-extract-table (&optional format)
              (let* ((format- (upcase (or format "CSV")))
                     (pdf-filename (buffer-file-name))
                     (txt-filename (make-temp-name "/tmp/tabula-"))
                     (buffer (generate-new-buffer
                              (generate-new-buffer-name (format "*tabular<%s>*"
                                                                (file-name-base pdf-filename))))))
                (shell-command (format "java -jar %s -f %s -p %d -o \"%s\" \"%s\""
                                       malb/tabular-jar
                                       format-
                                       (pdf-view-current-page)
                                       txt-filename
                                       pdf-filename) nil)
                (switch-to-buffer buffer)
                (insert-file-contents txt-filename)
                (cond
                 ((eq format nil) (progn
                                    (org-mode)
                                    (call-interactively 'mark-whole-buffer)
                                    (call-interactively 'org-table-convert-region)))
                 ((string-equal format "JSON") (progn
                                                 (json-mode)
                                                 (json-pretty-print-buffer))))
                (delete-file txt-filename)))

            (defun malb/pdf-extract-text ()
              (let* ((pdf-filename (buffer-file-name))
                     (txt-filename (make-temp-name "/tmp/tabula-"))
                     (buffer (generate-new-buffer
                              (generate-new-buffer-name (format "*pdftotext<%s>*"
                                                                (file-name-base pdf-filename))))))
                (shell-command (format "pdftotext -layout -nopgbrk \"%s\" \"%s\""
                                       pdf-filename txt-filename) nil)
                (switch-to-buffer buffer)
                (insert-file-contents txt-filename)
                (delete-file txt-filename)))

            (defun malb/pdf-view-llncs-from-bounding-box (arg &optional window)
              "Set the height from the page's bounding-box."
              (interactive "P")
              (let* ((bb (pdf-cache-boundingbox (pdf-view-current-page window)))
                     (h-margin (max (if arg 0.35 0.28) (or pdf-view-bounding-box-margin 0.0)))
                     (w-margin (max 0.05 (or pdf-view-bounding-box-margin 0.0)))
                     (slice (list (- (nth 0 bb)
                                     (/ h-margin 2.0))
                                  (- (nth 1 bb)
                                     (/ w-margin 2.0))
                                  (+ (- (nth 2 bb) (nth 0 bb))
                                     h-margin)
                                  (+ (- (nth 3 bb) (nth 1 bb))
                                     w-margin))))
                (apply 'pdf-view-set-slice
                       (append slice (and window (list window))))))

            (defun pdf-tools-org-edges-to-region (edges)
              "Attempt to get 4-entry region \(LEFT TOP RIGHT BOTTOM\) from several EDGES.
We need this to import annotations and to get marked-up text, because
annotations are referenced by its edges, but functions for these tasks
need region."
              (let ((left0 (nth 0 (car edges)))
                    (top0 (nth 1 (car edges)))
                    (bottom0 (nth 3 (car edges)))
                    (top1 (nth 1 (car (last edges))))
                    (right1 (nth 2 (car (last edges))))
                    (bottom1 (nth 3 (car (last edges))))
                    (n (safe-length edges)))
                ;; we try to guess the line height to move
                ;; the region away from the boundary and
                ;; avoid double lines
                (list left0
                      (+ top0 (/ (- bottom0 top0) 3))
                      right1
                      (- bottom1 (/ (- bottom1 top1) 3)))))

            (defun malb/pdf-annot-export-as-org (compact)
              "Export annotations to Org Buffer."
              (interactive "P")
              (let* ((annots (sort (pdf-annot-getannots) 'pdf-annot-compare-annotations))
                     (source-buffer (current-buffer))
                     (source-buffer-name (file-name-sans-extension (buffer-name)))
                     (source-file-name (buffer-file-name source-buffer))
                     (target-buffer-name (format "*Notes for %s*" source-buffer-name))
                     (target-buffer (get-buffer-create target-buffer-name)))
                (switch-to-buffer target-buffer)
                (org-mode)
                (erase-buffer)
                (insert (format "#+TITLE: Notes for %s\n" source-buffer-name))
                (insert (format "#+STARTUP: indent\n\n"))
                (insert (format "source: [[%s][%s]]\n\n" source-file-name source-buffer))
                (mapc
                 (lambda (annot) ;; traverse all annotations
                   (progn
                     (let ((page (cdr (assoc 'page annot)))
                           (highlighted-text
                            (if (pdf-annot-get annot 'markup-edges)
                                (let ((highlighted-text
                                       (with-current-buffer source-buffer
                                         (pdf-info-gettext (pdf-annot-get annot 'page)
                                                           (pdf-tools-org-edges-to-region
                                                            (pdf-annot-get annot 'markup-edges))))))
                                  (replace-regexp-in-string "\n" " " highlighted-text))
                              nil))
                           (note (pdf-annot-get annot 'contents)))

                       (when (or highlighted-text (> (length note) 0))
                         (insert (if compact "- " "* "))
                         (insert (format "page %s" page))

                         (when highlighted-text
                           (insert (if compact (format ": “%s” " highlighted-text)
                                     (concat "\n\n#+BEGIN_QUOTE\n"
                                             highlighted-text
                                             "\n#+END_QUOTE"))))
                         (if (> (length note) 0)
                             (insert (if compact (format " %s\n" note)
                                       (format "\n\n%s\n\n" note)))
                           (insert (if compact "\n" "\n\n")))))))
                 (cl-remove-if
                  (lambda (annot) (member (pdf-annot-get-type annot) (list 'link)))
                  annots)
                 )))

            (defun malb/pdf-annot-export-as-md (compact)
              "Export annotations to Makrdown buffer."
              (interactive "P")
              (let* ((annots (sort (pdf-annot-getannots) 'pdf-annot-compare-annotations))
                     (source-buffer (current-buffer))
                     (source-buffer-name (file-name-sans-extension (buffer-name)))
                     (source-file-name (buffer-file-name source-buffer))
                     (target-buffer-name (format "*Notes for %s*" source-buffer-name))
                     (target-buffer (get-buffer-create target-buffer-name)))
                (switch-to-buffer target-buffer)
                (markdown-mode)
                (erase-buffer)
                (insert (format "---\ntitle: Notes for %s\n---\n\n" source-buffer-name))
                (insert (format "source: [%s](%s)\n\n" source-buffer source-file-name))
                (mapc
                 (lambda (annot) ;; traverse all annotations
                   (progn
                     (let ((page (cdr (assoc 'page annot)))
                           (highlighted-text
                            (if (pdf-annot-get annot 'markup-edges)
                                (let ((highlighted-text
                                       (with-current-buffer source-buffer
                                         (pdf-info-gettext (pdf-annot-get annot 'page)
                                                           (pdf-tools-org-edges-to-region
                                                            (pdf-annot-get annot 'markup-edges))))))
                                  (replace-regexp-in-string "\n" " " highlighted-text))
                              nil))
                           (note (pdf-annot-get annot 'contents)))

                       (when (or highlighted-text (> (length note) 0))
                         (insert (if compact "- " "On "))
                         (insert (format "page %s" page))

                         (when highlighted-text
                           (insert (if compact (format ": “%s” " highlighted-text)
                                     (concat ":  \n> "
                                             (replace-regexp-in-string "\n" "\n> " highlighted-text)
                                             "\n"))))
                         (if (> (length note) 0)
                             (insert (if compact (format " %s\n" note)
                                       (format "\n\n%s\n\n" note)))
                           (insert (if compact "\n" "\n\n")))))))
                 (cl-remove-if
                  (lambda (annot) (member (pdf-annot-get-type annot) (list 'link)))
                  annots)
                 )))

            (defhydra malb/hydra-pdf-extract (:color blue)
              "
Org:       _o_ compact  _O_ normal     _t_ table
Markdown:  _m_ compact  _M_ normal
Other:     _p_ plain    _c_ csv table  _j_ json table _x_ ocr
"
              ("o" (lambda () (interactive) (malb/pdf-annot-export-as-org 1)))
              ("O" malb/pdf-annot-export-as-org)
              ("m" (lambda () (interactive) (malb/pdf-annot-export-as-md  1)))
              ("M" malb/pdf-annot-export-as-md)
              ("c" (lambda () (interactive) (malb/pdf-extract-table "CSV")))
              ("j" (lambda () (interactive) (malb/pdf-extract-table "JSON")))
              ("t" (lambda () (interactive) (malb/pdf-extract-table)))
              ("p" (lambda () (interactive) (malb/pdf-extract-text)))
              ("x" (lambda () (interactive) (start-process (format "ocr %s" buffer-file-name)
                                                           nil "ocrmypdf" buffer-file-name buffer-file-name)))
              ("q" nil "cancel"))

            (bind-key "s h" #'malb/pdf-view-llncs-from-bounding-box pdf-view-mode-map)
            (bind-key "D" #'dedicated-mode pdf-view-mode-map)
            (bind-key "x" #'malb/hydra-pdf-extract/body pdf-view-mode-map)

            (defun malb/pdf-annot-move (forward)
              (let ((annot-list (with-current-buffer
                                    (pdf-annot-get-buffer pdf-annot-edit-contents--annotation)
                                  pdf-annot-list-buffer)))
                (if annot-list
                    (progn
                      (pdf-annot-edit-contents-commit)
                      (if forward
                          (call-interactively 'tablist-next-line)
                        (call-interactively 'tablist-previous-line))
                      (call-interactively 'tablist-find-entry))
                  (let ((this nil)
                        (next nil)
                        (annotations
                         (sort (pdf-annot-getannots
                                nil nil
                                (cdar pdf-annot-edit-contents--annotation))
                               'pdf-annot-compare-annotations)))
                    (dolist (annot (if forward annotations (reverse annotations)))
                      (when (equal this t)
                        (setq next annot)
                        (setq this nil))
                      (when (equal (pdf-annot-get-id annot)
                                   (pdf-annot-get-id pdf-annot-edit-contents--annotation))
                        (setq this t)))
                    (pdf-annot-edit-contents-finalize t)
                    (when next
                      (pdf-view-goto-page (pdf-annot-get next 'page))
                      (pdf-annot-edit-contents next))))))

            (defun malb/pdf-annot-next ()
              (interactive)
              (malb/pdf-annot-move t))

            (defun malb/pdf-annot-prev ()
              (interactive)
              (malb/pdf-annot-move nil))

            (defun malb/pdf-annot-yank-highlight ()
              (interactive)
              (let* ((a pdf-annot-edit-contents--annotation)
                     (text
                      (replace-regexp-in-string
                       "\n" " "
                       (pdf-info-gettext
                        (pdf-annot-get a 'page)
                        (pdf-tools-org-edges-to-region (pdf-annot-get a 'markup-edges))
                        0
                        (pdf-annot-get a 'buffer)))))
                (insert (format "\"%s\"" text))))

            (bind-key "C-c C-n" 'malb/pdf-annot-next pdf-annot-edit-contents-minor-mode-map)
            (bind-key "C-c C-p" 'malb/pdf-annot-prev pdf-annot-edit-contents-minor-mode-map)
            (bind-key "C-c C-y" 'malb/pdf-annot-yank-highlight pdf-annot-edit-contents-minor-mode-map)

            (defun malb/do-to-pdf-view-buffer (fn)
              (let ((cur-window (get-buffer-window)))
                (dolist (window (window-list))
                  (let ((buffer (window-buffer window)))
                    (with-current-buffer buffer
                      (when (eq major-mode 'pdf-view-mode)
                        (select-window window)
                        (call-interactively fn)
                        (select-window cur-window)
                        ))))))

            (defun malb/other-pdf-view-next-page ()
              (interactive)
              (malb/do-to-pdf-view-buffer #'pdf-view-next-page))

            (defun malb/other-pdf-view-prev-page ()
              (interactive)
              (malb/do-to-pdf-view-buffer #'pdf-view-previous-page))

            (bind-key "C->" #'malb/other-pdf-view-next-page org-mode-map)
            (bind-key "C-<" #'malb/other-pdf-view-prev-page org-mode-map)
            (bind-key "C->" #'malb/other-pdf-view-next-page LaTeX-mode-map)
            (bind-key "C-<" #'malb/other-pdf-view-prev-page LaTeX-mode-map)))
#+END_SRC

* Directories
** Dired

=dired-listing-switches= explained:

- =l=: Is the only mandatory one.
- =a=: Means to list invisible files.
- =G=: Don't show group information.
- =h=: Human readable sizes, such as M for megabytes.
- =1v=: Affects the sorting of digits, hopefully in a positive way.
- =--group-directories-first=: self-explanatory

Note, you can use =dired-toggle-read-only= (=C-x C-q=) to make a Dired buffer editable to batch-rename.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :commands dired
  :config (progn
            (require 'dired-x)
            (setq dired-listing-switches "-laGh1v --group-directories-first")

            (defvar malb/unimportant-files
              (mapconcat 'identity '("\\.idx" "\\.run\\.xml$" "\\.bcf$" ".blg$"
                                     "-blx.bib$" "\\.snm$"
                                     "\\.synctex\\.gz$" "\\.tex\\.backup$" "\\.bib\\.backup$"
                                     "\\.fdb_latexmk$" "\\.fls$"
                                     "\\.pyc"
                                     "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|out\\|nav\\|orig\\|rej\\|toc\\|vrb\\|pyg\\)\\)\\'"
                                     "^autosaves#"
                                     "^\\.?#\\|^\\..+$")
                         "\\|"))

            (push ".brf" dired-latex-unclean-extensions)
            (push ".bmt" dired-latex-unclean-extensions)
            (push ".out" dired-latex-unclean-extensions)
            (push ".nav" dired-latex-unclean-extensions)
            (push ".snm" dired-latex-unclean-extensions)
            (push ".synctex.gz" dired-latex-unclean-extensions)
            (push ".vrb" dired-latex-unclean-extensions)

            (setq dired-garbage-files-regexp malb/unimportant-files
                  dired-omit-files malb/unimportant-files
                  dired-recursive-copies 'always
                  dired-recursive-deletes 'always
                  dired-dwim-target t
                  dired-omit-verbose nil
                  dired-auto-revert-buffer t
                  wdired-allow-to-change-permissions t
                  wdired-use-dired-vertical-movement 'sometimes)

            (bind-key "C-s" #'dired-isearch-filenames dired-mode-map)

            (defun malb/enable-dired-omit-mode ()
              (dired-omit-mode))
            (add-hook 'dired-mode-hook #'malb/enable-dired-omit-mode)
            (defun malb/dired-layout ()
              (setq-local tab-width 1)
              (toggle-truncate-lines 1))
            (add-hook 'dired-mode-hook #'malb/dired-layout)

            (bind-key "a" #'dired-find-file-other-window dired-mode-map)
            (bind-key "RET" #'dired-find-alternate-file dired-mode-map)
            (bind-key "^"  (lambda () (interactive) (find-alternate-file "..")) dired-mode-map)

            (defun dired-open-file ()
              "In dired, open the file named on this line."
              (interactive)
              (let* ((file (dired-get-filename nil t)))
                (call-process "xdg-open" nil 0 nil file)))

            (bind-key "C-c o" #'dired-open-file dired-mode-map)

            (dired-async-mode)

            (put 'dired-find-alternate-file 'disabled nil)))
#+END_SRC

Show dired histories you have visited.

#+BEGIN_SRC emacs-lisp
(use-package helm-dired-history
  :after (dired helm)
  :config (defun helm-dired-history--update(dir)
            "update variable `helm-dired-history-variable'."
            (unless helm-dired-history-cleanup-p
              (setq helm-dired-history-cleanup-p t)
              (let ((tmp-history ))
                (dolist (d helm-dired-history-variable)
                  (when (or (file-remote-p d) (file-directory-p d))
                    (add-to-list 'tmp-history d t)))
                (setq helm-dired-history-variable tmp-history)))
            (setq helm-dired-history-variable
                  (delete-dups (delete dir helm-dired-history-variable)))
            (setq helm-dired-history-variable
                  ;; HACK: adding "." to make it work again
                  (append (list (concat dir ".")) helm-dired-history-variable))
            (helm-dired-history-trim)))
#+END_SRC

[[https://camo.githubusercontent.com/966cf1fc63ee7bdb7631c0debc74957ccefaff37/687474703a2f2f692e696d6775722e636f6d2f6d6d36674662582e706e67]]

[[https://github.com/Fuco1/dired-hacks][dired-collapse]] renders directories with just one file like GitHub does.

#+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :after dired)
#+END_SRC

[[https://github.com/Fuco1/dired-hacks#dired-narrow][dired-narrow]] to … narrow down dired buffers, undo with =g=.

#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :after dired
  :bind (:map dired-mode-map ("/" . dired-narrow)))
#+END_SRC

[[https://github.com/Fuco1/dired-hacks#dired-subtree][dired-subtree]] to insert subtrees.

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :config (progn
            (defun malb/dired-subtree-all-the-icons ()
              (when all-the-icons-dired-mode (revert-buffer)))
            (advice-add 'dired-subtree-toggle :after #'malb/dired-subtree-all-the-icons))
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)))
#+END_SRC

[[https://github.com/Fuco1/dired-hacks/blob/master/dired-ranger.el][dired-ranger]] for easy copy’n’pasting.

#+BEGIN_SRC emacs-lisp
(use-package dired-ranger
  :after dired
  :bind (:map dired-mode-map
              ("C-w" . (lambda (arg)
                         (interactive "P")
                         (dired-ranger-copy arg)
                         (bind-key "C-y" #'dired-ranger-move dired-mode-map)))
              ("M-w" . (lambda (arg)
                         (interactive "P")
                         (dired-ranger-copy arg)
                         (bind-key "C-y" #'dired-ranger-paste dired-mode-map)))))
#+END_SRC

[[https://github.com/yqrashawn/fd-dired][fd-dired]] run =fd= to produce dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package fd-dired
  :ensure-system-package fdfind
  :config  (setq fd-dired-program "fdfind"
                 fd-dired-ls-option '("| xargs -0 ls -Nld" . "-Nld")))
#+END_SRC

[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] for eye candy.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :defer t
  :init (add-hook 'dired-mode-hook  #'all-the-icons-dired-mode))
#+END_SRC

[[https://github.com/asok/peep-dired][peep-dired]] for previewing files.

#+begin_src emacs-lisp
(use-package peep-dired
  :defer t
  :config (setq peep-dired-cleanup-eagerly nil
                peep-dired-cleanup-on-disable t
                peep-dired-enable-on-directories t)
  :bind (:map dired-mode-map
              ("P" . peep-dired)))
#+end_src

** Directory Trees (Dired Sidebar)

[[https://raw.githubusercontent.com/jojojames/dired-sidebar/master/screenshots/vscode.png]]

[[https://github.com/jojojames/dired-sidebar/][dired-sidebar]]

#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :commands (dired-sidebar-toggle-sidebar)
  :init (progn (add-hook 'dired-sidebar-mode-hook
                         (defun malb/auto-revert-local ()
                           (unless (file-remote-p default-directory)
                             (auto-revert-mode)))))
  :config (progn (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
                 (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
                 (setq dired-sidebar-theme 'icons
                       dired-sidebar-should-follow-file t
                       dired-sidebar-use-term-integration t)
                 (defun malb/dired-sidebar-drop-icons (orig-fun &rest args)
                   (if (member 'all-the-icons-dired-mode dired-mode-hook)
                       (progn
                         (remove-hook 'dired-mode-hook 'all-the-icons-dired-mode)
                         (let ((r (apply orig-fun args)))
                           (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
                           r))
                     (apply orig-fun args)))
                 (advice-add #'dired-sidebar-get-or-create-buffer :around #'malb/dired-sidebar-drop-icons)))
#+END_SRC

** Tramp

=.ssh/config= already contains the appropriate config for persistent sessions so we ask tramp to respect it.

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :config (progn
            (setq tramp-use-ssh-controlmaster-options nil
                  tramp-verbose 1
                  vc-ignore-dir-regexp (format "%s\\|%s"
                                               vc-ignore-dir-regexp
                                               tramp-file-name-regexp))))
#+END_SRC

[[https://github.com/masasam/emacs-helm-tramp/blob/master/image/helm-tramp.gif]]

#+BEGIN_SRC emacs-lisp
(use-package helm-tramp
  :after (helm tramp)
  :config (progn
            (add-to-list 'helm-commands-using-frame 'helm-tramp)))
#+END_SRC

#+BEGIN_QUOTE
[[https://github.com/emacs-pe/docker-tramp.el][docker-tramp.el]] offers a TRAMP method for Docker containers.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package docker-tramp
  :after tramp)
#+END_SRC

* Diff

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config (progn
            (setq ediff-window-setup-function 'ediff-setup-windows-plain
                  ediff-split-window-function 'split-window-horizontally
                  ediff-diff-options "-w")
            (setq-default ediff-auto-refine 'on
                          ediff-highlighting-style 'face
                          ediff-highlight-all-diffs t)
            (add-hook 'ediff-after-quit-hook-internal 'winner-undo)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq diff-switches "-u")
#+END_SRC

** Smerge

#+BEGIN_SRC emacs-lisp
(use-package smerge-mode
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (unpackaged/smerge-hydra/body)))))
#+END_SRC

** PDF Diff

#+BEGIN_SRC emacs-lisp
(defun malb/diff-pdf (arg)
  "Run pdftotext on two PDFs and open ediff buffer on texts.

Uses baloo to find files."
  (interactive "P")
  (let*  ((baloofn (helm-build-async-source "Baloo"
                     :candidates-process #'helm-baloo-search
                     :candidate-transformer '(helm-baloo-transform helm-skip-boring-files)
                     :keymap helm-generic-files-map
                     :help-message #'helm-generic-file-help-message))

          (left (if arg
                    (read-file-name "Original: ")
                  (helm :sources baloofn :prompt "Original: ")))
          (right (if arg
                     (read-file-name "New: ")
                   (helm :sources baloofn :prompt "New: ")))
          (left-tmp (make-temp-name "/tmp/left"))
          (right-tmp (make-temp-name "/tmp/right")))

    (shell-command (format "pdftotext -layout -nopgbrk \"%s\" \"%s\"" left left-tmp) nil)
    (shell-command (format "pdftotext -layout -nopgbrk \"%s\" \"%s\"" right right-tmp) nil)
    (ediff-files left-tmp right-tmp)))
#+END_SRC

* Diagrams
** [[http://plantuml.com/][PlantUML]]

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :commands (plantuml-mode)
  :init (progn
          (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
                plantuml-default-exec-mode 'jar)))
#+END_SRC

*Example*

#+BEGIN_SRC plantuml :file plantuml-example.svg :tangle no
skinparam monochrome true
skinparam dpi 150
skinparam backgroundColor transparent
skinparam classBackgroundColor transparent
skinparam style strictuml
skinparam handwritten true

title Example Sequence Diagram
activate Client
Client -> Server: Session Initiation
note right: Client requests new session
activate Server
Client <-- Server: Authorization Request
note left: Server requires authentication
Client -> Server: Authorization Response
note right: Client provides authentication
Server --> Client: Session Token
note left: Session established
deactivate Server
Client -> Client: Saves token
deactivate Client
#+END_SRC

#+RESULTS:
[[file:plantuml-example.svg]]

Note that PlantUML supports [[http://plantuml.com/latex.html][TikZ export]].

* Calendar

[[https://github.com/kiwanami/emacs-calfw][calfw]] for displaying calendars, because why not.

#+BEGIN_SRC emacs-lisp
(use-package calfw
  :commands (malb/calendar cfw:open-calendar-buffer)
  :bind (:map cfw:calendar-mode-map ("q" . kill-this-buffer))
  :config (progn
            (setq calendar-week-start-day 1)
            (use-package calfw-cal :ensure t)
            (use-package calfw-ical :ensure t)
            (use-package calfw-org :ensure t)

            ;; Those "" make everything kaputt
            (defun malb/cfw:ical-url-to-buffer (orig-fun &rest args)
              (let ((buf (apply orig-fun args)))
                (with-current-buffer buf
                  (while (search-forward "" nil t)
                    (replace-match "" nil t)))
                buf))
            (setq cfw:org-agenda-schedule-args '(:timestamp :scheduled))
            (advice-add 'cfw:ical-url-to-buffer :around #'malb/cfw:ical-url-to-buffer)))
#+END_SRC

* File Sharing
** Transfer.sh

[[https://github.com/Brillow/transfer-sh.el][transfer.sh]] for interfacing with https://transfer.sh.

#+BEGIN_SRC emacs-lisp
(use-package transfer-sh)
#+END_SRC

** Pastebin/ix.io

Interfacing with http://ix.io/, run =ix=.

#+BEGIN_SRC emacs-lisp
(use-package ix)
#+END_SRC

** Gists

To list [[https://github.com/defunkt/gist.el][gists]], run ~gist-list~:

- =g= - reload the gist list from server
- =e= - edit current gist description
- =k= - delete current gist
- =+= - add a file to the current gist
- =–= - remove a file from the current gist

- =C-x C-s= - save a new version of the gist
- =C-x C-w= - rename some file

From a dired buffer, you can: =@= - make a gist out of marked files (with a prefix, make it private)

~gist-region-or-buffer~ - Post either the current region, or if mark is not set, the current buffer as a new paste at https://gist.github.com . Copies the URL into the kill ring. With a prefix argument, makes a private paste.

#+BEGIN_SRC emacs-lisp
(use-package gist
  :commands (gist-list gist-buffer)
  :config (progn
            (setq gist-ask-for-description t)))
#+END_SRC

** Copy as

Copy source code marked up in various ways.

#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
  :commands (copy-as-format-github
             copy-as-format-jira
             copy-as-format-markdown
             copy-as-format-org-mode
             copy-as-format-slack))
#+END_SRC

* Manage Local Servers

[[https://github.com/rejeep/prodigy.el][Prodigy]] is a way of managing services from Emacs. Use it for IMAP idle via [[https://www.npmjs.com/package/imapnotify][imapnotify]]. For completeness here’s a matching imapnotify config.

#+BEGIN_SRC js :tangle no
var child_process = require('child_process');

function getStdout(cmd) {
  var stdout = child_process.execSync(cmd);
  return stdout.toString().trim();
}

exports.host = "imap.gmail.com";
exports.port = 993;
exports.tls = true;
exports.username = "martinralbrecht@gmail.com";
exports.password = // whatever needs doing
exports.onNewMail = "mbsync googlemail-minimal";
exports.onNewMailPost = "emacsclient  -e '(mu4e-update-index)'";
exports.boxes = [ "INBOX"];
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package prodigy
  :init (progn
          (prodigy-define-tag
            :name 'email
            :ready-message "Checking E-mail using IMAP IDLE. Ctrl-C to shutdown.")

          (prodigy-define-service
            :name "imapnotify"
            :command "imapnotify"
            :args (list "-c" (expand-file-name ".config/imapnotify.gmail.js" (getenv "HOME")))
            :tags '(email)
            :kill-signal 'sigkill)

          (prodigy-define-service
            :name "malb.io"
            :cwd (expand-file-name "web/malb.io" malb/projects-dir)
            :command "jekyll"
            :args '("serve" "-P" "4001")
            :port 4001
            :tags '(web))

          (prodigy-define-service
            :name "discrete-subgroup"
            :cwd (expand-file-name "web/lattice-meetings" malb/projects-dir)
            :command "jekyll"
            :args '("serve" "-P" "4002")
            :url "http://127.0.0.1:4002/discrete-subgroup/"
            :tags '(web))

          ;; (prodigy-define-service
          ;;   :name "fpylll"
          ;;   :cwd malb/projects-dir
          ;;   :command "fpylll-jupyter.sh"
          ;;   :port 8889
          ;;   :stop-signal 'sigkill
          ;;   :kill-process-buffer-on-stop t
          ;;   :tags '(development))

          (prodigy-define-service
            :name "sage-devel"
            :cwd (expand-file-name "sage/notebooks" malb/projects-dir)
            :command "sage-jupyter.sh"
            :port 8888
            :stop-signal 'sigkill
            :kill-process-buffer-on-stop t
            :tags '(development))

          (prodigy-define-service
            :name "weechat"
            :command "weechat-headless"
            :port 9000
            :stop-signal 'sigterm
            :kill-process-buffer-on-stop t
            :tags '(chat))

          (prodigy-define-service
            :name "bitlbee"
            :cwd (expand-file-name "~/Software/docker-bitlbee")
            :command "docker-compose"
            :args '("up")
            :port 16667
            :stop-signal 'sigterm
            :kill-process-buffer-on-stop t
            :tags '(chat))

          ;; start imapnotify
          (prodigy-start-service (prodigy-find-service "bitlbee"))
          (prodigy-start-service (prodigy-find-service "sage-devel"))
          (prodigy-start-service (prodigy-find-service "imapnotify"))
          (prodigy-start-service (prodigy-find-service "weechat"))))
#+END_SRC

* EMMS

#+BEGIN_SRC emacs-lisp
(use-package emms-setup
  :ensure emms)

(use-package emms-player-mplayer
  :ensure nil
  :after emms-setup
  :config (progn (emms-standard)
                 (emms-default-players)
                 (define-emms-simple-player mplayer '(file url)
                   (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                                 ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                                 ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
                   "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")))
#+END_SRC

* Browsing

([[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#browser-switch][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/switch-default-browser ()
  "switch between default browser and eww"
  (interactive)
  (if (string-equal "browse-url-default-browser" browse-url-browser-function)
      (setq browse-url-browser-function 'eww-browse-url)
    (setq browse-url-browser-function 'browse-url-default-browser))
  (message "%s" browse-url-browser-function))
#+END_SRC

Set Firefox directly because using =xdg-open= can lead to weird redirect on load.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC

** Pocket

#+begin_quote
This is a client for Pocket (getpocket.com). It allows you to manage your reading list: add, remove, delete, tag, view, favorite, etc. Doing so in Emacs with the keyboard is fast and efficient. Links can be opened in Emacs with any function, or in external browsers, and specific sites/URLs can be opened with specific browser functions. Views can be sorted by date, title, domain, tags, favorite, etc, and “limited” mutt-style. Items can be searched for using keywords, tags, favorite status, unread/archived status, etc. Items can optionally be colorized by site, making it easy to tell which items come from different sites. Items are grouped depending on the sort column.
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package pocket-reader
  :config (progn
            (setq pocket-reader-archive-on-open nil
                  pocket-reader-color-title nil
                  pocket-reader-color-site t)))
#+END_SRC

* Chat
** Tracking

#+BEGIN_SRC emacs-lisp
(use-package tracking
  :bind (
         ("<f2> <right>" . tracking-next-buffer)
         ("<f2> <left>" . tracking-previous-buffer))
  :config (progn
            (unbind-key "C-c C-SPC" tracking-mode-map)
            (unbind-key "C-c C-@" tracking-mode-map)))
#+END_SRC

** Weechat

Run [[https://weechat.org/][weechat]] for chatting through [[https://github.com/the-kenny/weechat.el][weechat.el]] to get [[https://matrix.org/docs/projects/client/weechat-matrix/][matrix]], [[https://github.com/wee-slack/wee-slack][slack]] and [[https://github.com/mbologna/docker-bitlbee][skype]].

#+BEGIN_SRC emacs-lisp
(use-package weechat
  :commands (weechat-connect malb/weechat weechat-switch-buffer)
  :bind (:map weechat-mode-map
              ("M-<up>" .  weechat-previous-input)
              ("C-<up>" .  weechat-previous-input)
              ("M-<down>" . weechat-next-input)
              ("C-<down>" . weechat-next-input))
  :after prodigy
  :config (progn
            (require 'weechat-notifications)
            (require 'weechat-tracking)
            (require 'weechat-latex)
            (require 'weechat-spelling)
            (require 'weechat-image)

            (setq weechat-tracking-types '(:highlight :message)
                  weechat-completing-read-function #'completing-read
                  weechat-auto-monitor-buffers t
                  weechat-auto-close-buffers t
                  weechat-buffer-kill-buffers-on-disconnect t)

            (add-hook 'weechat-mode-hook #'visual-line-mode)
            (add-hook 'weechat-mode-hook #'visual-fill-column-mode)
            (add-to-list 'helm-commands-using-frame #'weechat-switch-buffer)

            (defun malb/weechat ()
              (interactive)
              (weechat-connect "localhost" 9000 nil 'plain)
              (sleep-for 1.0)
              (weechat-monitor-all-buffers))
            ;; run it on startup
            (malb/weechat)))
#+END_SRC

*** Notes

#+begin_src sh
/set matrix.print_unconfirmed_messages = off # https://github.com/the-kenny/weechat.el/issues/89
/set matrix.human_buffer_names = on
#+end_src

* X11 Integration

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t                  ; use clipboard for copy and paste
      save-interprogram-paste-before-kill t      ; keep a copy of clipboard stuff around
      mouse-yank-at-point t
      mouse-drag-copy-region t
      select-enable-primary t
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

Use GTK printing interface.

#+BEGIN_SRC emacs-lisp
(setq lpr-command "gtklp")
#+END_SRC

* Autosave & Backups

Put autosave files (ie =#foo#=) in one place, not scattered across the file system.

#+BEGIN_SRC emacs-lisp
(defvar malb/autosave-dir
  (expand-file-name "autosaves" user-emacs-directory))

(make-directory malb/autosave-dir t)

(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))

(defun make-auto-save-file-name ()
  (concat malb/autosave-dir
          (if buffer-file-name
              (concat "#" (file-name-nondirectory buffer-file-name) "#")
            (expand-file-name
             (concat "#%" (buffer-name) "#")))))
#+END_SRC

Put backup files (ie =foo~=) in one place too. The ~backup-directory-alist~ list contains regexp → directory mappings. Filenames matching a regexp are backed up in the corresponding directory. Emacs will mkdir it if necessary.

#+BEGIN_SRC emacs-lisp
(defvar backup-dir (expand-file-name "autosaves" user-emacs-directory))
(setq backup-directory-alist (list (cons "." backup-dir)))
#+END_SRC

* UTF-8 Everywhere

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

(setq current-language-environment "UTF-8")
(setq default-input-method "rfc1345")

(prefer-coding-system 'utf-8)
#+END_SRC

Use [[https://gitlab.com/matsievskiysv/insert-char-preview][insert-char-preview]] for handling unicode character insertion.

#+begin_src emacs-lisp
(use-package insert-char-preview
    :commands insert-char-preview
    :bind ("C-x 8 RET" . insert-char-preview))
#+end_src

* Large Files

A file is large if it is 32MB in my world.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 33554432)
#+END_SRC

[[https://github.com/m00natic/vlfi][vlf]] for large files.

#+BEGIN_SRC emacs-lisp
(use-package vlf-setup
  :ensure vlf)
#+END_SRC

* Scratch

We don’t want the *scratch* buffer to be killed ever.

#+BEGIN_SRC emacs-lisp
(use-package unkillable-scratch
  :config (progn
            (unkillable-scratch 1)))
#+END_SRC

Get a [[https://github.com/ieure/scratch-el][scratch]] for every mode quickly

#+BEGIN_SRC emacs-lisp
(use-package scratch)
#+END_SRC

Make scratch buffer an org-mode buffer.

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode
      initial-scratch-message "\
This buffer is for notes you don't want to save, and for Lisp evaluation.
If you want to create a file, visit that file with C-x C-f,
then enter the text in that file's own buffer.

,#+begin_src emacs-lisp

,#+end_src

,#+begin_src jupyter-python

,#+end_src

")
#+END_SRC

* Misc
** Settings

Characterise files with the same name by their path.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :config (setq uniquify-buffer-name-style 'forward))
#+END_SRC

I hate tabs …

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

but if they happen to be there (I’m looking at you Go)

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

Pressing =y= or =n= is sufficient.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Kill whole line not just content on =C-k=.

#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC

In emacs minibuffer prompt, when you press the left arrow key, the cursor will move back all the way
over the prompt text. This is annoying because user often will hold down ~Alt+b~ to move back by
word to edit, and when user starts to type something, emacs will say ’This is read-only’. Then you
have to manually move cursor out of the prompt. You can try it now by calling query-replace or
shell-command. Here's how to set the cursor not going into prompt. ([[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html][source]])

#+BEGIN_SRC emacs-lisp
(setq minibuffer-prompt-properties
      (quote
       (read-only
        t
        point-entered minibuffer-avoid-prompt
        face minibuffer-prompt)))
#+END_SRC

Always prefer to load newer files, instead of giving precedence to the .elc files.

#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC

Smoother scrolling.

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10000
      scroll-preserve-screen-position t
      fast-but-imprecise-scrolling t
      auto-window-vscroll nil)
#+END_SRC

Smoother mouse scrolling.

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; one line at a time
      mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
      mouse-wheel-follow-mouse 't)                 ; scroll window under mouse
#+END_SRC

Use ~kill -pUSR1~ to kill Emacs. ([[https://github.com/wasamasa/dotemacs/blob/master/init.org][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/quit-emacs-unconditionally ()
  (interactive)
  (save-some-buffers t t)
  (kill-emacs))

(define-key special-event-map (kbd "<sigusr1>") #'malb/quit-emacs-unconditionally)
#+END_SRC

Show key combos

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

Diminish ~eldoc-mode~

#+BEGIN_SRC emacs-lisp
(blackout 'eldoc-mode)
#+END_SRC

When saving a file that starts with =#!=, make it executable.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

=C-u C-SPC C-SCP= pops the mark twice

#+BEGIN_SRC emacs-lisp
(setq set-mark-command-repeat-pop t)
#+END_SRC

Skip over duplicates ([[http://endlessparentheses.com/faster-pop-to-mark-command.html][source]]):

#+BEGIN_SRC emacs-lisp
(defun malb/multi-pop-to-mark (orig-fun &rest args)
  "Call ORIG-FUN until the cursor moves.
Try the repeated popping up to 10 times. ARGS is passed through."
  (let ((p (point)))
    (dotimes (i 10)
      (when (= p (point))
        (apply orig-fun args)))))

(advice-add 'pop-to-mark-command :around #'malb/multi-pop-to-mark)
#+END_SRC

Diminish =abbrev-mode=

#+BEGIN_SRC emacs-lisp
(blackout 'abbrev-mode)
#+END_SRC

#+BEGIN_QUOTE

In Emacs 25, Isearch can find a wide range of Unicode characters (like á, ⓐ, or 𝒶) when you search
for ASCII characters (a in this example). To enable this feature, set the variable
=search-default-mode= to =char-fold-to-regexp=. ([[http://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html][source]])

#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(setq search-default-mode 'char-fold-to-regexp
      replace-char-fold t)
#+END_SRC

Don’t error when killing read-only text.

#+BEGIN_SRC emacs-lisp
(setq kill-read-only-ok t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'profiler-report-mode-hook #'hl-line-mode)
#+END_SRC

Allow pixel-wise scaling

#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC

Don’t yank syntax highlighting etc.

#+BEGIN_SRC emacs-lisp
(add-to-list 'yank-excluded-properties 'font)
(add-to-list 'yank-excluded-properties 'font-lock-face)
#+END_SRC

Increase resolution for Excel files etc.

#+BEGIN_SRC emacs-lisp
(setq doc-view-resolution 300)
#+END_SRC

Open man pages with focus set

#+BEGIN_SRC emacs-lisp
(setq Man-notify-method 'aggressive)
#+END_SRC

Use =xdg-open= by default.

#+begin_src emacs-lisp
(setq mailcap-user-mime-data '(((viewer . "xdg-open %s") (type . ".*/.*"))))
#+end_src

Make long lines kinda work ([[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][source]])

#+begin_src emacs-lisp
(setq bidi-paragraph-direction 'left-to-right)
(when (version<= "27.1" emacs-version)
  (setq bidi-inhibit-bpa t)
  (global-so-long-mode 1))
#+end_src

Don’t prompt to save passwords.

#+begin_src emacs-lisp
(setq auth-source-save-behavior nil)
#+end_src

** Functions

Add a function for renaming the file being edited ([[https://github.com/bodil/ohai-emacs][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+END_SRC

Copy filename to clipboard

#+BEGIN_SRC emacs-lisp
(defun malb/kill-buffer-file-name ()
  "Show current buffer's filename in the echo area and add it to the kill ring."
  (interactive)
  (let ((buffer-file-name (buffer-file-name)))
    (if (null buffer-file-name)
        (message "Buffer %s is not associated with a file." (buffer-name))
      (message "%s" (kill-new buffer-file-name)))))

(defun malb/kill-buffer-file-basename ()
  "Show the buffers base name in the echo area and add it to the kill ring."
  (interactive)
  (let ((bufer-file-name (buffer-file-name)))
    (if (not (null buffer-file-name))
        (message "%s" (kill-new (file-name-nondirectory buffer-file-name)))
      (error "Buffer %s is not associated with a file" (buffer-name)))))
#+END_SRC

([[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

Run a command in a named compile buffer ([[https://ivanmalison.github.io/dotfiles/#namedcompile][source]])

#+BEGIN_SRC emacs-lisp
(defun malb/named-compile (command)
  (interactive
   (list
    (let ((command (eval compile-command)))
      (if (or compilation-read-command current-prefix-arg)
          (compilation-read-command command)
        command))))
  (compilation-start command nil (lambda (&rest args)
                                   (format "*compilation %s*" command))))
#+END_SRC

Generate new random URLs for some commonly used online services.

#+begin_src emacs-lisp
(defun malb/new-hedgedoc-url ()
  (interactive)

  (let ((url (shell-command-to-string
              "curl -Ls -o /dev/null -w %{url_effective} https://md.kif.rocks/new")))
    (when (called-interactively-p 'any)
      (kill-new url)
      (insert url))
    url))

(defun malb/new-jitsi-url (&optional prefix)
  (interactive)
  (let ((url (concat "https://meet.jit.si/"
                     prefix
                     (replace-regexp-in-string "\n" ""
                                               (shell-command-to-string "diceware -n 4")))))
    (when (called-interactively-p 'any)
      (kill-new url)
      (insert url))
    url))
#+end_src

** Clickable URLs

Make links in comments and string clickable

#+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :hook ((compilation-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)
         (markdown-mode . goto-address-mode)
         (eshell-mode . goto-address-mode)
         (shell-mode . goto-address-mode))

  :bind (:map goto-address-highlight-keymap
              ("C-c C-o" . goto-address-at-point)
              ("<RET>" . newline))

  :commands (goto-address-prog-mode goto-address-mode))
#+END_SRC

** Emacs from Elsewhere

[[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Emacs from Chrome]]

#+BEGIN_SRC emacs-lisp
(use-package edit-server ;; use emacs-everywhere
  :disabled t
  :config (progn
            (edit-server-start)
            (setq edit-server-new-frame-alist '((name . "Edit Firefox with Emacs")
                                                (width . 80)
                                                (height . 60)
                                                (minibuffer . t)
                                                (internal-border-width . 10)
                                                (skip-taskbar . t)
                                                (unsplittable . t)
                                                (menu-bar-lines . nil))
                  edit-server-default-major-mode 'markdown-mode)))
#+END_SRC

[[https://github.com/xuchunyang/grab-x-link][Grab the link]] in the current browser tab

#+BEGIN_SRC emacs-lisp
(use-package grab-x-link
  :bind (("C-c i l" . grab-x-link-firefox-insert-link)
         ("C-c i o" . grab-x-link-firefox-insert-org-link)
         ("C-c i m" . grab-x-link-firefox-insert-markdown-link)))
#+END_SRC


#+begin_src emacs-lisp
(use-package emacs-everywhere
  :after hide-mode-line-mode
  :quelpa (emacs-everywhere :fetcher github :repo "tecosaur/emacs-everywhere")
  :config (progn
            (setq emacs-everywhere-frame-parameters  '((name . "emacs-everywhere")
                                                       (minibuffer . nil)
                                                       (internal-border-width . 10)
                                                       (skip-taskbar . t)
                                                       (unsplittable . t)
                                                       (menu-bar-lines . nil)
                                                       (width . 80)
                                                       (height . 12)
                                                       (alpha . 0.95)
                                                       (buffer-predicate . (lambda (x) nil))))
            (add-hook 'emacs-everywhere-mode-hook #'hide-mode-line-mode)))
#+end_src


*** Org-protocol entpoints for bookmarklets

Load a URL in EWW

~javascript:location.href='org-protocol://eww?url='+encodeURIComponent(location.href)~

#+begin_src emacs-lisp
(defun malb/start-eww-for-url (plist)
  "Raise Emacs and call eww with the url in PLIST."
  (raise-frame)
  (eww (plist-get plist :url))
  nil)

(add-to-list 'org-protocol-protocol-alist
             '("eww"
               :protocol "eww"
               :function malb/start-eww-for-url))
#+end_src

Load URL as org-mode file

~javascript:location.href='org-protocol://read-url-as-org?url='+encodeURIComponent(location.href)~

#+begin_src emacs-lisp
(defun malb/read-url-as-org (plist)
  "Raise Emacs and readl url in PLIST as org-mode buffer."
  (raise-frame)
  (org-web-tools-read-url-as-org (plist-get plist :url))
  nil)

(add-to-list 'org-protocol-protocol-alist
             '("read-url-as-org"
               :protocol "read-url-as-org"
               :function malb/read-url-as-org))

#+end_src

Store URL as org link

~javascript:location.href='org-protocol://org-store-link?url='+encodeURIComponent(location.href)~

#+begin_src emacs-lisp
(defun malb/org-store-link-for-url (plist)
  "Raise Emacs and store url in PLIST as org-link."
  (raise-frame)
  (org-web-tools-insert-link-for-url (plist-get plist :url))
  nil)

(add-to-list 'org-protocol-protocol-alist
             '("org-store-link"
               :protocol "org-store-link"
               :function malb/org-store-link-for-url))
#+end_src

** Encryption

Transparent encryption and decryption.

#+BEGIN_SRC emacs-lisp
(use-package epa-file
  :ensure nil
  :config (progn
            (setq epa-armor t)
            (epa-file-enable)))
#+END_SRC

** Memory Usage

#+BEGIN_SRC emacs-lisp
(use-package memory-usage)
#+END_SRC

** Alert

#+BEGIN_SRC emacs-lisp
(use-package alert
  :config (setq alert-default-style 'libnotify))
#+END_SRC

** Upcase, Downcase, Capitalise

#+BEGIN_SRC emacs-lisp
(bind-key "M-l" #'downcase-dwim)
(bind-key "M-c" #'capitalize-dwim)
(bind-key "M-u" #'upcase-dwim)
#+END_SRC

* File Types
** PCAP Files

Wireshark et al. outputs ([[https://github.com/orgcandman/pcap-mode][source]])

#+BEGIN_SRC emacs-lisp
(use-package pcap-mode)
#+END_SRC

** ELF Files

List symbols in =.so= and =.a= files ([[https://github.com/abo-abo/elf-mode][source]])

#+BEGIN_SRC emacs-lisp
(use-package elf-mode
  :mode (("\\.so\\'"  . elf-mode)
         ("\\.a\\'"   . elf-mode)))
#+END_SRC

** Sobj Files

([[https://emacs.stackexchange.com/questions/44202/open-a-file-in-read-only-preprocessed-mode][source]])

#+BEGIN_SRC emacs-lisp
(define-derived-mode sobj-mode python-mode "sobj"
  "Major mode for viewing sobj files."
  (delete-region (point-min) (point-max))
  (call-process "python" nil t t "-c" (format (concat "# -*- coding: utf-8 -*-\n"
                                                      "import pickle\n"
                                                      "import pprint\n"
                                                      "pprint.PrettyPrinter(indent=4).pprint(pickle.load(open('%s', 'rb')))")
                                              (buffer-file-name)))
  (set-buffer-modified-p nil)
  (read-only-mode)
  (beginning-of-buffer))

(add-to-list 'auto-mode-alist '("\\.sobj\\'" . sobj-mode))
#+END_SRC

** Log Files

Using [[https://github.com/doublep/logview][logview]] mode.

#+BEGIN_SRC emacs-lisp
(use-package logview
  :commands (logview-mode)
  :config (setq logview-auto-revert-mode 'auto-revert-tail-mode))
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

** YaML Files

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :hook (csv-mode . hl-line-mode)
  :hook (csv-mode . toggle-truncate-lines)
  :hook (csv-mode . (lambda ()  (call-interactively #'csv-align-fields))))
#+END_SRC

** Docker Filers

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode ("Dockerfile\\." . dockerfile-mode))
#+END_SRC

** ePub

[[https://github.com/wasamasa/nov.el][Nov.el]] is surprisingly useful.

#+BEGIN_SRC emacs-lisp
(use-package nov
  :mode ("\\.epub$" . nov-mode)
  :config (progn
            (add-hook 'nov-mode-hook #'visual-fill-column-mode)))
#+END_SRC

* Theme & Look
** Frame Title

Display buffer name in frame titles ([[https://github.com/wasamasa/dotemacs/blob/master/init.org#display-buffer-name-in-frame-titles][source]])

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '("" (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))
        " - " invocation-name))
#+END_SRC

** Stripe Buffer

[[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png]] ([[https://github.com/sabof/stripe-buffer/raw/master/screenshot.png][source]])

[[https://github.com/sabof/stripe-buffer][Stripe Buffer]] makes it vastly easier to read tables and dired buffers. We apply this [[https://github.com/sabof/stripe-buffer/pull/14][patch]] for performance.

#+BEGIN_SRC emacs-lisp
(use-package stripe-buffer
  :config (progn
            (add-hook 'dired-mode-hook #'turn-on-stripe-buffer-mode)))
#+END_SRC

** Modeline

([[https://github.com/seagle0128/doom-modeline][source]])

[[https://user-images.githubusercontent.com/140797/49694189-6913d480-fbc0-11e8-93ae-9578455dcd2c.png]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :config (progn
            (require 'doom-modeline-segments)
            (doom-modeline-def-segment conda-env
              "The current conda environment.  Works with `conda'."
              (when (bound-and-true-p conda-env-current-name)
                (propertize (format " |%s|" conda-env-current-name)
                            'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)
                            'help-echo (format "Conda environment: %s"
                                               conda-env-current-name))))
            (setq doom-modeline-icon t
                  doom-modeline-major-mode-icon t
                  doom-modeline-major-mode-color-icon t
                  doom-modeline-buffer-file-name-style 'truncate-upto-project
                  doom-modeline-buffer-state-icon t
                  doom-modeline-github nil
                  doom-modeline-buffer-encoding nil
                  doom-modeline-minor-modes nil)

            (doom-modeline-def-modeline 'main
              '(bar workspace-name window-number modals
                    matches buffer-info remote-host
                    buffer-position word-count parrot selection-info
                    conda-env)
              '(objed-state misc-info persp-name battery grip irc mu4e
                            gnus github debug lsp minor-modes input-method
                            indent-info buffer-encoding major-mode process vcs checker))
            (if (bound-and-true-p imenu-list-mode-line-format)
                (setq imenu-list-mode-line-format
                      '((:eval
                         (doom-modeline-segment--bar))
                        (:propertize "%b" face mode-line-buffer-id)
                        " "
                        (:eval (buffer-name imenu-list--displayed-buffer))
                        " "
                        (:eval
                         (doom-modeline-segment--matches)))))
            (add-hook 'mu4e-compose-mode-hook #'doom-modeline-set-minimal-modeline))
  :custom (doom-modeline-project-detection 'projectile))
#+END_SRC

** Theme

Use both [[https://github.com/bbatsov/solarized-emacs][solarized]] and [[https://github.com/bbatsov/zenburn-emacs][zenburn]]. But use a solarized patched to be less yellow by changing

| color     | original  | malb      |
| ~s-base2~ | ~#eee8d5~ | ~#eeedea~ |
| ~s-base3~ | ~#fdf6e3~ | ~#fdfcf9~ |

#+RESULTS:

The result looks like this:

[[./screenshot.png]]


#+BEGIN_SRC emacs-lisp
(use-package solarized
  :ensure solarized-theme
  :config (progn
            (setq solarized-use-variable-pitch nil
                  solarized-high-contrast-mode-line nil
                  solarized-height-minus-1 1.0
                  solarized-height-plus-1  1.0
                  solarized-height-plus-2  1.0
                  solarized-height-plus-3  1.0
                  solarized-height-plus-4  1.0
                  solarized-use-less-bold nil
                  solarized-emphasize-indicators t
                  solarized-scale-org-headlines nil
                  solarized-scale-outline-headlines nil
                  x-underline-at-descent-line t)))
#+END_SRC

*** High Contrast/Bright

#+BEGIN_SRC emacs-lisp
(use-package one-themes
  :disabled)
#+END_SRC

*** Switch between Light and Dark Theme

#+BEGIN_SRC emacs-lisp
(defun malb/toggle-light-dark ()
  "Switch between light and dark theme"
  (interactive)
  (if (custom-theme-enabled-p 'solarized-light-malb)
      (progn
        (disable-theme 'solarized-light-malb)
        (load-theme 'solarized-zenburn-malb)
        (add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode))
    (progn
      (disable-theme 'solarized-zenburn-malb)
      (load-theme 'solarized-light-malb)
      (remove-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)))
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (cond ((eq major-mode 'org-mode)
             ;; nicked from org-ctrl-c-ctrl-c
             (let ((org-inhibit-startup-visibility-stuff t)
	               (org-startup-align-all-tables nil))
	           (when (boundp 'org-table-coordinate-overlays)
	             (mapc #'delete-overlay org-table-coordinate-overlays)
	             (setq org-table-coordinate-overlays nil))
	           (org-save-outline-visibility 'use-markers (org-mode-restart)))))
      (cond ((eq major-mode 'org-agenda-mode)
             (org-agenda-redo-all)))
      (cond ((eq major-mode 'pdf-view-mode)
             (if (custom-theme-enabled-p 'solarized-light-malb)
                 (pdf-view-midnight-minor-mode -1)
               (pdf-view-midnight-minor-mode 1))
             )))))
#+END_SRC

*** Load Theme

#+BEGIN_SRC emacs-lisp
(defvar malb/theme-loaded nil)

(defun malb/load-theme (frame)
  (when (not malb/theme-loaded)
    (select-frame frame)
    (load-theme 'solarized-light-malb)
    (eval-after-load "unicode-fonts"
      '(unicode-fonts-setup))
    (doom-modeline-mode t)
    (setq malb/theme-loaded t)))

(if (daemonp)
    (add-hook 'after-make-frame-functions #'malb/load-theme)
  (malb/load-theme (selected-frame)))
#+END_SRC

** Fonts

Better unicode font support.

#+BEGIN_SRC emacs-lisp
(use-package unicode-fonts)
#+END_SRC

[[https://raw.githubusercontent.com/domtronn/all-the-icons.el/master/logo.png]]

([[https://github.com/domtronn/all-the-icons.el][source]])

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

[[https://fonts.google.com/specimen/Cousine][Cousine]] is wide font which means glyphs rendered in different fonts (when Cousine doesn’t have the matching glyph) are too high. Thus, we scale those other fonts down when Cousine is the default face. Note that =face-font-rescale-alist= is frame specific, thus the hook.

#+BEGIN_SRC emacs-lisp
(defun malb/fonts (frame)
  (when (string-match "Cousine" (alist-get 'font default-frame-alist))
    (with-selected-frame frame
      (setq face-font-rescale-alist nil)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "DejaVu Sans Mono") 0.9) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "FontAwesome") 0.85) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "Material Icons") 0.7) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "all-the-icons") 0.95) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "github-octicons") 0.85) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "Symbola") 0.9) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "file-icons") 0.75) t)
      (add-to-list 'face-font-rescale-alist (cons (font-spec :family "Noto Sans Symbols") 0.7) t))))

  (add-hook 'after-make-frame-functions #'malb/fonts)
  (malb/fonts (selected-frame)) ;; initial frame
#+END_SRC

** SHR (EWW et al)

#+begin_quote
[[https://github.com/chenyanming/shrface/][shrface]] is a shr faces package that helps you apply your favourite org faces to shr, dash-docs, eww, nov.el, mu4e, and more!
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package shr
  :ensure nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package shrface
  :after shr
  :config (progn
            (shrface-basic)
            (shrface-trial)
            (setq shrface-paragraph-indentation 0
                  shrface-href-versatile t
                  shrface-paragraph-fill-column fill-column)

            (with-eval-after-load 'nov
              ;; reset nov-shr-rendering-functions, in case of the list get bigger and bigger
              (setq nov-shr-rendering-functions '((img . nov-render-img)
                                                  (title . nov-render-title)))
              (setq nov-shr-rendering-functions (append nov-shr-rendering-functions
                                                        shr-external-rendering-functions))
              (add-hook 'nov-mode-hook #'shrface-mode))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eww
  :ensure nil
  :after shrface
  :bind (:map eww-mode-map
              ("<tab>" .  org-cycle)
              ("<backtab>" . org-shifttab))
  :config (progn
            (add-hook 'eww-mode-hook #'visual-fill-column-mode)
            (add-hook 'eww-after-render-hook 'shrface-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package shr-tag-pre-highlight
  :after shr
  :config (progn
            (add-to-list 'shr-external-rendering-functions '(pre . shr-tag-pre-highlight))

            (defun shrface-shr-tag-pre-highlight (pre)
              "Highlighting code in PRE."
              (let* ((shr-folding-mode 'none)
                     (shr-current-font 'default)
                     (code (with-temp-buffer
                             (shr-generic pre)
                             (setq-local fill-column 120)
                             (indent-rigidly (point-min) (point-max) 2)
                             (if (eq "" (dom-texts pre))
                                 nil
                               (progn
                                 (setq-local fill-column shrface-paragraph-fill-column)
                                 (indent-rigidly (point-min) (point-max) shrface-paragraph-indentation)))
                             (buffer-string)))
                     (lang (or (shr-tag-pre-highlight-guess-language-attr pre)
                               (let ((sym (language-detection-string code)))
                                 (and sym (symbol-name sym)))))
                     (mode (and lang
                                (shr-tag-pre-highlight--get-lang-mode lang))))
                (shr-ensure-newline)
                (insert (make-string shrface-paragraph-indentation ?\ )) ; make indent string
                (insert (propertize (concat "#+BEGIN_SRC " lang) 'face 'org-block-begin-line))
                (shr-ensure-newline)
                (insert
                 (or (and (fboundp mode)
                          (with-demoted-errors "Error while fontifying: %S"
                            (shr-tag-pre-highlight-fontify code mode)))
                     code))
                (shr-ensure-newline)
                (insert (make-string shrface-paragraph-indentation ?\ )) ; make indent string
                (insert (propertize "#+END_SRC" 'face 'org-block-end-line ) )
                (shr-ensure-newline)))))
#+END_SRC

Set higher contrast.

#+BEGIN_SRC emacs-lisp
(setq shr-color-visible-luminance-min 80)
#+END_SRC

** Rainbow Mode

Colourise colours or names in buffers ([[http://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/packages/rainbow-mode][source]])

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :config (progn
            (add-hook 'emacs-lisp-mode-hook #'rainbow-mode))
  :blackout rainbow-mode)
#+END_SRC

** Vim-like Empty Line Indicator

([[https://www.reddit.com/r/emacs/comments/2kdztw/emacs_in_evil_mode_show_tildes_for_blank_lines/][source]])

#+BEGIN_SRC emacs-lisp
(define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
(setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
(set-fringe-bitmap-face 'tilde 'font-lock-comment-face)
(setq-default indicate-empty-lines t)
#+END_SRC

** Text Size

Easily change the text size:

#+BEGIN_SRC emacs-lisp
(defun malb/global-text-scale-increase ()
  "Globally increase font size."
  (interactive)
  (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) 5)))

(defun malb/global-text-scale-decrease ()
  "Globally decrease font size."
  (interactive)
  (set-face-attribute 'default nil :height (- (face-attribute 'default :height) 5)))

(bind-key "C-=" #'text-scale-increase)
(bind-key "C--" #'text-scale-decrease)
(bind-key "C-M-=" #'malb/global-text-scale-increase)
(bind-key "C-M--" #'malb/global-text-scale-decrease)
(bind-key "C-<mouse-4>" #'text-scale-increase)
(bind-key "C-<mouse-5>" #'text-scale-decrease)
(bind-key "C-M-<mouse-4>" #'malb/global-text-scale-increase)
(bind-key "C-M-<mouse-5>" #'malb/global-text-scale-decrease)
#+END_SRC

** Bell

#+BEGIN_SRC emacs-lisp :tangle no
(setq visible-bell t)
#+END_SRC

** Dim other Buffers

#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :commands dimmer-mode
  :config (setq dimmer-percent 0.2))
#+END_SRC

** Hide Mode Line

#+begin_src emacs-lisp
(use-package hide-mode-line)
#+end_src

* Key Bindings

#+BEGIN_SRC emacs-lisp
(malb/set-menu-key "<f2>" #'malb/hydra-window/body)
(malb/set-menu-key "A" #'malb/imenu-anywhere)
(malb/set-menu-key "a" #'aws-polly-region)
(malb/set-menu-key "B" #'malb/helm-mu-contacts)
(malb/set-menu-key "b" #'helm-bookmarks)
(malb/set-menu-key "C" #'helm-calcul-expression)
(malb/set-menu-key "c" #'mu4e-compose-new)
(malb/set-menu-key "d" "\C-a\C- \C-n\M-w\C-y\C-p") ; duplicate previous line
(malb/set-menu-key "e" #'malb/toggle-eshell)
(malb/set-menu-key "i" #'malb/helm-in-buffer)
(malb/set-menu-key "j" #'avy-goto-char-timer)
(malb/set-menu-key "k" #'helm-baloo)
(malb/set-menu-key "l" #'helm-bibtex-with-local-bibliography)
(malb/set-menu-key "L" #'mathpix-screenshot)
(malb/set-menu-key "K" #'org-download-screenshot)
(malb/set-menu-key "m" (lambda () (interactive) (malb/switch-to-mu4e)))
(malb/set-menu-key "M" #'malb/helm-mu)
(malb/set-menu-key "/" #'malb/helm-ag-projects)
(malb/set-menu-key "o" #'malb/helm-org-ql-agenda-files)
(malb/set-menu-key "p" #'prodigy)
(malb/set-menu-key "s" #'malb/toggle-sage)
(malb/set-menu-key "S" #'weechat-switch-buffer)
(malb/set-menu-key "t" #'helm-tramp)
(malb/set-menu-key "r" #'spray-mode)
(malb/set-menu-key "z" #'malb/toggle-vterm)
(malb/set-menu-key "Z" #'malb/ykcd)
(malb/set-menu-key "<f4>" #'emms-previous)
(malb/set-menu-key "<f5>" #'emms-pause)
(malb/set-menu-key "<f6>" #'emms-next)
(malb/set-menu-key "<up>" #'drag-stuff-up)
(malb/set-menu-key "<down>" #'drag-stuff-down)
(malb/set-menu-key "#" #'jupyter-org-hydra/body)
#+END_SRC

Remap join-line to ~M-j~ where it's easier to get to. ~join-line~ will join the line you're on with the line above it in a reasonable manner for the type of file you're editing.

#+BEGIN_SRC emacs-lisp
(bind-key "M-j" #'join-line)
#+END_SRC

=C-z= only annoys me, use =C-x C-z= when you need it

#+BEGIN_SRC emacs-lisp
(bind-key "C-z" nil)
#+END_SRC

I never use ~list-directory~, I only mistype it.

#+BEGIN_SRC emacs-lisp
(unbind-key "C-x C-d")
#+END_SRC

** Toggle Map

([[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][source]])

#+BEGIN_SRC emacs-lisp
(define-prefix-command 'malb/toggle-map)
(define-key ctl-x-map "t" 'malb/toggle-map)

(bind-key "e" #'toggle-debug-on-error        malb/toggle-map)
(bind-key "f" #'malb/toggle-fold             malb/toggle-map)
(bind-key "l" #'malb/toggle-light-dark       malb/toggle-map)
(bind-key "t" #'toggle-truncate-lines        malb/toggle-map)
(bind-key "q" #'toggle-debug-on-quit         malb/toggle-map)
(bind-key "i" #'imenu-list-smart-toggle      malb/toggle-map)
(bind-key "d" #'dired-sidebar-toggle-sidebar malb/toggle-map)
(bind-key "D" #'dedicated-mode               malb/toggle-map)
(bind-key "c" #'visual-fill-column-mode      malb/toggle-map)
#+END_SRC

** Learn Key Bindings

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :blackout which-key-mode
  :config (progn
            (which-key-mode 1)))
#+END_SRC

* Technical Artefacts

# Local Variables:
# eval: (when (fboundp 'ws-butler-mode) (ws-butler-mode 1))
# org-cycle-separator-lines: 0
# fill-column: 158
# End:
